
Embedded2Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000088b0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000414  08008a40  08008a40  00018a40  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008e54  08008e54  0002024c  2**0
                  CONTENTS
  4 .ARM          00000000  08008e54  08008e54  0002024c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008e54  08008e54  0002024c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008e54  08008e54  00018e54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008e58  08008e58  00018e58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000024c  20000000  08008e5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002024c  2**0
                  CONTENTS
 10 .bss          000004ac  2000024c  2000024c  0002024c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200006f8  200006f8  0002024c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002024c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011f9f  00000000  00000000  0002027c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002bce  00000000  00000000  0003221b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fe8  00000000  00000000  00034df0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000e80  00000000  00000000  00035dd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020eb2  00000000  00000000  00036c58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000146d9  00000000  00000000  00057b0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c27ce  00000000  00000000  0006c1e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012e9b1  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005138  00000000  00000000  0012ea04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000024c 	.word	0x2000024c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008a28 	.word	0x08008a28

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000250 	.word	0x20000250
 80001cc:	08008a28 	.word	0x08008a28

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b086      	sub	sp, #24
 8000bac:	af00      	add	r7, sp, #0

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bae:	f001 fbeb 	bl	8002388 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 8000bb2:	f000 f8a3 	bl	8000cfc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bb6:	f000 f9a3 	bl	8000f00 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000bba:	f000 f901 	bl	8000dc0 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000bbe:	f000 f93f 	bl	8000e40 <MX_SPI1_Init>
  MX_USB_PCD_Init();
 8000bc2:	f000 f97b 	bl	8000ebc <MX_USB_PCD_Init>

  USART2_Init();
 8000bc6:	f000 f83d 	bl	8000c44 <USART2_Init>

  // init gyroscope
  if (BSP_GYRO_Init() != GYRO_OK)
 8000bca:	f001 fb63 	bl	8002294 <BSP_GYRO_Init>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d000      	beq.n	8000bd6 <main+0x2e>
  {
	  while (1)
 8000bd4:	e7fe      	b.n	8000bd4 <main+0x2c>
		  // something went wrong
	  }
  }

  // init accelerometer
  if (BSP_ACCELERO_Init() != ACCELERO_OK)
 8000bd6:	f001 fae1 	bl	800219c <BSP_ACCELERO_Init>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d000      	beq.n	8000be2 <main+0x3a>
  {
	  while (1)
 8000be0:	e7fe      	b.n	8000be0 <main+0x38>
  int16_t accelerometerBuffer[3];
  float gyroscopeBuffer[3];

  while (1)
  {
	  BSP_GYRO_GetXYZ(gyroscopeBuffer);
 8000be2:	1d3b      	adds	r3, r7, #4
 8000be4:	4618      	mov	r0, r3
 8000be6:	f001 fbbb 	bl	8002360 <BSP_GYRO_GetXYZ>

	  gyroscopeXPos = gyroscopeBuffer[0];
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	4a0f      	ldr	r2, [pc, #60]	; (8000c2c <main+0x84>)
 8000bee:	6013      	str	r3, [r2, #0]
	  gyroscopeYPos = gyroscopeBuffer[1];
 8000bf0:	68bb      	ldr	r3, [r7, #8]
 8000bf2:	4a0f      	ldr	r2, [pc, #60]	; (8000c30 <main+0x88>)
 8000bf4:	6013      	str	r3, [r2, #0]
	  gyroscopeZPos = gyroscopeBuffer[2];
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	4a0e      	ldr	r2, [pc, #56]	; (8000c34 <main+0x8c>)
 8000bfa:	6013      	str	r3, [r2, #0]

	  BSP_ACCELERO_GetXYZ(accelerometerBuffer);
 8000bfc:	f107 0310 	add.w	r3, r7, #16
 8000c00:	4618      	mov	r0, r3
 8000c02:	f001 fb33 	bl	800226c <BSP_ACCELERO_GetXYZ>

	  accelerometerXPos = accelerometerBuffer[0];
 8000c06:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000c0a:	b29a      	uxth	r2, r3
 8000c0c:	4b0a      	ldr	r3, [pc, #40]	; (8000c38 <main+0x90>)
 8000c0e:	801a      	strh	r2, [r3, #0]
	  accelerometerYPos = accelerometerBuffer[1];
 8000c10:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000c14:	b29a      	uxth	r2, r3
 8000c16:	4b09      	ldr	r3, [pc, #36]	; (8000c3c <main+0x94>)
 8000c18:	801a      	strh	r2, [r3, #0]
	  accelerometerZPos = accelerometerBuffer[2];
 8000c1a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000c1e:	b29a      	uxth	r2, r3
 8000c20:	4b07      	ldr	r3, [pc, #28]	; (8000c40 <main+0x98>)
 8000c22:	801a      	strh	r2, [r3, #0]

	  HAL_Delay(50);
 8000c24:	2032      	movs	r0, #50	; 0x32
 8000c26:	f001 fc15 	bl	8002454 <HAL_Delay>
	  BSP_GYRO_GetXYZ(gyroscopeBuffer);
 8000c2a:	e7da      	b.n	8000be2 <main+0x3a>
 8000c2c:	20000614 	.word	0x20000614
 8000c30:	20000618 	.word	0x20000618
 8000c34:	2000061c 	.word	0x2000061c
 8000c38:	2000060c 	.word	0x2000060c
 8000c3c:	2000060e 	.word	0x2000060e
 8000c40:	20000610 	.word	0x20000610

08000c44 <USART2_Init>:
  }
}

void USART2_Init(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b09c      	sub	sp, #112	; 0x70
 8000c48:	af00      	add	r7, sp, #0
	   __HAL_RCC_USART2_CLK_ENABLE();  // Enable USART2 clock
 8000c4a:	4b2a      	ldr	r3, [pc, #168]	; (8000cf4 <USART2_Init+0xb0>)
 8000c4c:	69db      	ldr	r3, [r3, #28]
 8000c4e:	4a29      	ldr	r2, [pc, #164]	; (8000cf4 <USART2_Init+0xb0>)
 8000c50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c54:	61d3      	str	r3, [r2, #28]
 8000c56:	4b27      	ldr	r3, [pc, #156]	; (8000cf4 <USART2_Init+0xb0>)
 8000c58:	69db      	ldr	r3, [r3, #28]
 8000c5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c5e:	60bb      	str	r3, [r7, #8]
 8000c60:	68bb      	ldr	r3, [r7, #8]
	   __HAL_RCC_GPIOA_CLK_ENABLE();   // Enable GPIOA clock for PA2 (TX) and PA3 (RX)
 8000c62:	4b24      	ldr	r3, [pc, #144]	; (8000cf4 <USART2_Init+0xb0>)
 8000c64:	695b      	ldr	r3, [r3, #20]
 8000c66:	4a23      	ldr	r2, [pc, #140]	; (8000cf4 <USART2_Init+0xb0>)
 8000c68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c6c:	6153      	str	r3, [r2, #20]
 8000c6e:	4b21      	ldr	r3, [pc, #132]	; (8000cf4 <USART2_Init+0xb0>)
 8000c70:	695b      	ldr	r3, [r3, #20]
 8000c72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c76:	607b      	str	r3, [r7, #4]
 8000c78:	687b      	ldr	r3, [r7, #4]

	   // Configure GPIO pins for USART2 TX (PA2) and RX (PA3)
	   GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c7a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000c7e:	2200      	movs	r2, #0
 8000c80:	601a      	str	r2, [r3, #0]
 8000c82:	605a      	str	r2, [r3, #4]
 8000c84:	609a      	str	r2, [r3, #8]
 8000c86:	60da      	str	r2, [r3, #12]
 8000c88:	611a      	str	r2, [r3, #16]
	   GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3;
 8000c8a:	230c      	movs	r3, #12
 8000c8c:	65fb      	str	r3, [r7, #92]	; 0x5c
	   GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;          // Set mode to alternate function push-pull
 8000c8e:	2302      	movs	r3, #2
 8000c90:	663b      	str	r3, [r7, #96]	; 0x60
	   GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c92:	2300      	movs	r3, #0
 8000c94:	667b      	str	r3, [r7, #100]	; 0x64
	   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c96:	2303      	movs	r3, #3
 8000c98:	66bb      	str	r3, [r7, #104]	; 0x68
	   GPIO_InitStruct.Alternate = GPIO_AF7_USART2;     // Set alternate function to USART2
 8000c9a:	2307      	movs	r3, #7
 8000c9c:	66fb      	str	r3, [r7, #108]	; 0x6c
	   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c9e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000ca2:	4619      	mov	r1, r3
 8000ca4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ca8:	f001 fd0a 	bl	80026c0 <HAL_GPIO_Init>

	   // Initialize USART2
	   USART_HandleTypeDef husart2 = {0};
 8000cac:	f107 030c 	add.w	r3, r7, #12
 8000cb0:	2250      	movs	r2, #80	; 0x50
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f005 f997 	bl	8005fe8 <memset>
	   husart2.Instance = USART2;
 8000cba:	4b0f      	ldr	r3, [pc, #60]	; (8000cf8 <USART2_Init+0xb4>)
 8000cbc:	60fb      	str	r3, [r7, #12]
	   husart2.Init.BaudRate = 9600;                    // Set baud rate
 8000cbe:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8000cc2:	613b      	str	r3, [r7, #16]
	   husart2.Init.WordLength = USART_WORDLENGTH_8B;   // Set word length to 8 bits
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	617b      	str	r3, [r7, #20]
	   husart2.Init.StopBits = USART_STOPBITS_1;        // Set stop bit to 1
 8000cc8:	2300      	movs	r3, #0
 8000cca:	61bb      	str	r3, [r7, #24]
	   husart2.Init.Parity = USART_PARITY_NONE;         // No parity bit
 8000ccc:	2300      	movs	r3, #0
 8000cce:	61fb      	str	r3, [r7, #28]
	   husart2.Init.Mode = USART_MODE_TX_RX;            // Enable both transmit and receive
 8000cd0:	230c      	movs	r3, #12
 8000cd2:	623b      	str	r3, [r7, #32]
	   husart2.Init.CLKPolarity = USART_POLARITY_LOW;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	627b      	str	r3, [r7, #36]	; 0x24
	   husart2.Init.CLKPhase = USART_PHASE_1EDGE;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	62bb      	str	r3, [r7, #40]	; 0x28
	   husart2.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	62fb      	str	r3, [r7, #44]	; 0x2c
	   if (HAL_USART_Init(&husart2) != HAL_OK)
 8000ce0:	f107 030c 	add.w	r3, r7, #12
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f004 ff01 	bl	8005aec <HAL_USART_Init>
	   {
	        // Initialization Error
	   }
}
 8000cea:	bf00      	nop
 8000cec:	3770      	adds	r7, #112	; 0x70
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	40021000 	.word	0x40021000
 8000cf8:	40004400 	.word	0x40004400

08000cfc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b09e      	sub	sp, #120	; 0x78
 8000d00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d02:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000d06:	2228      	movs	r2, #40	; 0x28
 8000d08:	2100      	movs	r1, #0
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f005 f96c 	bl	8005fe8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d10:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000d14:	2200      	movs	r2, #0
 8000d16:	601a      	str	r2, [r3, #0]
 8000d18:	605a      	str	r2, [r3, #4]
 8000d1a:	609a      	str	r2, [r3, #8]
 8000d1c:	60da      	str	r2, [r3, #12]
 8000d1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d20:	463b      	mov	r3, r7
 8000d22:	223c      	movs	r2, #60	; 0x3c
 8000d24:	2100      	movs	r1, #0
 8000d26:	4618      	mov	r0, r3
 8000d28:	f005 f95e 	bl	8005fe8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000d2c:	2303      	movs	r3, #3
 8000d2e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000d30:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000d34:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000d36:	2300      	movs	r3, #0
 8000d38:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d3e:	2310      	movs	r3, #16
 8000d40:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d42:	2302      	movs	r3, #2
 8000d44:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d46:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d4a:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000d4c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000d50:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d52:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000d56:	4618      	mov	r0, r3
 8000d58:	f002 fe3c 	bl	80039d4 <HAL_RCC_OscConfig>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d001      	beq.n	8000d66 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000d62:	f000 f94b 	bl	8000ffc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d66:	230f      	movs	r3, #15
 8000d68:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d6a:	2302      	movs	r3, #2
 8000d6c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d76:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000d7c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000d80:	2101      	movs	r1, #1
 8000d82:	4618      	mov	r0, r3
 8000d84:	f003 fe64 	bl	8004a50 <HAL_RCC_ClockConfig>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d001      	beq.n	8000d92 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000d8e:	f000 f935 	bl	8000ffc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_I2C1;
 8000d92:	4b0a      	ldr	r3, [pc, #40]	; (8000dbc <SystemClock_Config+0xc0>)
 8000d94:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000d96:	2300      	movs	r3, #0
 8000d98:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 8000d9a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000d9e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000da0:	463b      	mov	r3, r7
 8000da2:	4618      	mov	r0, r3
 8000da4:	f004 f88a 	bl	8004ebc <HAL_RCCEx_PeriphCLKConfig>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d001      	beq.n	8000db2 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000dae:	f000 f925 	bl	8000ffc <Error_Handler>
  }
}
 8000db2:	bf00      	nop
 8000db4:	3778      	adds	r7, #120	; 0x78
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	00020020 	.word	0x00020020

08000dc0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000dc4:	4b1b      	ldr	r3, [pc, #108]	; (8000e34 <MX_I2C1_Init+0x74>)
 8000dc6:	4a1c      	ldr	r2, [pc, #112]	; (8000e38 <MX_I2C1_Init+0x78>)
 8000dc8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000dca:	4b1a      	ldr	r3, [pc, #104]	; (8000e34 <MX_I2C1_Init+0x74>)
 8000dcc:	4a1b      	ldr	r2, [pc, #108]	; (8000e3c <MX_I2C1_Init+0x7c>)
 8000dce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000dd0:	4b18      	ldr	r3, [pc, #96]	; (8000e34 <MX_I2C1_Init+0x74>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000dd6:	4b17      	ldr	r3, [pc, #92]	; (8000e34 <MX_I2C1_Init+0x74>)
 8000dd8:	2201      	movs	r2, #1
 8000dda:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ddc:	4b15      	ldr	r3, [pc, #84]	; (8000e34 <MX_I2C1_Init+0x74>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000de2:	4b14      	ldr	r3, [pc, #80]	; (8000e34 <MX_I2C1_Init+0x74>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000de8:	4b12      	ldr	r3, [pc, #72]	; (8000e34 <MX_I2C1_Init+0x74>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000dee:	4b11      	ldr	r3, [pc, #68]	; (8000e34 <MX_I2C1_Init+0x74>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000df4:	4b0f      	ldr	r3, [pc, #60]	; (8000e34 <MX_I2C1_Init+0x74>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000dfa:	480e      	ldr	r0, [pc, #56]	; (8000e34 <MX_I2C1_Init+0x74>)
 8000dfc:	f001 fece 	bl	8002b9c <HAL_I2C_Init>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d001      	beq.n	8000e0a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000e06:	f000 f8f9 	bl	8000ffc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000e0a:	2100      	movs	r1, #0
 8000e0c:	4809      	ldr	r0, [pc, #36]	; (8000e34 <MX_I2C1_Init+0x74>)
 8000e0e:	f002 fc77 	bl	8003700 <HAL_I2CEx_ConfigAnalogFilter>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d001      	beq.n	8000e1c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000e18:	f000 f8f0 	bl	8000ffc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000e1c:	2100      	movs	r1, #0
 8000e1e:	4805      	ldr	r0, [pc, #20]	; (8000e34 <MX_I2C1_Init+0x74>)
 8000e20:	f002 fcb9 	bl	8003796 <HAL_I2CEx_ConfigDigitalFilter>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d001      	beq.n	8000e2e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000e2a:	f000 f8e7 	bl	8000ffc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e2e:	bf00      	nop
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	20000268 	.word	0x20000268
 8000e38:	40005400 	.word	0x40005400
 8000e3c:	2000090e 	.word	0x2000090e

08000e40 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000e44:	4b1b      	ldr	r3, [pc, #108]	; (8000eb4 <MX_SPI1_Init+0x74>)
 8000e46:	4a1c      	ldr	r2, [pc, #112]	; (8000eb8 <MX_SPI1_Init+0x78>)
 8000e48:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000e4a:	4b1a      	ldr	r3, [pc, #104]	; (8000eb4 <MX_SPI1_Init+0x74>)
 8000e4c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000e50:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000e52:	4b18      	ldr	r3, [pc, #96]	; (8000eb4 <MX_SPI1_Init+0x74>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000e58:	4b16      	ldr	r3, [pc, #88]	; (8000eb4 <MX_SPI1_Init+0x74>)
 8000e5a:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000e5e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e60:	4b14      	ldr	r3, [pc, #80]	; (8000eb4 <MX_SPI1_Init+0x74>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e66:	4b13      	ldr	r3, [pc, #76]	; (8000eb4 <MX_SPI1_Init+0x74>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000e6c:	4b11      	ldr	r3, [pc, #68]	; (8000eb4 <MX_SPI1_Init+0x74>)
 8000e6e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e72:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000e74:	4b0f      	ldr	r3, [pc, #60]	; (8000eb4 <MX_SPI1_Init+0x74>)
 8000e76:	2208      	movs	r2, #8
 8000e78:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e7a:	4b0e      	ldr	r3, [pc, #56]	; (8000eb4 <MX_SPI1_Init+0x74>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e80:	4b0c      	ldr	r3, [pc, #48]	; (8000eb4 <MX_SPI1_Init+0x74>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e86:	4b0b      	ldr	r3, [pc, #44]	; (8000eb4 <MX_SPI1_Init+0x74>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000e8c:	4b09      	ldr	r3, [pc, #36]	; (8000eb4 <MX_SPI1_Init+0x74>)
 8000e8e:	2207      	movs	r2, #7
 8000e90:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000e92:	4b08      	ldr	r3, [pc, #32]	; (8000eb4 <MX_SPI1_Init+0x74>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000e98:	4b06      	ldr	r3, [pc, #24]	; (8000eb4 <MX_SPI1_Init+0x74>)
 8000e9a:	2208      	movs	r2, #8
 8000e9c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000e9e:	4805      	ldr	r0, [pc, #20]	; (8000eb4 <MX_SPI1_Init+0x74>)
 8000ea0:	f004 f9bc 	bl	800521c <HAL_SPI_Init>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d001      	beq.n	8000eae <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000eaa:	f000 f8a7 	bl	8000ffc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000eae:	bf00      	nop
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	200002bc 	.word	0x200002bc
 8000eb8:	40013000 	.word	0x40013000

08000ebc <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000ec0:	4b0d      	ldr	r3, [pc, #52]	; (8000ef8 <MX_USB_PCD_Init+0x3c>)
 8000ec2:	4a0e      	ldr	r2, [pc, #56]	; (8000efc <MX_USB_PCD_Init+0x40>)
 8000ec4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000ec6:	4b0c      	ldr	r3, [pc, #48]	; (8000ef8 <MX_USB_PCD_Init+0x3c>)
 8000ec8:	2208      	movs	r2, #8
 8000eca:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000ecc:	4b0a      	ldr	r3, [pc, #40]	; (8000ef8 <MX_USB_PCD_Init+0x3c>)
 8000ece:	2202      	movs	r2, #2
 8000ed0:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000ed2:	4b09      	ldr	r3, [pc, #36]	; (8000ef8 <MX_USB_PCD_Init+0x3c>)
 8000ed4:	2202      	movs	r2, #2
 8000ed6:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000ed8:	4b07      	ldr	r3, [pc, #28]	; (8000ef8 <MX_USB_PCD_Init+0x3c>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000ede:	4b06      	ldr	r3, [pc, #24]	; (8000ef8 <MX_USB_PCD_Init+0x3c>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000ee4:	4804      	ldr	r0, [pc, #16]	; (8000ef8 <MX_USB_PCD_Init+0x3c>)
 8000ee6:	f002 fca2 	bl	800382e <HAL_PCD_Init>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d001      	beq.n	8000ef4 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 8000ef0:	f000 f884 	bl	8000ffc <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000ef4:	bf00      	nop
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	20000320 	.word	0x20000320
 8000efc:	40005c00 	.word	0x40005c00

08000f00 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b08a      	sub	sp, #40	; 0x28
 8000f04:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f06:	f107 0314 	add.w	r3, r7, #20
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	601a      	str	r2, [r3, #0]
 8000f0e:	605a      	str	r2, [r3, #4]
 8000f10:	609a      	str	r2, [r3, #8]
 8000f12:	60da      	str	r2, [r3, #12]
 8000f14:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f16:	4b37      	ldr	r3, [pc, #220]	; (8000ff4 <MX_GPIO_Init+0xf4>)
 8000f18:	695b      	ldr	r3, [r3, #20]
 8000f1a:	4a36      	ldr	r2, [pc, #216]	; (8000ff4 <MX_GPIO_Init+0xf4>)
 8000f1c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f20:	6153      	str	r3, [r2, #20]
 8000f22:	4b34      	ldr	r3, [pc, #208]	; (8000ff4 <MX_GPIO_Init+0xf4>)
 8000f24:	695b      	ldr	r3, [r3, #20]
 8000f26:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f2a:	613b      	str	r3, [r7, #16]
 8000f2c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f2e:	4b31      	ldr	r3, [pc, #196]	; (8000ff4 <MX_GPIO_Init+0xf4>)
 8000f30:	695b      	ldr	r3, [r3, #20]
 8000f32:	4a30      	ldr	r2, [pc, #192]	; (8000ff4 <MX_GPIO_Init+0xf4>)
 8000f34:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000f38:	6153      	str	r3, [r2, #20]
 8000f3a:	4b2e      	ldr	r3, [pc, #184]	; (8000ff4 <MX_GPIO_Init+0xf4>)
 8000f3c:	695b      	ldr	r3, [r3, #20]
 8000f3e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000f42:	60fb      	str	r3, [r7, #12]
 8000f44:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f46:	4b2b      	ldr	r3, [pc, #172]	; (8000ff4 <MX_GPIO_Init+0xf4>)
 8000f48:	695b      	ldr	r3, [r3, #20]
 8000f4a:	4a2a      	ldr	r2, [pc, #168]	; (8000ff4 <MX_GPIO_Init+0xf4>)
 8000f4c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000f50:	6153      	str	r3, [r2, #20]
 8000f52:	4b28      	ldr	r3, [pc, #160]	; (8000ff4 <MX_GPIO_Init+0xf4>)
 8000f54:	695b      	ldr	r3, [r3, #20]
 8000f56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f5a:	60bb      	str	r3, [r7, #8]
 8000f5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f5e:	4b25      	ldr	r3, [pc, #148]	; (8000ff4 <MX_GPIO_Init+0xf4>)
 8000f60:	695b      	ldr	r3, [r3, #20]
 8000f62:	4a24      	ldr	r2, [pc, #144]	; (8000ff4 <MX_GPIO_Init+0xf4>)
 8000f64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f68:	6153      	str	r3, [r2, #20]
 8000f6a:	4b22      	ldr	r3, [pc, #136]	; (8000ff4 <MX_GPIO_Init+0xf4>)
 8000f6c:	695b      	ldr	r3, [r3, #20]
 8000f6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f72:	607b      	str	r3, [r7, #4]
 8000f74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f76:	4b1f      	ldr	r3, [pc, #124]	; (8000ff4 <MX_GPIO_Init+0xf4>)
 8000f78:	695b      	ldr	r3, [r3, #20]
 8000f7a:	4a1e      	ldr	r2, [pc, #120]	; (8000ff4 <MX_GPIO_Init+0xf4>)
 8000f7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f80:	6153      	str	r3, [r2, #20]
 8000f82:	4b1c      	ldr	r3, [pc, #112]	; (8000ff4 <MX_GPIO_Init+0xf4>)
 8000f84:	695b      	ldr	r3, [r3, #20]
 8000f86:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f8a:	603b      	str	r3, [r7, #0]
 8000f8c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000f8e:	2200      	movs	r2, #0
 8000f90:	f64f 7108 	movw	r1, #65288	; 0xff08
 8000f94:	4818      	ldr	r0, [pc, #96]	; (8000ff8 <MX_GPIO_Init+0xf8>)
 8000f96:	f001 fde9 	bl	8002b6c <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 8000f9a:	2337      	movs	r3, #55	; 0x37
 8000f9c:	617b      	str	r3, [r7, #20]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000f9e:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000fa2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000fa8:	f107 0314 	add.w	r3, r7, #20
 8000fac:	4619      	mov	r1, r3
 8000fae:	4812      	ldr	r0, [pc, #72]	; (8000ff8 <MX_GPIO_Init+0xf8>)
 8000fb0:	f001 fb86 	bl	80026c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000fb4:	f64f 7308 	movw	r3, #65288	; 0xff08
 8000fb8:	617b      	str	r3, [r7, #20]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fba:	2301      	movs	r3, #1
 8000fbc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000fc6:	f107 0314 	add.w	r3, r7, #20
 8000fca:	4619      	mov	r1, r3
 8000fcc:	480a      	ldr	r0, [pc, #40]	; (8000ff8 <MX_GPIO_Init+0xf8>)
 8000fce:	f001 fb77 	bl	80026c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000fde:	f107 0314 	add.w	r3, r7, #20
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fe8:	f001 fb6a 	bl	80026c0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000fec:	bf00      	nop
 8000fee:	3728      	adds	r7, #40	; 0x28
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	40021000 	.word	0x40021000
 8000ff8:	48001000 	.word	0x48001000

08000ffc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001000:	b672      	cpsid	i
}
 8001002:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001004:	e7fe      	b.n	8001004 <Error_Handler+0x8>
	...

08001008 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800100e:	4b0f      	ldr	r3, [pc, #60]	; (800104c <HAL_MspInit+0x44>)
 8001010:	699b      	ldr	r3, [r3, #24]
 8001012:	4a0e      	ldr	r2, [pc, #56]	; (800104c <HAL_MspInit+0x44>)
 8001014:	f043 0301 	orr.w	r3, r3, #1
 8001018:	6193      	str	r3, [r2, #24]
 800101a:	4b0c      	ldr	r3, [pc, #48]	; (800104c <HAL_MspInit+0x44>)
 800101c:	699b      	ldr	r3, [r3, #24]
 800101e:	f003 0301 	and.w	r3, r3, #1
 8001022:	607b      	str	r3, [r7, #4]
 8001024:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001026:	4b09      	ldr	r3, [pc, #36]	; (800104c <HAL_MspInit+0x44>)
 8001028:	69db      	ldr	r3, [r3, #28]
 800102a:	4a08      	ldr	r2, [pc, #32]	; (800104c <HAL_MspInit+0x44>)
 800102c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001030:	61d3      	str	r3, [r2, #28]
 8001032:	4b06      	ldr	r3, [pc, #24]	; (800104c <HAL_MspInit+0x44>)
 8001034:	69db      	ldr	r3, [r3, #28]
 8001036:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800103a:	603b      	str	r3, [r7, #0]
 800103c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800103e:	2007      	movs	r0, #7
 8001040:	f001 fafc 	bl	800263c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001044:	bf00      	nop
 8001046:	3708      	adds	r7, #8
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	40021000 	.word	0x40021000

08001050 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b08a      	sub	sp, #40	; 0x28
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001058:	f107 0314 	add.w	r3, r7, #20
 800105c:	2200      	movs	r2, #0
 800105e:	601a      	str	r2, [r3, #0]
 8001060:	605a      	str	r2, [r3, #4]
 8001062:	609a      	str	r2, [r3, #8]
 8001064:	60da      	str	r2, [r3, #12]
 8001066:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4a17      	ldr	r2, [pc, #92]	; (80010cc <HAL_I2C_MspInit+0x7c>)
 800106e:	4293      	cmp	r3, r2
 8001070:	d127      	bne.n	80010c2 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001072:	4b17      	ldr	r3, [pc, #92]	; (80010d0 <HAL_I2C_MspInit+0x80>)
 8001074:	695b      	ldr	r3, [r3, #20]
 8001076:	4a16      	ldr	r2, [pc, #88]	; (80010d0 <HAL_I2C_MspInit+0x80>)
 8001078:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800107c:	6153      	str	r3, [r2, #20]
 800107e:	4b14      	ldr	r3, [pc, #80]	; (80010d0 <HAL_I2C_MspInit+0x80>)
 8001080:	695b      	ldr	r3, [r3, #20]
 8001082:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001086:	613b      	str	r3, [r7, #16]
 8001088:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 800108a:	23c0      	movs	r3, #192	; 0xc0
 800108c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800108e:	2312      	movs	r3, #18
 8001090:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001092:	2301      	movs	r3, #1
 8001094:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001096:	2303      	movs	r3, #3
 8001098:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800109a:	2304      	movs	r3, #4
 800109c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800109e:	f107 0314 	add.w	r3, r7, #20
 80010a2:	4619      	mov	r1, r3
 80010a4:	480b      	ldr	r0, [pc, #44]	; (80010d4 <HAL_I2C_MspInit+0x84>)
 80010a6:	f001 fb0b 	bl	80026c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80010aa:	4b09      	ldr	r3, [pc, #36]	; (80010d0 <HAL_I2C_MspInit+0x80>)
 80010ac:	69db      	ldr	r3, [r3, #28]
 80010ae:	4a08      	ldr	r2, [pc, #32]	; (80010d0 <HAL_I2C_MspInit+0x80>)
 80010b0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80010b4:	61d3      	str	r3, [r2, #28]
 80010b6:	4b06      	ldr	r3, [pc, #24]	; (80010d0 <HAL_I2C_MspInit+0x80>)
 80010b8:	69db      	ldr	r3, [r3, #28]
 80010ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010be:	60fb      	str	r3, [r7, #12]
 80010c0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80010c2:	bf00      	nop
 80010c4:	3728      	adds	r7, #40	; 0x28
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	40005400 	.word	0x40005400
 80010d0:	40021000 	.word	0x40021000
 80010d4:	48000400 	.word	0x48000400

080010d8 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4a0a      	ldr	r2, [pc, #40]	; (8001110 <HAL_I2C_MspDeInit+0x38>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d10d      	bne.n	8001106 <HAL_I2C_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80010ea:	4b0a      	ldr	r3, [pc, #40]	; (8001114 <HAL_I2C_MspDeInit+0x3c>)
 80010ec:	69db      	ldr	r3, [r3, #28]
 80010ee:	4a09      	ldr	r2, [pc, #36]	; (8001114 <HAL_I2C_MspDeInit+0x3c>)
 80010f0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80010f4:	61d3      	str	r3, [r2, #28]

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(I2C1_SCL_GPIO_Port, I2C1_SCL_Pin);
 80010f6:	2140      	movs	r1, #64	; 0x40
 80010f8:	4807      	ldr	r0, [pc, #28]	; (8001118 <HAL_I2C_MspDeInit+0x40>)
 80010fa:	f001 fc5b 	bl	80029b4 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(I2C1_SDA_GPIO_Port, I2C1_SDA_Pin);
 80010fe:	2180      	movs	r1, #128	; 0x80
 8001100:	4805      	ldr	r0, [pc, #20]	; (8001118 <HAL_I2C_MspDeInit+0x40>)
 8001102:	f001 fc57 	bl	80029b4 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 8001106:	bf00      	nop
 8001108:	3708      	adds	r7, #8
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	40005400 	.word	0x40005400
 8001114:	40021000 	.word	0x40021000
 8001118:	48000400 	.word	0x48000400

0800111c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b08a      	sub	sp, #40	; 0x28
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001124:	f107 0314 	add.w	r3, r7, #20
 8001128:	2200      	movs	r2, #0
 800112a:	601a      	str	r2, [r3, #0]
 800112c:	605a      	str	r2, [r3, #4]
 800112e:	609a      	str	r2, [r3, #8]
 8001130:	60da      	str	r2, [r3, #12]
 8001132:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4a17      	ldr	r2, [pc, #92]	; (8001198 <HAL_SPI_MspInit+0x7c>)
 800113a:	4293      	cmp	r3, r2
 800113c:	d128      	bne.n	8001190 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800113e:	4b17      	ldr	r3, [pc, #92]	; (800119c <HAL_SPI_MspInit+0x80>)
 8001140:	699b      	ldr	r3, [r3, #24]
 8001142:	4a16      	ldr	r2, [pc, #88]	; (800119c <HAL_SPI_MspInit+0x80>)
 8001144:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001148:	6193      	str	r3, [r2, #24]
 800114a:	4b14      	ldr	r3, [pc, #80]	; (800119c <HAL_SPI_MspInit+0x80>)
 800114c:	699b      	ldr	r3, [r3, #24]
 800114e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001152:	613b      	str	r3, [r7, #16]
 8001154:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001156:	4b11      	ldr	r3, [pc, #68]	; (800119c <HAL_SPI_MspInit+0x80>)
 8001158:	695b      	ldr	r3, [r3, #20]
 800115a:	4a10      	ldr	r2, [pc, #64]	; (800119c <HAL_SPI_MspInit+0x80>)
 800115c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001160:	6153      	str	r3, [r2, #20]
 8001162:	4b0e      	ldr	r3, [pc, #56]	; (800119c <HAL_SPI_MspInit+0x80>)
 8001164:	695b      	ldr	r3, [r3, #20]
 8001166:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800116a:	60fb      	str	r3, [r7, #12]
 800116c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 800116e:	23e0      	movs	r3, #224	; 0xe0
 8001170:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001172:	2302      	movs	r3, #2
 8001174:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001176:	2300      	movs	r3, #0
 8001178:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800117a:	2303      	movs	r3, #3
 800117c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800117e:	2305      	movs	r3, #5
 8001180:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001182:	f107 0314 	add.w	r3, r7, #20
 8001186:	4619      	mov	r1, r3
 8001188:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800118c:	f001 fa98 	bl	80026c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001190:	bf00      	nop
 8001192:	3728      	adds	r7, #40	; 0x28
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}
 8001198:	40013000 	.word	0x40013000
 800119c:	40021000 	.word	0x40021000

080011a0 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI1)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4a08      	ldr	r2, [pc, #32]	; (80011d0 <HAL_SPI_MspDeInit+0x30>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d10a      	bne.n	80011c8 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI1_MspDeInit 0 */

  /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 80011b2:	4b08      	ldr	r3, [pc, #32]	; (80011d4 <HAL_SPI_MspDeInit+0x34>)
 80011b4:	699b      	ldr	r3, [r3, #24]
 80011b6:	4a07      	ldr	r2, [pc, #28]	; (80011d4 <HAL_SPI_MspDeInit+0x34>)
 80011b8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80011bc:	6193      	str	r3, [r2, #24]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    HAL_GPIO_DeInit(GPIOA, SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin);
 80011be:	21e0      	movs	r1, #224	; 0xe0
 80011c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011c4:	f001 fbf6 	bl	80029b4 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI1_MspDeInit 1 */

  /* USER CODE END SPI1_MspDeInit 1 */
  }

}
 80011c8:	bf00      	nop
 80011ca:	3708      	adds	r7, #8
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	40013000 	.word	0x40013000
 80011d4:	40021000 	.word	0x40021000

080011d8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b08a      	sub	sp, #40	; 0x28
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011e0:	f107 0314 	add.w	r3, r7, #20
 80011e4:	2200      	movs	r2, #0
 80011e6:	601a      	str	r2, [r3, #0]
 80011e8:	605a      	str	r2, [r3, #4]
 80011ea:	609a      	str	r2, [r3, #8]
 80011ec:	60da      	str	r2, [r3, #12]
 80011ee:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4a18      	ldr	r2, [pc, #96]	; (8001258 <HAL_PCD_MspInit+0x80>)
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d129      	bne.n	800124e <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011fa:	4b18      	ldr	r3, [pc, #96]	; (800125c <HAL_PCD_MspInit+0x84>)
 80011fc:	695b      	ldr	r3, [r3, #20]
 80011fe:	4a17      	ldr	r2, [pc, #92]	; (800125c <HAL_PCD_MspInit+0x84>)
 8001200:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001204:	6153      	str	r3, [r2, #20]
 8001206:	4b15      	ldr	r3, [pc, #84]	; (800125c <HAL_PCD_MspInit+0x84>)
 8001208:	695b      	ldr	r3, [r3, #20]
 800120a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800120e:	613b      	str	r3, [r7, #16]
 8001210:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 8001212:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001216:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001218:	2302      	movs	r3, #2
 800121a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121c:	2300      	movs	r3, #0
 800121e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001220:	2303      	movs	r3, #3
 8001222:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8001224:	230e      	movs	r3, #14
 8001226:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001228:	f107 0314 	add.w	r3, r7, #20
 800122c:	4619      	mov	r1, r3
 800122e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001232:	f001 fa45 	bl	80026c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8001236:	4b09      	ldr	r3, [pc, #36]	; (800125c <HAL_PCD_MspInit+0x84>)
 8001238:	69db      	ldr	r3, [r3, #28]
 800123a:	4a08      	ldr	r2, [pc, #32]	; (800125c <HAL_PCD_MspInit+0x84>)
 800123c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001240:	61d3      	str	r3, [r2, #28]
 8001242:	4b06      	ldr	r3, [pc, #24]	; (800125c <HAL_PCD_MspInit+0x84>)
 8001244:	69db      	ldr	r3, [r3, #28]
 8001246:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800124a:	60fb      	str	r3, [r7, #12]
 800124c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 800124e:	bf00      	nop
 8001250:	3728      	adds	r7, #40	; 0x28
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	40005c00 	.word	0x40005c00
 800125c:	40021000 	.word	0x40021000

08001260 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001264:	e7fe      	b.n	8001264 <NMI_Handler+0x4>

08001266 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001266:	b480      	push	{r7}
 8001268:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800126a:	e7fe      	b.n	800126a <HardFault_Handler+0x4>

0800126c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001270:	e7fe      	b.n	8001270 <MemManage_Handler+0x4>

08001272 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001272:	b480      	push	{r7}
 8001274:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001276:	e7fe      	b.n	8001276 <BusFault_Handler+0x4>

08001278 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800127c:	e7fe      	b.n	800127c <UsageFault_Handler+0x4>

0800127e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800127e:	b480      	push	{r7}
 8001280:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001282:	bf00      	nop
 8001284:	46bd      	mov	sp, r7
 8001286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128a:	4770      	bx	lr

0800128c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001290:	bf00      	nop
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr

0800129a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800129a:	b480      	push	{r7}
 800129c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800129e:	bf00      	nop
 80012a0:	46bd      	mov	sp, r7
 80012a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a6:	4770      	bx	lr

080012a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012ac:	f001 f8b2 	bl	8002414 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012b0:	bf00      	nop
 80012b2:	bd80      	pop	{r7, pc}

080012b4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0
  return 1;
 80012b8:	2301      	movs	r3, #1
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	46bd      	mov	sp, r7
 80012be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c2:	4770      	bx	lr

080012c4 <_kill>:

int _kill(int pid, int sig)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
 80012cc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80012ce:	f004 fe61 	bl	8005f94 <__errno>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2216      	movs	r2, #22
 80012d6:	601a      	str	r2, [r3, #0]
  return -1;
 80012d8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012dc:	4618      	mov	r0, r3
 80012de:	3708      	adds	r7, #8
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}

080012e4 <_exit>:

void _exit (int status)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80012ec:	f04f 31ff 	mov.w	r1, #4294967295
 80012f0:	6878      	ldr	r0, [r7, #4]
 80012f2:	f7ff ffe7 	bl	80012c4 <_kill>
  while (1) {}    /* Make sure we hang here */
 80012f6:	e7fe      	b.n	80012f6 <_exit+0x12>

080012f8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b086      	sub	sp, #24
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	60f8      	str	r0, [r7, #12]
 8001300:	60b9      	str	r1, [r7, #8]
 8001302:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001304:	2300      	movs	r3, #0
 8001306:	617b      	str	r3, [r7, #20]
 8001308:	e00a      	b.n	8001320 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800130a:	f3af 8000 	nop.w
 800130e:	4601      	mov	r1, r0
 8001310:	68bb      	ldr	r3, [r7, #8]
 8001312:	1c5a      	adds	r2, r3, #1
 8001314:	60ba      	str	r2, [r7, #8]
 8001316:	b2ca      	uxtb	r2, r1
 8001318:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800131a:	697b      	ldr	r3, [r7, #20]
 800131c:	3301      	adds	r3, #1
 800131e:	617b      	str	r3, [r7, #20]
 8001320:	697a      	ldr	r2, [r7, #20]
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	429a      	cmp	r2, r3
 8001326:	dbf0      	blt.n	800130a <_read+0x12>
  }

  return len;
 8001328:	687b      	ldr	r3, [r7, #4]
}
 800132a:	4618      	mov	r0, r3
 800132c:	3718      	adds	r7, #24
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}

08001332 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001332:	b580      	push	{r7, lr}
 8001334:	b086      	sub	sp, #24
 8001336:	af00      	add	r7, sp, #0
 8001338:	60f8      	str	r0, [r7, #12]
 800133a:	60b9      	str	r1, [r7, #8]
 800133c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800133e:	2300      	movs	r3, #0
 8001340:	617b      	str	r3, [r7, #20]
 8001342:	e009      	b.n	8001358 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001344:	68bb      	ldr	r3, [r7, #8]
 8001346:	1c5a      	adds	r2, r3, #1
 8001348:	60ba      	str	r2, [r7, #8]
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	4618      	mov	r0, r3
 800134e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001352:	697b      	ldr	r3, [r7, #20]
 8001354:	3301      	adds	r3, #1
 8001356:	617b      	str	r3, [r7, #20]
 8001358:	697a      	ldr	r2, [r7, #20]
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	429a      	cmp	r2, r3
 800135e:	dbf1      	blt.n	8001344 <_write+0x12>
  }
  return len;
 8001360:	687b      	ldr	r3, [r7, #4]
}
 8001362:	4618      	mov	r0, r3
 8001364:	3718      	adds	r7, #24
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}

0800136a <_close>:

int _close(int file)
{
 800136a:	b480      	push	{r7}
 800136c:	b083      	sub	sp, #12
 800136e:	af00      	add	r7, sp, #0
 8001370:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001372:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001376:	4618      	mov	r0, r3
 8001378:	370c      	adds	r7, #12
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr

08001382 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001382:	b480      	push	{r7}
 8001384:	b083      	sub	sp, #12
 8001386:	af00      	add	r7, sp, #0
 8001388:	6078      	str	r0, [r7, #4]
 800138a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001392:	605a      	str	r2, [r3, #4]
  return 0;
 8001394:	2300      	movs	r3, #0
}
 8001396:	4618      	mov	r0, r3
 8001398:	370c      	adds	r7, #12
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr

080013a2 <_isatty>:

int _isatty(int file)
{
 80013a2:	b480      	push	{r7}
 80013a4:	b083      	sub	sp, #12
 80013a6:	af00      	add	r7, sp, #0
 80013a8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80013aa:	2301      	movs	r3, #1
}
 80013ac:	4618      	mov	r0, r3
 80013ae:	370c      	adds	r7, #12
 80013b0:	46bd      	mov	sp, r7
 80013b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b6:	4770      	bx	lr

080013b8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b085      	sub	sp, #20
 80013bc:	af00      	add	r7, sp, #0
 80013be:	60f8      	str	r0, [r7, #12]
 80013c0:	60b9      	str	r1, [r7, #8]
 80013c2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80013c4:	2300      	movs	r3, #0
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	3714      	adds	r7, #20
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr
	...

080013d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b086      	sub	sp, #24
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013dc:	4a14      	ldr	r2, [pc, #80]	; (8001430 <_sbrk+0x5c>)
 80013de:	4b15      	ldr	r3, [pc, #84]	; (8001434 <_sbrk+0x60>)
 80013e0:	1ad3      	subs	r3, r2, r3
 80013e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013e4:	697b      	ldr	r3, [r7, #20]
 80013e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013e8:	4b13      	ldr	r3, [pc, #76]	; (8001438 <_sbrk+0x64>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d102      	bne.n	80013f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013f0:	4b11      	ldr	r3, [pc, #68]	; (8001438 <_sbrk+0x64>)
 80013f2:	4a12      	ldr	r2, [pc, #72]	; (800143c <_sbrk+0x68>)
 80013f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013f6:	4b10      	ldr	r3, [pc, #64]	; (8001438 <_sbrk+0x64>)
 80013f8:	681a      	ldr	r2, [r3, #0]
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	4413      	add	r3, r2
 80013fe:	693a      	ldr	r2, [r7, #16]
 8001400:	429a      	cmp	r2, r3
 8001402:	d207      	bcs.n	8001414 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001404:	f004 fdc6 	bl	8005f94 <__errno>
 8001408:	4603      	mov	r3, r0
 800140a:	220c      	movs	r2, #12
 800140c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800140e:	f04f 33ff 	mov.w	r3, #4294967295
 8001412:	e009      	b.n	8001428 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001414:	4b08      	ldr	r3, [pc, #32]	; (8001438 <_sbrk+0x64>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800141a:	4b07      	ldr	r3, [pc, #28]	; (8001438 <_sbrk+0x64>)
 800141c:	681a      	ldr	r2, [r3, #0]
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	4413      	add	r3, r2
 8001422:	4a05      	ldr	r2, [pc, #20]	; (8001438 <_sbrk+0x64>)
 8001424:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001426:	68fb      	ldr	r3, [r7, #12]
}
 8001428:	4618      	mov	r0, r3
 800142a:	3718      	adds	r7, #24
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}
 8001430:	2000a000 	.word	0x2000a000
 8001434:	00000400 	.word	0x00000400
 8001438:	20000620 	.word	0x20000620
 800143c:	200006f8 	.word	0x200006f8

08001440 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001444:	4b06      	ldr	r3, [pc, #24]	; (8001460 <SystemInit+0x20>)
 8001446:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800144a:	4a05      	ldr	r2, [pc, #20]	; (8001460 <SystemInit+0x20>)
 800144c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001450:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001454:	bf00      	nop
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr
 800145e:	bf00      	nop
 8001460:	e000ed00 	.word	0xe000ed00

08001464 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001464:	f8df d034 	ldr.w	sp, [pc, #52]	; 800149c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001468:	f7ff ffea 	bl	8001440 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800146c:	480c      	ldr	r0, [pc, #48]	; (80014a0 <LoopForever+0x6>)
  ldr r1, =_edata
 800146e:	490d      	ldr	r1, [pc, #52]	; (80014a4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001470:	4a0d      	ldr	r2, [pc, #52]	; (80014a8 <LoopForever+0xe>)
  movs r3, #0
 8001472:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001474:	e002      	b.n	800147c <LoopCopyDataInit>

08001476 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001476:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001478:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800147a:	3304      	adds	r3, #4

0800147c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800147c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800147e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001480:	d3f9      	bcc.n	8001476 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001482:	4a0a      	ldr	r2, [pc, #40]	; (80014ac <LoopForever+0x12>)
  ldr r4, =_ebss
 8001484:	4c0a      	ldr	r4, [pc, #40]	; (80014b0 <LoopForever+0x16>)
  movs r3, #0
 8001486:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001488:	e001      	b.n	800148e <LoopFillZerobss>

0800148a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800148a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800148c:	3204      	adds	r2, #4

0800148e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800148e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001490:	d3fb      	bcc.n	800148a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001492:	f004 fd85 	bl	8005fa0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001496:	f7ff fb87 	bl	8000ba8 <main>

0800149a <LoopForever>:

LoopForever:
    b LoopForever
 800149a:	e7fe      	b.n	800149a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800149c:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80014a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014a4:	2000024c 	.word	0x2000024c
  ldr r2, =_sidata
 80014a8:	08008e5c 	.word	0x08008e5c
  ldr r2, =_sbss
 80014ac:	2000024c 	.word	0x2000024c
  ldr r4, =_ebss
 80014b0:	200006f8 	.word	0x200006f8

080014b4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80014b4:	e7fe      	b.n	80014b4 <ADC1_2_IRQHandler>

080014b6 <L3GD20_Init>:
  * @param  L3GD20_InitStruct: pointer to a L3GD20_InitTypeDef structure 
  *         that contains the configuration setting for the L3GD20.
  * @retval None
  */
void L3GD20_Init(uint16_t InitStruct)
{  
 80014b6:	b580      	push	{r7, lr}
 80014b8:	b084      	sub	sp, #16
 80014ba:	af00      	add	r7, sp, #0
 80014bc:	4603      	mov	r3, r0
 80014be:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80014c0:	2300      	movs	r3, #0
 80014c2:	73fb      	strb	r3, [r7, #15]
  
  /* Configure the low level interface */
  GYRO_IO_Init();
 80014c4:	f000 fd1a 	bl	8001efc <GYRO_IO_Init>
  
  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 80014c8:	88fb      	ldrh	r3, [r7, #6]
 80014ca:	b2db      	uxtb	r3, r3
 80014cc:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
 80014ce:	f107 030f 	add.w	r3, r7, #15
 80014d2:	2201      	movs	r2, #1
 80014d4:	2120      	movs	r1, #32
 80014d6:	4618      	mov	r0, r3
 80014d8:	f000 fd56 	bl	8001f88 <GYRO_IO_Write>
  
  /* Write value to MEMS CTRL_REG4 register */  
  ctrl = (uint8_t) (InitStruct >> 8);
 80014dc:	88fb      	ldrh	r3, [r7, #6]
 80014de:	0a1b      	lsrs	r3, r3, #8
 80014e0:	b29b      	uxth	r3, r3
 80014e2:	b2db      	uxtb	r3, r3
 80014e4:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG4_ADDR, 1);
 80014e6:	f107 030f 	add.w	r3, r7, #15
 80014ea:	2201      	movs	r2, #1
 80014ec:	2123      	movs	r1, #35	; 0x23
 80014ee:	4618      	mov	r0, r3
 80014f0:	f000 fd4a 	bl	8001f88 <GYRO_IO_Write>
}
 80014f4:	bf00      	nop
 80014f6:	3710      	adds	r7, #16
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}

080014fc <L3GD20_DeInit>:
  * @brief L3GD20 De-initialization
  * @param  None
  * @retval None
  */
void L3GD20_DeInit(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0
}
 8001500:	bf00      	nop
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr

0800150a <L3GD20_ReadID>:
  * @brief  Read ID address of L3GD20
  * @param  None
  * @retval ID name
  */
uint8_t L3GD20_ReadID(void)
{
 800150a:	b580      	push	{r7, lr}
 800150c:	b082      	sub	sp, #8
 800150e:	af00      	add	r7, sp, #0
  uint8_t tmp;
  
  /* Configure the low level interface */
  GYRO_IO_Init();
 8001510:	f000 fcf4 	bl	8001efc <GYRO_IO_Init>
  
  /* Read WHO I AM register */
  GYRO_IO_Read(&tmp, L3GD20_WHO_AM_I_ADDR, 1);
 8001514:	1dfb      	adds	r3, r7, #7
 8001516:	2201      	movs	r2, #1
 8001518:	210f      	movs	r1, #15
 800151a:	4618      	mov	r0, r3
 800151c:	f000 fd66 	bl	8001fec <GYRO_IO_Read>
  
  /* Return the ID */
  return (uint8_t)tmp;
 8001520:	79fb      	ldrb	r3, [r7, #7]
}
 8001522:	4618      	mov	r0, r3
 8001524:	3708      	adds	r7, #8
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}

0800152a <L3GD20_RebootCmd>:
  * @brief  Reboot memory content of L3GD20
  * @param  None
  * @retval None
  */
void L3GD20_RebootCmd(void)
{
 800152a:	b580      	push	{r7, lr}
 800152c:	b082      	sub	sp, #8
 800152e:	af00      	add	r7, sp, #0
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8001530:	1dfb      	adds	r3, r7, #7
 8001532:	2201      	movs	r2, #1
 8001534:	2124      	movs	r1, #36	; 0x24
 8001536:	4618      	mov	r0, r3
 8001538:	f000 fd58 	bl	8001fec <GYRO_IO_Read>
  
  /* Enable or Disable the reboot memory */
  tmpreg |= L3GD20_BOOT_REBOOTMEMORY;
 800153c:	79fb      	ldrb	r3, [r7, #7]
 800153e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001542:	b2db      	uxtb	r3, r3
 8001544:	71fb      	strb	r3, [r7, #7]
  
  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8001546:	1dfb      	adds	r3, r7, #7
 8001548:	2201      	movs	r2, #1
 800154a:	2124      	movs	r1, #36	; 0x24
 800154c:	4618      	mov	r0, r3
 800154e:	f000 fd1b 	bl	8001f88 <GYRO_IO_Write>
}
 8001552:	bf00      	nop
 8001554:	3708      	adds	r7, #8
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}

0800155a <L3GD20_LowPower>:
  * @brief Set L3GD20 in low-power mode
  * @param 
  * @retval  None
  */
void L3GD20_LowPower(uint16_t InitStruct)
{  
 800155a:	b580      	push	{r7, lr}
 800155c:	b084      	sub	sp, #16
 800155e:	af00      	add	r7, sp, #0
 8001560:	4603      	mov	r3, r0
 8001562:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8001564:	2300      	movs	r3, #0
 8001566:	73fb      	strb	r3, [r7, #15]

  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 8001568:	88fb      	ldrh	r3, [r7, #6]
 800156a:	b2db      	uxtb	r3, r3
 800156c:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
 800156e:	f107 030f 	add.w	r3, r7, #15
 8001572:	2201      	movs	r2, #1
 8001574:	2120      	movs	r1, #32
 8001576:	4618      	mov	r0, r3
 8001578:	f000 fd06 	bl	8001f88 <GYRO_IO_Write>
}
 800157c:	bf00      	nop
 800157e:	3710      	adds	r7, #16
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}

08001584 <L3GD20_INT1InterruptConfig>:
  * @brief  Set L3GD20 Interrupt INT1 configuration
  * @param  Int1Config: the configuration setting for the L3GD20 Interrupt.
  * @retval None
  */
void L3GD20_INT1InterruptConfig(uint16_t Int1Config)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b084      	sub	sp, #16
 8001588:	af00      	add	r7, sp, #0
 800158a:	4603      	mov	r3, r0
 800158c:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl_cfr = 0x00, ctrl3 = 0x00;
 800158e:	2300      	movs	r3, #0
 8001590:	73fb      	strb	r3, [r7, #15]
 8001592:	2300      	movs	r3, #0
 8001594:	73bb      	strb	r3, [r7, #14]
  
  /* Read INT1_CFG register */
  GYRO_IO_Read(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 8001596:	f107 030f 	add.w	r3, r7, #15
 800159a:	2201      	movs	r2, #1
 800159c:	2130      	movs	r1, #48	; 0x30
 800159e:	4618      	mov	r0, r3
 80015a0:	f000 fd24 	bl	8001fec <GYRO_IO_Read>
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 80015a4:	f107 030e 	add.w	r3, r7, #14
 80015a8:	2201      	movs	r2, #1
 80015aa:	2122      	movs	r1, #34	; 0x22
 80015ac:	4618      	mov	r0, r3
 80015ae:	f000 fd1d 	bl	8001fec <GYRO_IO_Read>
  
  ctrl_cfr &= 0x80;
 80015b2:	7bfb      	ldrb	r3, [r7, #15]
 80015b4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80015b8:	b2db      	uxtb	r3, r3
 80015ba:	73fb      	strb	r3, [r7, #15]
  ctrl_cfr |= ((uint8_t) Int1Config >> 8);
 80015bc:	88fb      	ldrh	r3, [r7, #6]
 80015be:	b2db      	uxtb	r3, r3
 80015c0:	121b      	asrs	r3, r3, #8
 80015c2:	b25a      	sxtb	r2, r3
 80015c4:	7bfb      	ldrb	r3, [r7, #15]
 80015c6:	b25b      	sxtb	r3, r3
 80015c8:	4313      	orrs	r3, r2
 80015ca:	b25b      	sxtb	r3, r3
 80015cc:	b2db      	uxtb	r3, r3
 80015ce:	73fb      	strb	r3, [r7, #15]
  
  ctrl3 &= 0xDF;
 80015d0:	7bbb      	ldrb	r3, [r7, #14]
 80015d2:	f023 0320 	bic.w	r3, r3, #32
 80015d6:	b2db      	uxtb	r3, r3
 80015d8:	73bb      	strb	r3, [r7, #14]
  ctrl3 |= ((uint8_t) Int1Config);   
 80015da:	88fb      	ldrh	r3, [r7, #6]
 80015dc:	b2da      	uxtb	r2, r3
 80015de:	7bbb      	ldrb	r3, [r7, #14]
 80015e0:	4313      	orrs	r3, r2
 80015e2:	b2db      	uxtb	r3, r3
 80015e4:	73bb      	strb	r3, [r7, #14]
  
  /* Write value to MEMS INT1_CFG register */
  GYRO_IO_Write(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 80015e6:	f107 030f 	add.w	r3, r7, #15
 80015ea:	2201      	movs	r2, #1
 80015ec:	2130      	movs	r1, #48	; 0x30
 80015ee:	4618      	mov	r0, r3
 80015f0:	f000 fcca 	bl	8001f88 <GYRO_IO_Write>
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 80015f4:	f107 030e 	add.w	r3, r7, #14
 80015f8:	2201      	movs	r2, #1
 80015fa:	2122      	movs	r1, #34	; 0x22
 80015fc:	4618      	mov	r0, r3
 80015fe:	f000 fcc3 	bl	8001f88 <GYRO_IO_Write>
}
 8001602:	bf00      	nop
 8001604:	3710      	adds	r7, #16
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}

0800160a <L3GD20_EnableIT>:
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2   
  * @retval None
  */
void L3GD20_EnableIT(uint8_t IntSel)
{  
 800160a:	b580      	push	{r7, lr}
 800160c:	b084      	sub	sp, #16
 800160e:	af00      	add	r7, sp, #0
 8001610:	4603      	mov	r3, r0
 8001612:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8001614:	f107 030f 	add.w	r3, r7, #15
 8001618:	2201      	movs	r2, #1
 800161a:	2122      	movs	r1, #34	; 0x22
 800161c:	4618      	mov	r0, r3
 800161e:	f000 fce5 	bl	8001fec <GYRO_IO_Read>
  
  if(IntSel == L3GD20_INT1)
 8001622:	79fb      	ldrb	r3, [r7, #7]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d10a      	bne.n	800163e <L3GD20_EnableIT+0x34>
  {
    tmpreg &= 0x7F;	
 8001628:	7bfb      	ldrb	r3, [r7, #15]
 800162a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800162e:	b2db      	uxtb	r3, r3
 8001630:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT1INTERRUPT_ENABLE;
 8001632:	7bfb      	ldrb	r3, [r7, #15]
 8001634:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001638:	b2db      	uxtb	r3, r3
 800163a:	73fb      	strb	r3, [r7, #15]
 800163c:	e00c      	b.n	8001658 <L3GD20_EnableIT+0x4e>
  }
  else if(IntSel == L3GD20_INT2)
 800163e:	79fb      	ldrb	r3, [r7, #7]
 8001640:	2b01      	cmp	r3, #1
 8001642:	d109      	bne.n	8001658 <L3GD20_EnableIT+0x4e>
  {
    tmpreg &= 0xF7;
 8001644:	7bfb      	ldrb	r3, [r7, #15]
 8001646:	f023 0308 	bic.w	r3, r3, #8
 800164a:	b2db      	uxtb	r3, r3
 800164c:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT2INTERRUPT_ENABLE;
 800164e:	7bfb      	ldrb	r3, [r7, #15]
 8001650:	f043 0308 	orr.w	r3, r3, #8
 8001654:	b2db      	uxtb	r3, r3
 8001656:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8001658:	f107 030f 	add.w	r3, r7, #15
 800165c:	2201      	movs	r2, #1
 800165e:	2122      	movs	r1, #34	; 0x22
 8001660:	4618      	mov	r0, r3
 8001662:	f000 fc91 	bl	8001f88 <GYRO_IO_Write>
}
 8001666:	bf00      	nop
 8001668:	3710      	adds	r7, #16
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}

0800166e <L3GD20_DisableIT>:
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2   
  * @retval None
  */
void L3GD20_DisableIT(uint8_t IntSel)
{  
 800166e:	b580      	push	{r7, lr}
 8001670:	b084      	sub	sp, #16
 8001672:	af00      	add	r7, sp, #0
 8001674:	4603      	mov	r3, r0
 8001676:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8001678:	f107 030f 	add.w	r3, r7, #15
 800167c:	2201      	movs	r2, #1
 800167e:	2122      	movs	r1, #34	; 0x22
 8001680:	4618      	mov	r0, r3
 8001682:	f000 fcb3 	bl	8001fec <GYRO_IO_Read>
  
  if(IntSel == L3GD20_INT1)
 8001686:	79fb      	ldrb	r3, [r7, #7]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d107      	bne.n	800169c <L3GD20_DisableIT+0x2e>
  {
    tmpreg &= 0x7F;	
 800168c:	7bfb      	ldrb	r3, [r7, #15]
 800168e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001692:	b2db      	uxtb	r3, r3
 8001694:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT1INTERRUPT_DISABLE;
 8001696:	7bfb      	ldrb	r3, [r7, #15]
 8001698:	73fb      	strb	r3, [r7, #15]
 800169a:	e009      	b.n	80016b0 <L3GD20_DisableIT+0x42>
  }
  else if(IntSel == L3GD20_INT2)
 800169c:	79fb      	ldrb	r3, [r7, #7]
 800169e:	2b01      	cmp	r3, #1
 80016a0:	d106      	bne.n	80016b0 <L3GD20_DisableIT+0x42>
  {
    tmpreg &= 0xF7;
 80016a2:	7bfb      	ldrb	r3, [r7, #15]
 80016a4:	f023 0308 	bic.w	r3, r3, #8
 80016a8:	b2db      	uxtb	r3, r3
 80016aa:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT2INTERRUPT_DISABLE;
 80016ac:	7bfb      	ldrb	r3, [r7, #15]
 80016ae:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 80016b0:	f107 030f 	add.w	r3, r7, #15
 80016b4:	2201      	movs	r2, #1
 80016b6:	2122      	movs	r1, #34	; 0x22
 80016b8:	4618      	mov	r0, r3
 80016ba:	f000 fc65 	bl	8001f88 <GYRO_IO_Write>
}
 80016be:	bf00      	nop
 80016c0:	3710      	adds	r7, #16
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}

080016c6 <L3GD20_FilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains the configuration setting for the L3GD20.        
  * @retval None
  */
void L3GD20_FilterConfig(uint8_t FilterStruct) 
{
 80016c6:	b580      	push	{r7, lr}
 80016c8:	b084      	sub	sp, #16
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	4603      	mov	r3, r0
 80016ce:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 80016d0:	f107 030f 	add.w	r3, r7, #15
 80016d4:	2201      	movs	r2, #1
 80016d6:	2121      	movs	r1, #33	; 0x21
 80016d8:	4618      	mov	r0, r3
 80016da:	f000 fc87 	bl	8001fec <GYRO_IO_Read>
  
  tmpreg &= 0xC0;
 80016de:	7bfb      	ldrb	r3, [r7, #15]
 80016e0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80016e4:	b2db      	uxtb	r3, r3
 80016e6:	73fb      	strb	r3, [r7, #15]
  
  /* Configure MEMS: mode and cutoff frequency */
  tmpreg |= FilterStruct;
 80016e8:	7bfa      	ldrb	r2, [r7, #15]
 80016ea:	79fb      	ldrb	r3, [r7, #7]
 80016ec:	4313      	orrs	r3, r2
 80016ee:	b2db      	uxtb	r3, r3
 80016f0:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG2 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 80016f2:	f107 030f 	add.w	r3, r7, #15
 80016f6:	2201      	movs	r2, #1
 80016f8:	2121      	movs	r1, #33	; 0x21
 80016fa:	4618      	mov	r0, r3
 80016fc:	f000 fc44 	bl	8001f88 <GYRO_IO_Write>
}
 8001700:	bf00      	nop
 8001702:	3710      	adds	r7, #16
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}

08001708 <L3GD20_FilterCmd>:
  *         @arg: L3GD20_HIGHPASSFILTER_DISABLE 
  *         @arg: L3GD20_HIGHPASSFILTER_ENABLE          
  * @retval None
  */
void L3GD20_FilterCmd(uint8_t HighPassFilterState)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b084      	sub	sp, #16
 800170c:	af00      	add	r7, sp, #0
 800170e:	4603      	mov	r3, r0
 8001710:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8001712:	f107 030f 	add.w	r3, r7, #15
 8001716:	2201      	movs	r2, #1
 8001718:	2124      	movs	r1, #36	; 0x24
 800171a:	4618      	mov	r0, r3
 800171c:	f000 fc66 	bl	8001fec <GYRO_IO_Read>
  
  tmpreg &= 0xEF;
 8001720:	7bfb      	ldrb	r3, [r7, #15]
 8001722:	f023 0310 	bic.w	r3, r3, #16
 8001726:	b2db      	uxtb	r3, r3
 8001728:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterState;
 800172a:	7bfa      	ldrb	r2, [r7, #15]
 800172c:	79fb      	ldrb	r3, [r7, #7]
 800172e:	4313      	orrs	r3, r2
 8001730:	b2db      	uxtb	r3, r3
 8001732:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8001734:	f107 030f 	add.w	r3, r7, #15
 8001738:	2201      	movs	r2, #1
 800173a:	2124      	movs	r1, #36	; 0x24
 800173c:	4618      	mov	r0, r3
 800173e:	f000 fc23 	bl	8001f88 <GYRO_IO_Write>
}
 8001742:	bf00      	nop
 8001744:	3710      	adds	r7, #16
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
	...

0800174c <L3GD20_ReadXYZAngRate>:
* @brief  Calculate the L3GD20 angular data.
* @param  pfData: Data out pointer
* @retval None
*/
void L3GD20_ReadXYZAngRate(float *pfData)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b08a      	sub	sp, #40	; 0x28
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  uint8_t tmpbuffer[6] ={0};
 8001754:	2300      	movs	r3, #0
 8001756:	61bb      	str	r3, [r7, #24]
 8001758:	2300      	movs	r3, #0
 800175a:	83bb      	strh	r3, [r7, #28]
  int16_t RawData[3] = {0};
 800175c:	f107 0310 	add.w	r3, r7, #16
 8001760:	2200      	movs	r2, #0
 8001762:	601a      	str	r2, [r3, #0]
 8001764:	809a      	strh	r2, [r3, #4]
  uint8_t tmpreg = 0;
 8001766:	2300      	movs	r3, #0
 8001768:	73fb      	strb	r3, [r7, #15]
  float sensitivity = 0;
 800176a:	f04f 0300 	mov.w	r3, #0
 800176e:	627b      	str	r3, [r7, #36]	; 0x24
  int i =0;
 8001770:	2300      	movs	r3, #0
 8001772:	623b      	str	r3, [r7, #32]
  
  GYRO_IO_Read(&tmpreg,L3GD20_CTRL_REG4_ADDR,1);
 8001774:	f107 030f 	add.w	r3, r7, #15
 8001778:	2201      	movs	r2, #1
 800177a:	2123      	movs	r1, #35	; 0x23
 800177c:	4618      	mov	r0, r3
 800177e:	f000 fc35 	bl	8001fec <GYRO_IO_Read>
  
  GYRO_IO_Read(tmpbuffer,L3GD20_OUT_X_L_ADDR,6);
 8001782:	f107 0318 	add.w	r3, r7, #24
 8001786:	2206      	movs	r2, #6
 8001788:	2128      	movs	r1, #40	; 0x28
 800178a:	4618      	mov	r0, r3
 800178c:	f000 fc2e 	bl	8001fec <GYRO_IO_Read>
  
  /* check in the control register 4 the data alignment (Big Endian or Little Endian)*/
  if(!(tmpreg & L3GD20_BLE_MSB))
 8001790:	7bfb      	ldrb	r3, [r7, #15]
 8001792:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001796:	2b00      	cmp	r3, #0
 8001798:	d123      	bne.n	80017e2 <L3GD20_ReadXYZAngRate+0x96>
  {
    for(i=0; i<3; i++)
 800179a:	2300      	movs	r3, #0
 800179c:	623b      	str	r3, [r7, #32]
 800179e:	e01c      	b.n	80017da <L3GD20_ReadXYZAngRate+0x8e>
    {
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i+1] << 8) + tmpbuffer[2*i]);
 80017a0:	6a3b      	ldr	r3, [r7, #32]
 80017a2:	005b      	lsls	r3, r3, #1
 80017a4:	3301      	adds	r3, #1
 80017a6:	3328      	adds	r3, #40	; 0x28
 80017a8:	443b      	add	r3, r7
 80017aa:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80017ae:	b29b      	uxth	r3, r3
 80017b0:	021b      	lsls	r3, r3, #8
 80017b2:	b29a      	uxth	r2, r3
 80017b4:	6a3b      	ldr	r3, [r7, #32]
 80017b6:	005b      	lsls	r3, r3, #1
 80017b8:	3328      	adds	r3, #40	; 0x28
 80017ba:	443b      	add	r3, r7
 80017bc:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80017c0:	b29b      	uxth	r3, r3
 80017c2:	4413      	add	r3, r2
 80017c4:	b29b      	uxth	r3, r3
 80017c6:	b21a      	sxth	r2, r3
 80017c8:	6a3b      	ldr	r3, [r7, #32]
 80017ca:	005b      	lsls	r3, r3, #1
 80017cc:	3328      	adds	r3, #40	; 0x28
 80017ce:	443b      	add	r3, r7
 80017d0:	f823 2c18 	strh.w	r2, [r3, #-24]
    for(i=0; i<3; i++)
 80017d4:	6a3b      	ldr	r3, [r7, #32]
 80017d6:	3301      	adds	r3, #1
 80017d8:	623b      	str	r3, [r7, #32]
 80017da:	6a3b      	ldr	r3, [r7, #32]
 80017dc:	2b02      	cmp	r3, #2
 80017de:	dddf      	ble.n	80017a0 <L3GD20_ReadXYZAngRate+0x54>
 80017e0:	e022      	b.n	8001828 <L3GD20_ReadXYZAngRate+0xdc>
    }
  }
  else
  {
    for(i=0; i<3; i++)
 80017e2:	2300      	movs	r3, #0
 80017e4:	623b      	str	r3, [r7, #32]
 80017e6:	e01c      	b.n	8001822 <L3GD20_ReadXYZAngRate+0xd6>
    {
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i] << 8) + tmpbuffer[2*i+1]);
 80017e8:	6a3b      	ldr	r3, [r7, #32]
 80017ea:	005b      	lsls	r3, r3, #1
 80017ec:	3328      	adds	r3, #40	; 0x28
 80017ee:	443b      	add	r3, r7
 80017f0:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80017f4:	b29b      	uxth	r3, r3
 80017f6:	021b      	lsls	r3, r3, #8
 80017f8:	b29a      	uxth	r2, r3
 80017fa:	6a3b      	ldr	r3, [r7, #32]
 80017fc:	005b      	lsls	r3, r3, #1
 80017fe:	3301      	adds	r3, #1
 8001800:	3328      	adds	r3, #40	; 0x28
 8001802:	443b      	add	r3, r7
 8001804:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001808:	b29b      	uxth	r3, r3
 800180a:	4413      	add	r3, r2
 800180c:	b29b      	uxth	r3, r3
 800180e:	b21a      	sxth	r2, r3
 8001810:	6a3b      	ldr	r3, [r7, #32]
 8001812:	005b      	lsls	r3, r3, #1
 8001814:	3328      	adds	r3, #40	; 0x28
 8001816:	443b      	add	r3, r7
 8001818:	f823 2c18 	strh.w	r2, [r3, #-24]
    for(i=0; i<3; i++)
 800181c:	6a3b      	ldr	r3, [r7, #32]
 800181e:	3301      	adds	r3, #1
 8001820:	623b      	str	r3, [r7, #32]
 8001822:	6a3b      	ldr	r3, [r7, #32]
 8001824:	2b02      	cmp	r3, #2
 8001826:	dddf      	ble.n	80017e8 <L3GD20_ReadXYZAngRate+0x9c>
    }
  }
  
  /* Switch the sensitivity value set in the CRTL4 */
  switch(tmpreg & L3GD20_FULLSCALE_SELECTION)
 8001828:	7bfb      	ldrb	r3, [r7, #15]
 800182a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800182e:	2b20      	cmp	r3, #32
 8001830:	d00c      	beq.n	800184c <L3GD20_ReadXYZAngRate+0x100>
 8001832:	2b20      	cmp	r3, #32
 8001834:	dc0d      	bgt.n	8001852 <L3GD20_ReadXYZAngRate+0x106>
 8001836:	2b00      	cmp	r3, #0
 8001838:	d002      	beq.n	8001840 <L3GD20_ReadXYZAngRate+0xf4>
 800183a:	2b10      	cmp	r3, #16
 800183c:	d003      	beq.n	8001846 <L3GD20_ReadXYZAngRate+0xfa>
 800183e:	e008      	b.n	8001852 <L3GD20_ReadXYZAngRate+0x106>
  {
  case L3GD20_FULLSCALE_250:
    sensitivity=L3GD20_SENSITIVITY_250DPS;
 8001840:	4b15      	ldr	r3, [pc, #84]	; (8001898 <L3GD20_ReadXYZAngRate+0x14c>)
 8001842:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 8001844:	e005      	b.n	8001852 <L3GD20_ReadXYZAngRate+0x106>
    
  case L3GD20_FULLSCALE_500:
    sensitivity=L3GD20_SENSITIVITY_500DPS;
 8001846:	4b15      	ldr	r3, [pc, #84]	; (800189c <L3GD20_ReadXYZAngRate+0x150>)
 8001848:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 800184a:	e002      	b.n	8001852 <L3GD20_ReadXYZAngRate+0x106>
    
  case L3GD20_FULLSCALE_2000:
    sensitivity=L3GD20_SENSITIVITY_2000DPS;
 800184c:	4b14      	ldr	r3, [pc, #80]	; (80018a0 <L3GD20_ReadXYZAngRate+0x154>)
 800184e:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 8001850:	bf00      	nop
  }
  /* Divide by sensitivity */
  for(i=0; i<3; i++)
 8001852:	2300      	movs	r3, #0
 8001854:	623b      	str	r3, [r7, #32]
 8001856:	e016      	b.n	8001886 <L3GD20_ReadXYZAngRate+0x13a>
  {
    pfData[i]=(float)(RawData[i] * sensitivity);
 8001858:	6a3b      	ldr	r3, [r7, #32]
 800185a:	005b      	lsls	r3, r3, #1
 800185c:	3328      	adds	r3, #40	; 0x28
 800185e:	443b      	add	r3, r7
 8001860:	f933 3c18 	ldrsh.w	r3, [r3, #-24]
 8001864:	ee07 3a90 	vmov	s15, r3
 8001868:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800186c:	6a3b      	ldr	r3, [r7, #32]
 800186e:	009b      	lsls	r3, r3, #2
 8001870:	687a      	ldr	r2, [r7, #4]
 8001872:	4413      	add	r3, r2
 8001874:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001878:	ee67 7a27 	vmul.f32	s15, s14, s15
 800187c:	edc3 7a00 	vstr	s15, [r3]
  for(i=0; i<3; i++)
 8001880:	6a3b      	ldr	r3, [r7, #32]
 8001882:	3301      	adds	r3, #1
 8001884:	623b      	str	r3, [r7, #32]
 8001886:	6a3b      	ldr	r3, [r7, #32]
 8001888:	2b02      	cmp	r3, #2
 800188a:	dde5      	ble.n	8001858 <L3GD20_ReadXYZAngRate+0x10c>
  }
}
 800188c:	bf00      	nop
 800188e:	bf00      	nop
 8001890:	3728      	adds	r7, #40	; 0x28
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	410c0000 	.word	0x410c0000
 800189c:	418c0000 	.word	0x418c0000
 80018a0:	428c0000 	.word	0x428c0000

080018a4 <LSM303DLHC_AccInit>:
  * @brief  Set LSM303DLHC Initialization.
  * @param  InitStruct: Init parameters
  * @retval None
  */
void LSM303DLHC_AccInit(uint16_t InitStruct)
{  
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b084      	sub	sp, #16
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	4603      	mov	r3, r0
 80018ac:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80018ae:	2300      	movs	r3, #0
 80018b0:	73fb      	strb	r3, [r7, #15]
  
  /*  Low level init */
  COMPASSACCELERO_IO_Init();
 80018b2:	f000 fbd5 	bl	8002060 <COMPASSACCELERO_IO_Init>
  
  /* Write value to ACC MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 80018b6:	88fb      	ldrh	r3, [r7, #6]
 80018b8:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG1_A, ctrl);
 80018ba:	7bfb      	ldrb	r3, [r7, #15]
 80018bc:	461a      	mov	r2, r3
 80018be:	2120      	movs	r1, #32
 80018c0:	2032      	movs	r0, #50	; 0x32
 80018c2:	f000 fc45 	bl	8002150 <COMPASSACCELERO_IO_Write>
  
  /* Write value to ACC MEMS CTRL_REG4 register */
  ctrl = (uint8_t) (InitStruct << 8);
 80018c6:	2300      	movs	r3, #0
 80018c8:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG4_A, ctrl);
 80018ca:	7bfb      	ldrb	r3, [r7, #15]
 80018cc:	461a      	mov	r2, r3
 80018ce:	2123      	movs	r1, #35	; 0x23
 80018d0:	2032      	movs	r0, #50	; 0x32
 80018d2:	f000 fc3d 	bl	8002150 <COMPASSACCELERO_IO_Write>
}
 80018d6:	bf00      	nop
 80018d8:	3710      	adds	r7, #16
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}

080018de <LSM303DLHC_AccDeInit>:
  * @brief  LSM303DLHC De-initialization.
  * @param  None
  * @retval None
  */
void LSM303DLHC_AccDeInit(void)
{  
 80018de:	b480      	push	{r7}
 80018e0:	af00      	add	r7, sp, #0
}
 80018e2:	bf00      	nop
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr

080018ec <LSM303DLHC_AccReadID>:
  * @brief  Read LSM303DLHC ID.
  * @param  None
  * @retval ID 
  */
uint8_t LSM303DLHC_AccReadID(void)
{  
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b082      	sub	sp, #8
 80018f0:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 80018f2:	2300      	movs	r3, #0
 80018f4:	71fb      	strb	r3, [r7, #7]
  
  /* Low level init */
  COMPASSACCELERO_IO_Init();
 80018f6:	f000 fbb3 	bl	8002060 <COMPASSACCELERO_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_WHO_AM_I_ADDR);
 80018fa:	210f      	movs	r1, #15
 80018fc:	2032      	movs	r0, #50	; 0x32
 80018fe:	f000 fc3a 	bl	8002176 <COMPASSACCELERO_IO_Read>
 8001902:	4603      	mov	r3, r0
 8001904:	71fb      	strb	r3, [r7, #7]
  
  return ctrl;
 8001906:	79fb      	ldrb	r3, [r7, #7]
}
 8001908:	4618      	mov	r0, r3
 800190a:	3708      	adds	r7, #8
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}

08001910 <LSM303DLHC_AccRebootCmd>:
  * @brief  Reboot memory content of LSM303DLHC
  * @param  None
  * @retval None
  */
void LSM303DLHC_AccRebootCmd(void)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b082      	sub	sp, #8
 8001914:	af00      	add	r7, sp, #0
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A);
 8001916:	2124      	movs	r1, #36	; 0x24
 8001918:	2032      	movs	r0, #50	; 0x32
 800191a:	f000 fc2c 	bl	8002176 <COMPASSACCELERO_IO_Read>
 800191e:	4603      	mov	r3, r0
 8001920:	71fb      	strb	r3, [r7, #7]
  
  /* Enable or Disable the reboot memory */
  tmpreg |= LSM303DLHC_BOOT_REBOOTMEMORY;
 8001922:	79fb      	ldrb	r3, [r7, #7]
 8001924:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001928:	71fb      	strb	r3, [r7, #7]
  
  /* Write value to ACC MEMS CTRL_REG5 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A, tmpreg);
 800192a:	79fb      	ldrb	r3, [r7, #7]
 800192c:	461a      	mov	r2, r3
 800192e:	2124      	movs	r1, #36	; 0x24
 8001930:	2032      	movs	r0, #50	; 0x32
 8001932:	f000 fc0d 	bl	8002150 <COMPASSACCELERO_IO_Write>
}
 8001936:	bf00      	nop
 8001938:	3708      	adds	r7, #8
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}

0800193e <LSM303DLHC_AccFilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains data for filter config
  * @retval None
  */
void LSM303DLHC_AccFilterConfig(uint8_t FilterStruct) 
{
 800193e:	b580      	push	{r7, lr}
 8001940:	b084      	sub	sp, #16
 8001942:	af00      	add	r7, sp, #0
 8001944:	4603      	mov	r3, r0
 8001946:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 8001948:	2121      	movs	r1, #33	; 0x21
 800194a:	2032      	movs	r0, #50	; 0x32
 800194c:	f000 fc13 	bl	8002176 <COMPASSACCELERO_IO_Read>
 8001950:	4603      	mov	r3, r0
 8001952:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= 0x0C;
 8001954:	7bfb      	ldrb	r3, [r7, #15]
 8001956:	f003 030c 	and.w	r3, r3, #12
 800195a:	73fb      	strb	r3, [r7, #15]
  tmpreg |= FilterStruct;
 800195c:	7bfa      	ldrb	r2, [r7, #15]
 800195e:	79fb      	ldrb	r3, [r7, #7]
 8001960:	4313      	orrs	r3, r2
 8001962:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 8001964:	7bfb      	ldrb	r3, [r7, #15]
 8001966:	461a      	mov	r2, r3
 8001968:	2121      	movs	r1, #33	; 0x21
 800196a:	2032      	movs	r0, #50	; 0x32
 800196c:	f000 fbf0 	bl	8002150 <COMPASSACCELERO_IO_Write>
}
 8001970:	bf00      	nop
 8001972:	3710      	adds	r7, #16
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}

08001978 <LSM303DLHC_AccFilterCmd>:
  *         @arg: LSM303DLHC_HIGHPASSFILTER_DISABLE 
  *         @arg: LSM303DLHC_HIGHPASSFILTER_ENABLE
  * @retval None
  */
void LSM303DLHC_AccFilterCmd(uint8_t HighPassFilterState)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b084      	sub	sp, #16
 800197c:	af00      	add	r7, sp, #0
 800197e:	4603      	mov	r3, r0
 8001980:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 8001982:	2121      	movs	r1, #33	; 0x21
 8001984:	2032      	movs	r0, #50	; 0x32
 8001986:	f000 fbf6 	bl	8002176 <COMPASSACCELERO_IO_Read>
 800198a:	4603      	mov	r3, r0
 800198c:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= 0xF7;
 800198e:	7bfb      	ldrb	r3, [r7, #15]
 8001990:	f023 0308 	bic.w	r3, r3, #8
 8001994:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterState;
 8001996:	7bfa      	ldrb	r2, [r7, #15]
 8001998:	79fb      	ldrb	r3, [r7, #7]
 800199a:	4313      	orrs	r3, r2
 800199c:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 800199e:	7bfb      	ldrb	r3, [r7, #15]
 80019a0:	461a      	mov	r2, r3
 80019a2:	2121      	movs	r1, #33	; 0x21
 80019a4:	2032      	movs	r0, #50	; 0x32
 80019a6:	f000 fbd3 	bl	8002150 <COMPASSACCELERO_IO_Write>
}
 80019aa:	bf00      	nop
 80019ac:	3710      	adds	r7, #16
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}

080019b2 <LSM303DLHC_AccReadXYZ>:
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  * @retval None
  */
void LSM303DLHC_AccReadXYZ(int16_t* pData)
{
 80019b2:	b580      	push	{r7, lr}
 80019b4:	b088      	sub	sp, #32
 80019b6:	af00      	add	r7, sp, #0
 80019b8:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx[2]={0,0};
 80019ba:	2300      	movs	r3, #0
 80019bc:	82bb      	strh	r3, [r7, #20]
  int8_t buffer[6];
  uint8_t i = 0;
 80019be:	2300      	movs	r3, #0
 80019c0:	77fb      	strb	r3, [r7, #31]
  uint8_t sensitivity = LSM303DLHC_ACC_SENSITIVITY_2G;
 80019c2:	2301      	movs	r3, #1
 80019c4:	77bb      	strb	r3, [r7, #30]
  
  /* Read the acceleration control register content */
  ctrlx[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG4_A);
 80019c6:	2123      	movs	r1, #35	; 0x23
 80019c8:	2032      	movs	r0, #50	; 0x32
 80019ca:	f000 fbd4 	bl	8002176 <COMPASSACCELERO_IO_Read>
 80019ce:	4603      	mov	r3, r0
 80019d0:	753b      	strb	r3, [r7, #20]
  ctrlx[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A);
 80019d2:	2124      	movs	r1, #36	; 0x24
 80019d4:	2032      	movs	r0, #50	; 0x32
 80019d6:	f000 fbce 	bl	8002176 <COMPASSACCELERO_IO_Read>
 80019da:	4603      	mov	r3, r0
 80019dc:	757b      	strb	r3, [r7, #21]
  
  /* Read output register X, Y & Z acceleration */
  buffer[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_L_A); 
 80019de:	2128      	movs	r1, #40	; 0x28
 80019e0:	2032      	movs	r0, #50	; 0x32
 80019e2:	f000 fbc8 	bl	8002176 <COMPASSACCELERO_IO_Read>
 80019e6:	4603      	mov	r3, r0
 80019e8:	b25b      	sxtb	r3, r3
 80019ea:	733b      	strb	r3, [r7, #12]
  buffer[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_H_A);
 80019ec:	2129      	movs	r1, #41	; 0x29
 80019ee:	2032      	movs	r0, #50	; 0x32
 80019f0:	f000 fbc1 	bl	8002176 <COMPASSACCELERO_IO_Read>
 80019f4:	4603      	mov	r3, r0
 80019f6:	b25b      	sxtb	r3, r3
 80019f8:	737b      	strb	r3, [r7, #13]
  buffer[2] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_L_A);
 80019fa:	212a      	movs	r1, #42	; 0x2a
 80019fc:	2032      	movs	r0, #50	; 0x32
 80019fe:	f000 fbba 	bl	8002176 <COMPASSACCELERO_IO_Read>
 8001a02:	4603      	mov	r3, r0
 8001a04:	b25b      	sxtb	r3, r3
 8001a06:	73bb      	strb	r3, [r7, #14]
  buffer[3] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_H_A);
 8001a08:	212b      	movs	r1, #43	; 0x2b
 8001a0a:	2032      	movs	r0, #50	; 0x32
 8001a0c:	f000 fbb3 	bl	8002176 <COMPASSACCELERO_IO_Read>
 8001a10:	4603      	mov	r3, r0
 8001a12:	b25b      	sxtb	r3, r3
 8001a14:	73fb      	strb	r3, [r7, #15]
  buffer[4] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Z_L_A);
 8001a16:	212c      	movs	r1, #44	; 0x2c
 8001a18:	2032      	movs	r0, #50	; 0x32
 8001a1a:	f000 fbac 	bl	8002176 <COMPASSACCELERO_IO_Read>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	b25b      	sxtb	r3, r3
 8001a22:	743b      	strb	r3, [r7, #16]
  buffer[5] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Z_H_A);
 8001a24:	212d      	movs	r1, #45	; 0x2d
 8001a26:	2032      	movs	r0, #50	; 0x32
 8001a28:	f000 fba5 	bl	8002176 <COMPASSACCELERO_IO_Read>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	b25b      	sxtb	r3, r3
 8001a30:	747b      	strb	r3, [r7, #17]
  
  /* Check in the control register4 the data alignment*/
  if(!(ctrlx[0] & LSM303DLHC_BLE_MSB)) 
 8001a32:	7d3b      	ldrb	r3, [r7, #20]
 8001a34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d123      	bne.n	8001a84 <LSM303DLHC_AccReadXYZ+0xd2>
  {
    for(i=0; i<3; i++)
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	77fb      	strb	r3, [r7, #31]
 8001a40:	e01c      	b.n	8001a7c <LSM303DLHC_AccReadXYZ+0xca>
    {
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i+1] << 8) + buffer[2*i]);
 8001a42:	7ffb      	ldrb	r3, [r7, #31]
 8001a44:	005b      	lsls	r3, r3, #1
 8001a46:	3301      	adds	r3, #1
 8001a48:	3320      	adds	r3, #32
 8001a4a:	443b      	add	r3, r7
 8001a4c:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8001a50:	b29b      	uxth	r3, r3
 8001a52:	021b      	lsls	r3, r3, #8
 8001a54:	b29a      	uxth	r2, r3
 8001a56:	7ffb      	ldrb	r3, [r7, #31]
 8001a58:	005b      	lsls	r3, r3, #1
 8001a5a:	3320      	adds	r3, #32
 8001a5c:	443b      	add	r3, r7
 8001a5e:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8001a62:	b29b      	uxth	r3, r3
 8001a64:	4413      	add	r3, r2
 8001a66:	b29a      	uxth	r2, r3
 8001a68:	7ffb      	ldrb	r3, [r7, #31]
 8001a6a:	b212      	sxth	r2, r2
 8001a6c:	005b      	lsls	r3, r3, #1
 8001a6e:	3320      	adds	r3, #32
 8001a70:	443b      	add	r3, r7
 8001a72:	f823 2c08 	strh.w	r2, [r3, #-8]
    for(i=0; i<3; i++)
 8001a76:	7ffb      	ldrb	r3, [r7, #31]
 8001a78:	3301      	adds	r3, #1
 8001a7a:	77fb      	strb	r3, [r7, #31]
 8001a7c:	7ffb      	ldrb	r3, [r7, #31]
 8001a7e:	2b02      	cmp	r3, #2
 8001a80:	d9df      	bls.n	8001a42 <LSM303DLHC_AccReadXYZ+0x90>
 8001a82:	e022      	b.n	8001aca <LSM303DLHC_AccReadXYZ+0x118>
    }
  }
  else /* Big Endian Mode */
  {
    for(i=0; i<3; i++)
 8001a84:	2300      	movs	r3, #0
 8001a86:	77fb      	strb	r3, [r7, #31]
 8001a88:	e01c      	b.n	8001ac4 <LSM303DLHC_AccReadXYZ+0x112>
    {
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i] << 8) + buffer[2*i+1]);
 8001a8a:	7ffb      	ldrb	r3, [r7, #31]
 8001a8c:	005b      	lsls	r3, r3, #1
 8001a8e:	3320      	adds	r3, #32
 8001a90:	443b      	add	r3, r7
 8001a92:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8001a96:	b29b      	uxth	r3, r3
 8001a98:	021b      	lsls	r3, r3, #8
 8001a9a:	b29a      	uxth	r2, r3
 8001a9c:	7ffb      	ldrb	r3, [r7, #31]
 8001a9e:	005b      	lsls	r3, r3, #1
 8001aa0:	3301      	adds	r3, #1
 8001aa2:	3320      	adds	r3, #32
 8001aa4:	443b      	add	r3, r7
 8001aa6:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8001aaa:	b29b      	uxth	r3, r3
 8001aac:	4413      	add	r3, r2
 8001aae:	b29a      	uxth	r2, r3
 8001ab0:	7ffb      	ldrb	r3, [r7, #31]
 8001ab2:	b212      	sxth	r2, r2
 8001ab4:	005b      	lsls	r3, r3, #1
 8001ab6:	3320      	adds	r3, #32
 8001ab8:	443b      	add	r3, r7
 8001aba:	f823 2c08 	strh.w	r2, [r3, #-8]
    for(i=0; i<3; i++)
 8001abe:	7ffb      	ldrb	r3, [r7, #31]
 8001ac0:	3301      	adds	r3, #1
 8001ac2:	77fb      	strb	r3, [r7, #31]
 8001ac4:	7ffb      	ldrb	r3, [r7, #31]
 8001ac6:	2b02      	cmp	r3, #2
 8001ac8:	d9df      	bls.n	8001a8a <LSM303DLHC_AccReadXYZ+0xd8>
    }
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL4 */
  switch(ctrlx[0] & LSM303DLHC_FULLSCALE_16G)
 8001aca:	7d3b      	ldrb	r3, [r7, #20]
 8001acc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001ad0:	2b30      	cmp	r3, #48	; 0x30
 8001ad2:	d013      	beq.n	8001afc <LSM303DLHC_AccReadXYZ+0x14a>
 8001ad4:	2b30      	cmp	r3, #48	; 0x30
 8001ad6:	dc14      	bgt.n	8001b02 <LSM303DLHC_AccReadXYZ+0x150>
 8001ad8:	2b20      	cmp	r3, #32
 8001ada:	d00c      	beq.n	8001af6 <LSM303DLHC_AccReadXYZ+0x144>
 8001adc:	2b20      	cmp	r3, #32
 8001ade:	dc10      	bgt.n	8001b02 <LSM303DLHC_AccReadXYZ+0x150>
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d002      	beq.n	8001aea <LSM303DLHC_AccReadXYZ+0x138>
 8001ae4:	2b10      	cmp	r3, #16
 8001ae6:	d003      	beq.n	8001af0 <LSM303DLHC_AccReadXYZ+0x13e>
 8001ae8:	e00b      	b.n	8001b02 <LSM303DLHC_AccReadXYZ+0x150>
  {
  case LSM303DLHC_FULLSCALE_2G:
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_2G;
 8001aea:	2301      	movs	r3, #1
 8001aec:	77bb      	strb	r3, [r7, #30]
    break;
 8001aee:	e008      	b.n	8001b02 <LSM303DLHC_AccReadXYZ+0x150>
  case LSM303DLHC_FULLSCALE_4G:
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_4G;
 8001af0:	2302      	movs	r3, #2
 8001af2:	77bb      	strb	r3, [r7, #30]
    break;
 8001af4:	e005      	b.n	8001b02 <LSM303DLHC_AccReadXYZ+0x150>
  case LSM303DLHC_FULLSCALE_8G:
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_8G;
 8001af6:	2304      	movs	r3, #4
 8001af8:	77bb      	strb	r3, [r7, #30]
    break;
 8001afa:	e002      	b.n	8001b02 <LSM303DLHC_AccReadXYZ+0x150>
  case LSM303DLHC_FULLSCALE_16G:
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_16G;
 8001afc:	230c      	movs	r3, #12
 8001afe:	77bb      	strb	r3, [r7, #30]
    break;
 8001b00:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8001b02:	2300      	movs	r3, #0
 8001b04:	77fb      	strb	r3, [r7, #31]
 8001b06:	e014      	b.n	8001b32 <LSM303DLHC_AccReadXYZ+0x180>
  {
    pData[i]=(pnRawData[i] * sensitivity);
 8001b08:	7ffb      	ldrb	r3, [r7, #31]
 8001b0a:	005b      	lsls	r3, r3, #1
 8001b0c:	3320      	adds	r3, #32
 8001b0e:	443b      	add	r3, r7
 8001b10:	f933 3c08 	ldrsh.w	r3, [r3, #-8]
 8001b14:	b29a      	uxth	r2, r3
 8001b16:	7fbb      	ldrb	r3, [r7, #30]
 8001b18:	b29b      	uxth	r3, r3
 8001b1a:	fb12 f303 	smulbb	r3, r2, r3
 8001b1e:	b299      	uxth	r1, r3
 8001b20:	7ffb      	ldrb	r3, [r7, #31]
 8001b22:	005b      	lsls	r3, r3, #1
 8001b24:	687a      	ldr	r2, [r7, #4]
 8001b26:	4413      	add	r3, r2
 8001b28:	b20a      	sxth	r2, r1
 8001b2a:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8001b2c:	7ffb      	ldrb	r3, [r7, #31]
 8001b2e:	3301      	adds	r3, #1
 8001b30:	77fb      	strb	r3, [r7, #31]
 8001b32:	7ffb      	ldrb	r3, [r7, #31]
 8001b34:	2b02      	cmp	r3, #2
 8001b36:	d9e7      	bls.n	8001b08 <LSM303DLHC_AccReadXYZ+0x156>
  }
}
 8001b38:	bf00      	nop
 8001b3a:	bf00      	nop
 8001b3c:	3720      	adds	r7, #32
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}

08001b42 <LSM303DLHC_AccFilterClickCmd>:
  *         @arg: LSM303DLHC_HPF_CLICK_DISABLE 
  *         @arg: LSM303DLHC_HPF_CLICK_ENABLE
  * @retval None
  */
void LSM303DLHC_AccFilterClickCmd(uint8_t HighPassFilterClickState)
{
 8001b42:	b580      	push	{r7, lr}
 8001b44:	b084      	sub	sp, #16
 8001b46:	af00      	add	r7, sp, #0
 8001b48:	4603      	mov	r3, r0
 8001b4a:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg = 0x00;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 8001b50:	2121      	movs	r1, #33	; 0x21
 8001b52:	2032      	movs	r0, #50	; 0x32
 8001b54:	f000 fb0f 	bl	8002176 <COMPASSACCELERO_IO_Read>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	73fb      	strb	r3, [r7, #15]
  
  tmpreg &= ~(LSM303DLHC_HPF_CLICK_ENABLE);
 8001b5c:	7bfb      	ldrb	r3, [r7, #15]
 8001b5e:	f023 0304 	bic.w	r3, r3, #4
 8001b62:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterClickState;
 8001b64:	7bfa      	ldrb	r2, [r7, #15]
 8001b66:	79fb      	ldrb	r3, [r7, #7]
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to ACC MEMS CTRL_REG2 regsister */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 8001b6c:	7bfb      	ldrb	r3, [r7, #15]
 8001b6e:	461a      	mov	r2, r3
 8001b70:	2121      	movs	r1, #33	; 0x21
 8001b72:	2032      	movs	r0, #50	; 0x32
 8001b74:	f000 faec 	bl	8002150 <COMPASSACCELERO_IO_Write>
}
 8001b78:	bf00      	nop
 8001b7a:	3710      	adds	r7, #16
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}

08001b80 <LSM303DLHC_AccIT1Enable>:
  *         @arg   LSM303DLHC_IT1_WTM
  *         @arg   LSM303DLHC_IT1_OVERRUN
  * @retval None
  */
void LSM303DLHC_AccIT1Enable(uint8_t LSM303DLHC_IT)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b084      	sub	sp, #16
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	4603      	mov	r3, r0
 8001b88:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpval = 0x00;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL_REG3 register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG3_A);
 8001b8e:	2122      	movs	r1, #34	; 0x22
 8001b90:	2032      	movs	r0, #50	; 0x32
 8001b92:	f000 faf0 	bl	8002176 <COMPASSACCELERO_IO_Read>
 8001b96:	4603      	mov	r3, r0
 8001b98:	73fb      	strb	r3, [r7, #15]
  
  /* Enable IT1 */
  tmpval |= LSM303DLHC_IT;
 8001b9a:	7bfa      	ldrb	r2, [r7, #15]
 8001b9c:	79fb      	ldrb	r3, [r7, #7]
 8001b9e:	4313      	orrs	r3, r2
 8001ba0:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG3 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG3_A, tmpval);
 8001ba2:	7bfb      	ldrb	r3, [r7, #15]
 8001ba4:	461a      	mov	r2, r3
 8001ba6:	2122      	movs	r1, #34	; 0x22
 8001ba8:	2032      	movs	r0, #50	; 0x32
 8001baa:	f000 fad1 	bl	8002150 <COMPASSACCELERO_IO_Write>
}
 8001bae:	bf00      	nop
 8001bb0:	3710      	adds	r7, #16
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}

08001bb6 <LSM303DLHC_AccClickITEnable>:
  * @brief  Click interrupt enable
  * @param  ITClick: the selected interrupt to enable
  * @retval None
  */
void LSM303DLHC_AccClickITEnable(uint8_t ITClick)
{  
 8001bb6:	b580      	push	{r7, lr}
 8001bb8:	b084      	sub	sp, #16
 8001bba:	af00      	add	r7, sp, #0
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpval = 0x00;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	73fb      	strb	r3, [r7, #15]
  
  /* Read CLICK_CFR register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CLICK_CFG_A);
 8001bc4:	2138      	movs	r1, #56	; 0x38
 8001bc6:	2032      	movs	r0, #50	; 0x32
 8001bc8:	f000 fad5 	bl	8002176 <COMPASSACCELERO_IO_Read>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	73fb      	strb	r3, [r7, #15]
  
  /* Enable the selected interrupt */
  tmpval |= ITClick;
 8001bd0:	7bfa      	ldrb	r2, [r7, #15]
 8001bd2:	79fb      	ldrb	r3, [r7, #7]
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CLICK CFG register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CLICK_CFG_A, tmpval);
 8001bd8:	7bfb      	ldrb	r3, [r7, #15]
 8001bda:	461a      	mov	r2, r3
 8001bdc:	2138      	movs	r1, #56	; 0x38
 8001bde:	2032      	movs	r0, #50	; 0x32
 8001be0:	f000 fab6 	bl	8002150 <COMPASSACCELERO_IO_Write>
  
  /* Configure Click Threshold on Z axis */
  tmpval = 0x0A;
 8001be4:	230a      	movs	r3, #10
 8001be6:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CLICK_THS_A, tmpval);
 8001be8:	7bfb      	ldrb	r3, [r7, #15]
 8001bea:	461a      	mov	r2, r3
 8001bec:	213a      	movs	r1, #58	; 0x3a
 8001bee:	2032      	movs	r0, #50	; 0x32
 8001bf0:	f000 faae 	bl	8002150 <COMPASSACCELERO_IO_Write>
  
  /* Configure Time Limit */
  tmpval = 0x05;
 8001bf4:	2305      	movs	r3, #5
 8001bf6:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_TIME_LIMIT_A, tmpval);
 8001bf8:	7bfb      	ldrb	r3, [r7, #15]
 8001bfa:	461a      	mov	r2, r3
 8001bfc:	213b      	movs	r1, #59	; 0x3b
 8001bfe:	2032      	movs	r0, #50	; 0x32
 8001c00:	f000 faa6 	bl	8002150 <COMPASSACCELERO_IO_Write>
  
  /* Configure Latency */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_TIME_LATENCY_A, tmpval);
 8001c04:	7bfb      	ldrb	r3, [r7, #15]
 8001c06:	461a      	mov	r2, r3
 8001c08:	213c      	movs	r1, #60	; 0x3c
 8001c0a:	2032      	movs	r0, #50	; 0x32
 8001c0c:	f000 faa0 	bl	8002150 <COMPASSACCELERO_IO_Write>
  
  /* Configure Click Window */
  tmpval = 0x32;
 8001c10:	2332      	movs	r3, #50	; 0x32
 8001c12:	73fb      	strb	r3, [r7, #15]
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_TIME_WINDOW_A, tmpval);
 8001c14:	7bfb      	ldrb	r3, [r7, #15]
 8001c16:	461a      	mov	r2, r3
 8001c18:	213d      	movs	r1, #61	; 0x3d
 8001c1a:	2032      	movs	r0, #50	; 0x32
 8001c1c:	f000 fa98 	bl	8002150 <COMPASSACCELERO_IO_Write>
}
 8001c20:	bf00      	nop
 8001c22:	3710      	adds	r7, #16
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}

08001c28 <LSM303DLHC_AccZClickITConfig>:
  * @brief  Click on Z axis interrupt config
  * @param  None
  * @retval None
  */
void LSM303DLHC_AccZClickITConfig(void)
{  
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	af00      	add	r7, sp, #0
  /* Configure low level IT config */
  COMPASSACCELERO_IO_ITConfig();
 8001c2c:	f000 fa62 	bl	80020f4 <COMPASSACCELERO_IO_ITConfig>
  
  /* Select click IT as INT1 interrupt */
  LSM303DLHC_AccIT1Enable(LSM303DLHC_IT1_CLICK);
 8001c30:	2080      	movs	r0, #128	; 0x80
 8001c32:	f7ff ffa5 	bl	8001b80 <LSM303DLHC_AccIT1Enable>
  
  /* Enable High pass filter for click IT */
  LSM303DLHC_AccFilterClickCmd(LSM303DLHC_HPF_CLICK_ENABLE);
 8001c36:	2004      	movs	r0, #4
 8001c38:	f7ff ff83 	bl	8001b42 <LSM303DLHC_AccFilterClickCmd>
  
  /* Enable simple click IT on Z axis, */
  LSM303DLHC_AccClickITEnable(LSM303DLHC_Z_SINGLE_CLICK);
 8001c3c:	2010      	movs	r0, #16
 8001c3e:	f7ff ffba 	bl	8001bb6 <LSM303DLHC_AccClickITEnable>
}
 8001c42:	bf00      	nop
 8001c44:	bd80      	pop	{r7, pc}
	...

08001c48 <I2Cx_MspInit>:
  * @brief Discovery I2Cx MSP Initialization
  * @param hi2c I2C handle
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *hi2c)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b08a      	sub	sp, #40	; 0x28
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable SCK and SDA GPIO clocks */
  DISCOVERY_I2Cx_GPIO_CLK_ENABLE();
 8001c50:	4b15      	ldr	r3, [pc, #84]	; (8001ca8 <I2Cx_MspInit+0x60>)
 8001c52:	695b      	ldr	r3, [r3, #20]
 8001c54:	4a14      	ldr	r2, [pc, #80]	; (8001ca8 <I2Cx_MspInit+0x60>)
 8001c56:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c5a:	6153      	str	r3, [r2, #20]
 8001c5c:	4b12      	ldr	r3, [pc, #72]	; (8001ca8 <I2Cx_MspInit+0x60>)
 8001c5e:	695b      	ldr	r3, [r3, #20]
 8001c60:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c64:	613b      	str	r3, [r7, #16]
 8001c66:	693b      	ldr	r3, [r7, #16]

  /* I2Cx SD1 & SCK pin configuration */
  GPIO_InitStructure.Pin = (DISCOVERY_I2Cx_SDA_PIN | DISCOVERY_I2Cx_SCL_PIN);
 8001c68:	23c0      	movs	r3, #192	; 0xc0
 8001c6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8001c6c:	2302      	movs	r3, #2
 8001c6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull = GPIO_PULLDOWN;
 8001c70:	2302      	movs	r3, #2
 8001c72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c74:	2303      	movs	r3, #3
 8001c76:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_I2Cx_AF;
 8001c78:	2304      	movs	r3, #4
 8001c7a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_GPIO_PORT, &GPIO_InitStructure);
 8001c7c:	f107 0314 	add.w	r3, r7, #20
 8001c80:	4619      	mov	r1, r3
 8001c82:	480a      	ldr	r0, [pc, #40]	; (8001cac <I2Cx_MspInit+0x64>)
 8001c84:	f000 fd1c 	bl	80026c0 <HAL_GPIO_Init>

  /* Enable the I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 8001c88:	4b07      	ldr	r3, [pc, #28]	; (8001ca8 <I2Cx_MspInit+0x60>)
 8001c8a:	69db      	ldr	r3, [r3, #28]
 8001c8c:	4a06      	ldr	r2, [pc, #24]	; (8001ca8 <I2Cx_MspInit+0x60>)
 8001c8e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001c92:	61d3      	str	r3, [r2, #28]
 8001c94:	4b04      	ldr	r3, [pc, #16]	; (8001ca8 <I2Cx_MspInit+0x60>)
 8001c96:	69db      	ldr	r3, [r3, #28]
 8001c98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c9c:	60fb      	str	r3, [r7, #12]
 8001c9e:	68fb      	ldr	r3, [r7, #12]
}
 8001ca0:	bf00      	nop
 8001ca2:	3728      	adds	r7, #40	; 0x28
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}
 8001ca8:	40021000 	.word	0x40021000
 8001cac:	48000400 	.word	0x48000400

08001cb0 <I2Cx_Init>:
/**
  * @brief Discovery I2Cx Bus initialization
  * @retval None
  */
static void I2Cx_Init(void)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	af00      	add	r7, sp, #0
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 8001cb4:	4811      	ldr	r0, [pc, #68]	; (8001cfc <I2Cx_Init+0x4c>)
 8001cb6:	f001 fa5d 	bl	8003174 <HAL_I2C_GetState>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d11a      	bne.n	8001cf6 <I2Cx_Init+0x46>
  {
    I2cHandle.Instance = DISCOVERY_I2Cx;
 8001cc0:	4b0e      	ldr	r3, [pc, #56]	; (8001cfc <I2Cx_Init+0x4c>)
 8001cc2:	4a0f      	ldr	r2, [pc, #60]	; (8001d00 <I2Cx_Init+0x50>)
 8001cc4:	601a      	str	r2, [r3, #0]
    I2cHandle.Init.OwnAddress1 =  ACCELERO_I2C_ADDRESS;
 8001cc6:	4b0d      	ldr	r3, [pc, #52]	; (8001cfc <I2Cx_Init+0x4c>)
 8001cc8:	2232      	movs	r2, #50	; 0x32
 8001cca:	609a      	str	r2, [r3, #8]
    I2cHandle.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ccc:	4b0b      	ldr	r3, [pc, #44]	; (8001cfc <I2Cx_Init+0x4c>)
 8001cce:	2201      	movs	r2, #1
 8001cd0:	60da      	str	r2, [r3, #12]
    I2cHandle.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001cd2:	4b0a      	ldr	r3, [pc, #40]	; (8001cfc <I2Cx_Init+0x4c>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	611a      	str	r2, [r3, #16]
    I2cHandle.Init.OwnAddress2 = 0;
 8001cd8:	4b08      	ldr	r3, [pc, #32]	; (8001cfc <I2Cx_Init+0x4c>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	615a      	str	r2, [r3, #20]
    I2cHandle.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001cde:	4b07      	ldr	r3, [pc, #28]	; (8001cfc <I2Cx_Init+0x4c>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	61da      	str	r2, [r3, #28]
    I2cHandle.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;	
 8001ce4:	4b05      	ldr	r3, [pc, #20]	; (8001cfc <I2Cx_Init+0x4c>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(&I2cHandle);
 8001cea:	4804      	ldr	r0, [pc, #16]	; (8001cfc <I2Cx_Init+0x4c>)
 8001cec:	f7ff ffac 	bl	8001c48 <I2Cx_MspInit>
    HAL_I2C_Init(&I2cHandle);
 8001cf0:	4802      	ldr	r0, [pc, #8]	; (8001cfc <I2Cx_Init+0x4c>)
 8001cf2:	f000 ff53 	bl	8002b9c <HAL_I2C_Init>
  }
}
 8001cf6:	bf00      	nop
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	20000688 	.word	0x20000688
 8001d00:	40005400 	.word	0x40005400

08001d04 <I2Cx_WriteData>:
  * @param  Reg The target register address to write
  * @param  Value The target register value to be written 
  * @retval  None
  */
static void I2Cx_WriteData(uint16_t Addr, uint8_t Reg, uint8_t Value)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b088      	sub	sp, #32
 8001d08:	af04      	add	r7, sp, #16
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	80fb      	strh	r3, [r7, #6]
 8001d0e:	460b      	mov	r3, r1
 8001d10:	717b      	strb	r3, [r7, #5]
 8001d12:	4613      	mov	r3, r2
 8001d14:	713b      	strb	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d16:	2300      	movs	r3, #0
 8001d18:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout);
 8001d1a:	797b      	ldrb	r3, [r7, #5]
 8001d1c:	b29a      	uxth	r2, r3
 8001d1e:	4b0b      	ldr	r3, [pc, #44]	; (8001d4c <I2Cx_WriteData+0x48>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	88f9      	ldrh	r1, [r7, #6]
 8001d24:	9302      	str	r3, [sp, #8]
 8001d26:	2301      	movs	r3, #1
 8001d28:	9301      	str	r3, [sp, #4]
 8001d2a:	1d3b      	adds	r3, r7, #4
 8001d2c:	9300      	str	r3, [sp, #0]
 8001d2e:	2301      	movs	r3, #1
 8001d30:	4807      	ldr	r0, [pc, #28]	; (8001d50 <I2Cx_WriteData+0x4c>)
 8001d32:	f000 fff1 	bl	8002d18 <HAL_I2C_Mem_Write>
 8001d36:	4603      	mov	r3, r0
 8001d38:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8001d3a:	7bfb      	ldrb	r3, [r7, #15]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d001      	beq.n	8001d44 <I2Cx_WriteData+0x40>
  {
    /* Execute user timeout callback */
    I2Cx_Error();
 8001d40:	f000 f834 	bl	8001dac <I2Cx_Error>
  }
}
 8001d44:	bf00      	nop
 8001d46:	3710      	adds	r7, #16
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}
 8001d4c:	20000070 	.word	0x20000070
 8001d50:	20000688 	.word	0x20000688

08001d54 <I2Cx_ReadData>:
  * @param  Addr Device address on BUS Bus.  
  * @param  Reg The target register address to write
  * @retval Data read at register @
  */
static uint8_t I2Cx_ReadData(uint16_t Addr, uint8_t Reg)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b088      	sub	sp, #32
 8001d58:	af04      	add	r7, sp, #16
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	460a      	mov	r2, r1
 8001d5e:	80fb      	strh	r3, [r7, #6]
 8001d60:	4613      	mov	r3, r2
 8001d62:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 8001d64:	2300      	movs	r3, #0
 8001d66:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	73bb      	strb	r3, [r7, #14]
  
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2cxTimeout);
 8001d6c:	797b      	ldrb	r3, [r7, #5]
 8001d6e:	b29a      	uxth	r2, r3
 8001d70:	4b0c      	ldr	r3, [pc, #48]	; (8001da4 <I2Cx_ReadData+0x50>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	88f9      	ldrh	r1, [r7, #6]
 8001d76:	9302      	str	r3, [sp, #8]
 8001d78:	2301      	movs	r3, #1
 8001d7a:	9301      	str	r3, [sp, #4]
 8001d7c:	f107 030e 	add.w	r3, r7, #14
 8001d80:	9300      	str	r3, [sp, #0]
 8001d82:	2301      	movs	r3, #1
 8001d84:	4808      	ldr	r0, [pc, #32]	; (8001da8 <I2Cx_ReadData+0x54>)
 8001d86:	f001 f8db 	bl	8002f40 <HAL_I2C_Mem_Read>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	73fb      	strb	r3, [r7, #15]
 
  /* Check the communication status */
  if(status != HAL_OK)
 8001d8e:	7bfb      	ldrb	r3, [r7, #15]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d001      	beq.n	8001d98 <I2Cx_ReadData+0x44>
  {
    /* Execute user timeout callback */
    I2Cx_Error();
 8001d94:	f000 f80a 	bl	8001dac <I2Cx_Error>
  
  }
  return value;
 8001d98:	7bbb      	ldrb	r3, [r7, #14]
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	3710      	adds	r7, #16
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	20000070 	.word	0x20000070
 8001da8:	20000688 	.word	0x20000688

08001dac <I2Cx_Error>:
/**
  * @brief I2C3 error treatment function
  * @retval None
  */
static void I2Cx_Error (void)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	af00      	add	r7, sp, #0
  /* De-initialize the I2C comunication BUS */
  HAL_I2C_DeInit(&I2cHandle);
 8001db0:	4803      	ldr	r0, [pc, #12]	; (8001dc0 <I2Cx_Error+0x14>)
 8001db2:	f000 ff82 	bl	8002cba <HAL_I2C_DeInit>
  
  /* Re- Initiaize the I2C comunication BUS */
  I2Cx_Init();
 8001db6:	f7ff ff7b 	bl	8001cb0 <I2Cx_Init>
}
 8001dba:	bf00      	nop
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	20000688 	.word	0x20000688

08001dc4 <SPIx_Init>:
/**
  * @brief SPIx Bus initialization
  * @retval None
  */
static void SPIx_Init(void)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8001dc8:	481a      	ldr	r0, [pc, #104]	; (8001e34 <SPIx_Init+0x70>)
 8001dca:	f003 fd1c 	bl	8005806 <HAL_SPI_GetState>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d12c      	bne.n	8001e2e <SPIx_Init+0x6a>
  {
    /* SPI Config */
    SpiHandle.Instance = DISCOVERY_SPIx;
 8001dd4:	4b17      	ldr	r3, [pc, #92]	; (8001e34 <SPIx_Init+0x70>)
 8001dd6:	4a18      	ldr	r2, [pc, #96]	; (8001e38 <SPIx_Init+0x74>)
 8001dd8:	601a      	str	r2, [r3, #0]
      to verify these constraints:
      ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
      l3gd20 SPI interface max baudrate is 10MHz for write/read
      PCLK2 frequency is set to 90 MHz 
  */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001dda:	4b16      	ldr	r3, [pc, #88]	; (8001e34 <SPIx_Init+0x70>)
 8001ddc:	2218      	movs	r2, #24
 8001dde:	61da      	str	r2, [r3, #28]
    SpiHandle.Init.Direction = SPI_DIRECTION_2LINES; 
 8001de0:	4b14      	ldr	r3, [pc, #80]	; (8001e34 <SPIx_Init+0x70>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001de6:	4b13      	ldr	r3, [pc, #76]	; (8001e34 <SPIx_Init+0x70>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001dec:	4b11      	ldr	r3, [pc, #68]	; (8001e34 <SPIx_Init+0x70>)
 8001dee:	2200      	movs	r2, #0
 8001df0:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001df2:	4b10      	ldr	r3, [pc, #64]	; (8001e34 <SPIx_Init+0x70>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial = 7;
 8001df8:	4b0e      	ldr	r3, [pc, #56]	; (8001e34 <SPIx_Init+0x70>)
 8001dfa:	2207      	movs	r2, #7
 8001dfc:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize = SPI_DATASIZE_8BIT;
 8001dfe:	4b0d      	ldr	r3, [pc, #52]	; (8001e34 <SPIx_Init+0x70>)
 8001e00:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001e04:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001e06:	4b0b      	ldr	r3, [pc, #44]	; (8001e34 <SPIx_Init+0x70>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS = SPI_NSS_SOFT;
 8001e0c:	4b09      	ldr	r3, [pc, #36]	; (8001e34 <SPIx_Init+0x70>)
 8001e0e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e12:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode = SPI_TIMODE_DISABLE;
 8001e14:	4b07      	ldr	r3, [pc, #28]	; (8001e34 <SPIx_Init+0x70>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode = SPI_MODE_MASTER;
 8001e1a:	4b06      	ldr	r3, [pc, #24]	; (8001e34 <SPIx_Init+0x70>)
 8001e1c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001e20:	605a      	str	r2, [r3, #4]

    SPIx_MspInit(&SpiHandle);
 8001e22:	4804      	ldr	r0, [pc, #16]	; (8001e34 <SPIx_Init+0x70>)
 8001e24:	f000 f836 	bl	8001e94 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8001e28:	4802      	ldr	r0, [pc, #8]	; (8001e34 <SPIx_Init+0x70>)
 8001e2a:	f003 f9f7 	bl	800521c <HAL_SPI_Init>
  }
}
 8001e2e:	bf00      	nop
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	20000624 	.word	0x20000624
 8001e38:	40013000 	.word	0x40013000

08001e3c <SPIx_WriteRead>:
  *         from the SPI bus.
  * @param  Byte Byte send.
  * @retval The received byte value
  */
static uint8_t SPIx_WriteRead(uint8_t Byte)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b086      	sub	sp, #24
 8001e40:	af02      	add	r7, sp, #8
 8001e42:	4603      	mov	r3, r0
 8001e44:	71fb      	strb	r3, [r7, #7]

  uint8_t receivedbyte = 0;
 8001e46:	2300      	movs	r3, #0
 8001e48:	73fb      	strb	r3, [r7, #15]
  
  /* Send a Byte through the SPI peripheral */
  /* Read byte from the SPI bus */
  if(HAL_SPI_TransmitReceive(&SpiHandle, (uint8_t*) &Byte, (uint8_t*) &receivedbyte, 1, SpixTimeout) != HAL_OK)
 8001e4a:	4b0a      	ldr	r3, [pc, #40]	; (8001e74 <SPIx_WriteRead+0x38>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f107 020f 	add.w	r2, r7, #15
 8001e52:	1df9      	adds	r1, r7, #7
 8001e54:	9300      	str	r3, [sp, #0]
 8001e56:	2301      	movs	r3, #1
 8001e58:	4807      	ldr	r0, [pc, #28]	; (8001e78 <SPIx_WriteRead+0x3c>)
 8001e5a:	f003 fab2 	bl	80053c2 <HAL_SPI_TransmitReceive>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d001      	beq.n	8001e68 <SPIx_WriteRead+0x2c>
  {
    SPIx_Error();
 8001e64:	f000 f80a 	bl	8001e7c <SPIx_Error>
  }
  
  return receivedbyte;
 8001e68:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	3710      	adds	r7, #16
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	2000006c 	.word	0x2000006c
 8001e78:	20000624 	.word	0x20000624

08001e7c <SPIx_Error>:
/**
  * @brief SPIx error treatment function
  * @retval None
  */
static void SPIx_Error (void)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	af00      	add	r7, sp, #0
  /* De-initialize the SPI comunication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8001e80:	4803      	ldr	r0, [pc, #12]	; (8001e90 <SPIx_Error+0x14>)
 8001e82:	f003 fa76 	bl	8005372 <HAL_SPI_DeInit>
  
  /* Re- Initiaize the SPI comunication BUS */
  SPIx_Init();
 8001e86:	f7ff ff9d 	bl	8001dc4 <SPIx_Init>
}
 8001e8a:	bf00      	nop
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	20000624 	.word	0x20000624

08001e94 <SPIx_MspInit>:
  * @brief SPI MSP Init
  * @param hspi SPI handle
  * @retval None
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b08a      	sub	sp, #40	; 0x28
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPI1 clock  */
  DISCOVERY_SPIx_CLK_ENABLE();
 8001e9c:	4b16      	ldr	r3, [pc, #88]	; (8001ef8 <SPIx_MspInit+0x64>)
 8001e9e:	699b      	ldr	r3, [r3, #24]
 8001ea0:	4a15      	ldr	r2, [pc, #84]	; (8001ef8 <SPIx_MspInit+0x64>)
 8001ea2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001ea6:	6193      	str	r3, [r2, #24]
 8001ea8:	4b13      	ldr	r3, [pc, #76]	; (8001ef8 <SPIx_MspInit+0x64>)
 8001eaa:	699b      	ldr	r3, [r3, #24]
 8001eac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001eb0:	613b      	str	r3, [r7, #16]
 8001eb2:	693b      	ldr	r3, [r7, #16]

  /* enable SPI1 gpio clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8001eb4:	4b10      	ldr	r3, [pc, #64]	; (8001ef8 <SPIx_MspInit+0x64>)
 8001eb6:	695b      	ldr	r3, [r3, #20]
 8001eb8:	4a0f      	ldr	r2, [pc, #60]	; (8001ef8 <SPIx_MspInit+0x64>)
 8001eba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ebe:	6153      	str	r3, [r2, #20]
 8001ec0:	4b0d      	ldr	r3, [pc, #52]	; (8001ef8 <SPIx_MspInit+0x64>)
 8001ec2:	695b      	ldr	r3, [r3, #20]
 8001ec4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ec8:	60fb      	str	r3, [r7, #12]
 8001eca:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI1 SCK, MOSI and MISO */
  GPIO_InitStructure.Pin = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 8001ecc:	23e0      	movs	r3, #224	; 0xe0
 8001ece:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8001ed0:	2302      	movs	r3, #2
 8001ed2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull  = GPIO_NOPULL; /* or GPIO_PULLDOWN */
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ed8:	2303      	movs	r3, #3
 8001eda:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 8001edc:	2305      	movs	r3, #5
 8001ede:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 8001ee0:	f107 0314 	add.w	r3, r7, #20
 8001ee4:	4619      	mov	r1, r3
 8001ee6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001eea:	f000 fbe9 	bl	80026c0 <HAL_GPIO_Init>
}
 8001eee:	bf00      	nop
 8001ef0:	3728      	adds	r7, #40	; 0x28
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	bf00      	nop
 8001ef8:	40021000 	.word	0x40021000

08001efc <GYRO_IO_Init>:
/**
  * @brief  Configures the GYROSCOPE SPI interface.
  * @retval None
  */
void GYRO_IO_Init(void)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b088      	sub	sp, #32
 8001f00:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Configure the Gyroscope Control pins ------------------------------------------*/
  /* Enable CS GPIO clock and  Configure GPIO PIN for Gyroscope Chip select */  
  GYRO_CS_GPIO_CLK_ENABLE();  
 8001f02:	4b1f      	ldr	r3, [pc, #124]	; (8001f80 <GYRO_IO_Init+0x84>)
 8001f04:	695b      	ldr	r3, [r3, #20]
 8001f06:	4a1e      	ldr	r2, [pc, #120]	; (8001f80 <GYRO_IO_Init+0x84>)
 8001f08:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001f0c:	6153      	str	r3, [r2, #20]
 8001f0e:	4b1c      	ldr	r3, [pc, #112]	; (8001f80 <GYRO_IO_Init+0x84>)
 8001f10:	695b      	ldr	r3, [r3, #20]
 8001f12:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f16:	60bb      	str	r3, [r7, #8]
 8001f18:	68bb      	ldr	r3, [r7, #8]
  GPIO_InitStructure.Pin = GYRO_CS_PIN;
 8001f1a:	2308      	movs	r3, #8
 8001f1c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8001f22:	2300      	movs	r3, #0
 8001f24:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f26:	2303      	movs	r3, #3
 8001f28:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GYRO_CS_GPIO_PORT, &GPIO_InitStructure);
 8001f2a:	f107 030c 	add.w	r3, r7, #12
 8001f2e:	4619      	mov	r1, r3
 8001f30:	4814      	ldr	r0, [pc, #80]	; (8001f84 <GYRO_IO_Init+0x88>)
 8001f32:	f000 fbc5 	bl	80026c0 <HAL_GPIO_Init>

  /* Deselect : Chip Select high */
  GYRO_CS_HIGH();
 8001f36:	2201      	movs	r2, #1
 8001f38:	2108      	movs	r1, #8
 8001f3a:	4812      	ldr	r0, [pc, #72]	; (8001f84 <GYRO_IO_Init+0x88>)
 8001f3c:	f000 fe16 	bl	8002b6c <HAL_GPIO_WritePin>

  /* Enable INT1, INT2 GPIO clock and Configure GPIO PINs to detect Interrupts */
  GYRO_INT_GPIO_CLK_ENABLE();
 8001f40:	4b0f      	ldr	r3, [pc, #60]	; (8001f80 <GYRO_IO_Init+0x84>)
 8001f42:	695b      	ldr	r3, [r3, #20]
 8001f44:	4a0e      	ldr	r2, [pc, #56]	; (8001f80 <GYRO_IO_Init+0x84>)
 8001f46:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001f4a:	6153      	str	r3, [r2, #20]
 8001f4c:	4b0c      	ldr	r3, [pc, #48]	; (8001f80 <GYRO_IO_Init+0x84>)
 8001f4e:	695b      	ldr	r3, [r3, #20]
 8001f50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f54:	607b      	str	r3, [r7, #4]
 8001f56:	687b      	ldr	r3, [r7, #4]
  GPIO_InitStructure.Pin = GYRO_INT1_PIN | GYRO_INT2_PIN;
 8001f58:	2303      	movs	r3, #3
 8001f5a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f60:	2303      	movs	r3, #3
 8001f62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull= GPIO_NOPULL;
 8001f64:	2300      	movs	r3, #0
 8001f66:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GYRO_INT_GPIO_PORT, &GPIO_InitStructure);
 8001f68:	f107 030c 	add.w	r3, r7, #12
 8001f6c:	4619      	mov	r1, r3
 8001f6e:	4805      	ldr	r0, [pc, #20]	; (8001f84 <GYRO_IO_Init+0x88>)
 8001f70:	f000 fba6 	bl	80026c0 <HAL_GPIO_Init>
  
  SPIx_Init();
 8001f74:	f7ff ff26 	bl	8001dc4 <SPIx_Init>
}
 8001f78:	bf00      	nop
 8001f7a:	3720      	adds	r7, #32
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}
 8001f80:	40021000 	.word	0x40021000
 8001f84:	48001000 	.word	0x48001000

08001f88 <GYRO_IO_Write>:
  * @param  WriteAddr GYROSCOPE's internal address to write to.
  * @param  NumByteToWrite Number of bytes to write.
  * @retval None
  */
void GYRO_IO_Write(uint8_t* pBuffer, uint8_t WriteAddr, uint16_t NumByteToWrite)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b082      	sub	sp, #8
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
 8001f90:	460b      	mov	r3, r1
 8001f92:	70fb      	strb	r3, [r7, #3]
 8001f94:	4613      	mov	r3, r2
 8001f96:	803b      	strh	r3, [r7, #0]
  /* Configure the MS bit: 
       - When 0, the address will remain unchanged in multiple read/write commands.
       - When 1, the address will be auto incremented in multiple read/write commands.
  */
  if(NumByteToWrite > 0x01)
 8001f98:	883b      	ldrh	r3, [r7, #0]
 8001f9a:	2b01      	cmp	r3, #1
 8001f9c:	d903      	bls.n	8001fa6 <GYRO_IO_Write+0x1e>
  {
    WriteAddr |= (uint8_t)MULTIPLEBYTE_CMD;
 8001f9e:	78fb      	ldrb	r3, [r7, #3]
 8001fa0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001fa4:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	2108      	movs	r1, #8
 8001faa:	480f      	ldr	r0, [pc, #60]	; (8001fe8 <GYRO_IO_Write+0x60>)
 8001fac:	f000 fdde 	bl	8002b6c <HAL_GPIO_WritePin>
  
  /* Send the Address of the indexed register */
  SPIx_WriteRead(WriteAddr);
 8001fb0:	78fb      	ldrb	r3, [r7, #3]
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f7ff ff42 	bl	8001e3c <SPIx_WriteRead>
  
  /* Send the data that will be written into the device (MSB First) */
  while(NumByteToWrite >= 0x01)
 8001fb8:	e00a      	b.n	8001fd0 <GYRO_IO_Write+0x48>
  {
    SPIx_WriteRead(*pBuffer);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	781b      	ldrb	r3, [r3, #0]
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f7ff ff3c 	bl	8001e3c <SPIx_WriteRead>
    NumByteToWrite--;
 8001fc4:	883b      	ldrh	r3, [r7, #0]
 8001fc6:	3b01      	subs	r3, #1
 8001fc8:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	3301      	adds	r3, #1
 8001fce:	607b      	str	r3, [r7, #4]
  while(NumByteToWrite >= 0x01)
 8001fd0:	883b      	ldrh	r3, [r7, #0]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d1f1      	bne.n	8001fba <GYRO_IO_Write+0x32>
  }
  
  /* Set chip select High at the end of the transmission */ 
  GYRO_CS_HIGH();
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	2108      	movs	r1, #8
 8001fda:	4803      	ldr	r0, [pc, #12]	; (8001fe8 <GYRO_IO_Write+0x60>)
 8001fdc:	f000 fdc6 	bl	8002b6c <HAL_GPIO_WritePin>
}
 8001fe0:	bf00      	nop
 8001fe2:	3708      	adds	r7, #8
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}
 8001fe8:	48001000 	.word	0x48001000

08001fec <GYRO_IO_Read>:
  * @param  ReadAddr GYROSCOPE's internal address to read from.
  * @param  NumByteToRead number of bytes to read from the GYROSCOPE.
  * @retval None
  */
void GYRO_IO_Read(uint8_t* pBuffer, uint8_t ReadAddr, uint16_t NumByteToRead)
{  
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b082      	sub	sp, #8
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
 8001ff4:	460b      	mov	r3, r1
 8001ff6:	70fb      	strb	r3, [r7, #3]
 8001ff8:	4613      	mov	r3, r2
 8001ffa:	803b      	strh	r3, [r7, #0]
  if(NumByteToRead > 0x01)
 8001ffc:	883b      	ldrh	r3, [r7, #0]
 8001ffe:	2b01      	cmp	r3, #1
 8002000:	d904      	bls.n	800200c <GYRO_IO_Read+0x20>
  {
    ReadAddr |= (uint8_t)(READWRITE_CMD | MULTIPLEBYTE_CMD);
 8002002:	78fb      	ldrb	r3, [r7, #3]
 8002004:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8002008:	70fb      	strb	r3, [r7, #3]
 800200a:	e003      	b.n	8002014 <GYRO_IO_Read+0x28>
  }
  else
  {
    ReadAddr |= (uint8_t)READWRITE_CMD;
 800200c:	78fb      	ldrb	r3, [r7, #3]
 800200e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002012:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 8002014:	2200      	movs	r2, #0
 8002016:	2108      	movs	r1, #8
 8002018:	4810      	ldr	r0, [pc, #64]	; (800205c <GYRO_IO_Read+0x70>)
 800201a:	f000 fda7 	bl	8002b6c <HAL_GPIO_WritePin>
  
  /* Send the Address of the indexed register */
  SPIx_WriteRead(ReadAddr);
 800201e:	78fb      	ldrb	r3, [r7, #3]
 8002020:	4618      	mov	r0, r3
 8002022:	f7ff ff0b 	bl	8001e3c <SPIx_WriteRead>
  
  /* Receive the data that will be read from the device (MSB First) */
  while(NumByteToRead > 0x00)
 8002026:	e00c      	b.n	8002042 <GYRO_IO_Read+0x56>
  {
    /* Send dummy byte (0x00) to generate the SPI clock to GYROSCOPE (Slave device) */
    *pBuffer = SPIx_WriteRead(DUMMY_BYTE);
 8002028:	2000      	movs	r0, #0
 800202a:	f7ff ff07 	bl	8001e3c <SPIx_WriteRead>
 800202e:	4603      	mov	r3, r0
 8002030:	461a      	mov	r2, r3
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	701a      	strb	r2, [r3, #0]
    NumByteToRead--;
 8002036:	883b      	ldrh	r3, [r7, #0]
 8002038:	3b01      	subs	r3, #1
 800203a:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	3301      	adds	r3, #1
 8002040:	607b      	str	r3, [r7, #4]
  while(NumByteToRead > 0x00)
 8002042:	883b      	ldrh	r3, [r7, #0]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d1ef      	bne.n	8002028 <GYRO_IO_Read+0x3c>
  }
  
  /* Set chip select High at the end of the transmission */ 
  GYRO_CS_HIGH();
 8002048:	2201      	movs	r2, #1
 800204a:	2108      	movs	r1, #8
 800204c:	4803      	ldr	r0, [pc, #12]	; (800205c <GYRO_IO_Read+0x70>)
 800204e:	f000 fd8d 	bl	8002b6c <HAL_GPIO_WritePin>
}  
 8002052:	bf00      	nop
 8002054:	3708      	adds	r7, #8
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}
 800205a:	bf00      	nop
 800205c:	48001000 	.word	0x48001000

08002060 <COMPASSACCELERO_IO_Init>:
/**
  * @brief  Configures COMPASS / ACCELEROMETER I2C interface.
  * @retval None
  */
void COMPASSACCELERO_IO_Init(void)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b088      	sub	sp, #32
 8002064:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable DRDY clock */
  ACCELERO_DRDY_GPIO_CLK_ENABLE();
 8002066:	4b21      	ldr	r3, [pc, #132]	; (80020ec <COMPASSACCELERO_IO_Init+0x8c>)
 8002068:	695b      	ldr	r3, [r3, #20]
 800206a:	4a20      	ldr	r2, [pc, #128]	; (80020ec <COMPASSACCELERO_IO_Init+0x8c>)
 800206c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002070:	6153      	str	r3, [r2, #20]
 8002072:	4b1e      	ldr	r3, [pc, #120]	; (80020ec <COMPASSACCELERO_IO_Init+0x8c>)
 8002074:	695b      	ldr	r3, [r3, #20]
 8002076:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800207a:	60bb      	str	r3, [r7, #8]
 800207c:	68bb      	ldr	r3, [r7, #8]
  
  /* Enable INT1 & INT2 GPIO clock */
  ACCELERO_INT_GPIO_CLK_ENABLE();
 800207e:	4b1b      	ldr	r3, [pc, #108]	; (80020ec <COMPASSACCELERO_IO_Init+0x8c>)
 8002080:	695b      	ldr	r3, [r3, #20]
 8002082:	4a1a      	ldr	r2, [pc, #104]	; (80020ec <COMPASSACCELERO_IO_Init+0x8c>)
 8002084:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002088:	6153      	str	r3, [r2, #20]
 800208a:	4b18      	ldr	r3, [pc, #96]	; (80020ec <COMPASSACCELERO_IO_Init+0x8c>)
 800208c:	695b      	ldr	r3, [r3, #20]
 800208e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002092:	607b      	str	r3, [r7, #4]
 8002094:	687b      	ldr	r3, [r7, #4]
  
  /* Mems DRDY pin configuration */
  GPIO_InitStructure.Pin = ACCELERO_DRDY_PIN;
 8002096:	2304      	movs	r3, #4
 8002098:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 800209a:	2300      	movs	r3, #0
 800209c:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 800209e:	2300      	movs	r3, #0
 80020a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 80020a2:	2303      	movs	r3, #3
 80020a4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ACCELERO_DRDY_GPIO_PORT, &GPIO_InitStructure);
 80020a6:	f107 030c 	add.w	r3, r7, #12
 80020aa:	4619      	mov	r1, r3
 80020ac:	4810      	ldr	r0, [pc, #64]	; (80020f0 <COMPASSACCELERO_IO_Init+0x90>)
 80020ae:	f000 fb07 	bl	80026c0 <HAL_GPIO_Init>
  
  /* Enable and set Button EXTI Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(ACCELERO_DRDY_EXTI_IRQn, 0x0F, 0x00);
 80020b2:	2200      	movs	r2, #0
 80020b4:	210f      	movs	r1, #15
 80020b6:	2008      	movs	r0, #8
 80020b8:	f000 facb 	bl	8002652 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ACCELERO_DRDY_EXTI_IRQn);
 80020bc:	2008      	movs	r0, #8
 80020be:	f000 fae4 	bl	800268a <HAL_NVIC_EnableIRQ>
  
  /* Configure GPIO PINs to detect Interrupts */
  GPIO_InitStructure.Pin = ACCELERO_INT1_PIN | ACCELERO_INT2_PIN;
 80020c2:	2330      	movs	r3, #48	; 0x30
 80020c4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 80020c6:	2300      	movs	r3, #0
 80020c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 80020ca:	2303      	movs	r3, #3
 80020cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 80020ce:	2300      	movs	r3, #0
 80020d0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(ACCELERO_INT_GPIO_PORT, &GPIO_InitStructure);
 80020d2:	f107 030c 	add.w	r3, r7, #12
 80020d6:	4619      	mov	r1, r3
 80020d8:	4805      	ldr	r0, [pc, #20]	; (80020f0 <COMPASSACCELERO_IO_Init+0x90>)
 80020da:	f000 faf1 	bl	80026c0 <HAL_GPIO_Init>
  
  I2Cx_Init();
 80020de:	f7ff fde7 	bl	8001cb0 <I2Cx_Init>
}
 80020e2:	bf00      	nop
 80020e4:	3720      	adds	r7, #32
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}
 80020ea:	bf00      	nop
 80020ec:	40021000 	.word	0x40021000
 80020f0:	48001000 	.word	0x48001000

080020f4 <COMPASSACCELERO_IO_ITConfig>:
/**
  * @brief  Configures COMPASS / ACCELERO click IT
  * @retval None
  */
void COMPASSACCELERO_IO_ITConfig(void)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b086      	sub	sp, #24
 80020f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable INT1 & INT2 GPIO clock */
  ACCELERO_INT_GPIO_CLK_ENABLE();
 80020fa:	4b13      	ldr	r3, [pc, #76]	; (8002148 <COMPASSACCELERO_IO_ITConfig+0x54>)
 80020fc:	695b      	ldr	r3, [r3, #20]
 80020fe:	4a12      	ldr	r2, [pc, #72]	; (8002148 <COMPASSACCELERO_IO_ITConfig+0x54>)
 8002100:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002104:	6153      	str	r3, [r2, #20]
 8002106:	4b10      	ldr	r3, [pc, #64]	; (8002148 <COMPASSACCELERO_IO_ITConfig+0x54>)
 8002108:	695b      	ldr	r3, [r3, #20]
 800210a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800210e:	603b      	str	r3, [r7, #0]
 8002110:	683b      	ldr	r3, [r7, #0]
  
  /* Configure GPIO PINs to detect Interrupts */
  GPIO_InitStructure.Pin = ACCELERO_INT1_PIN | ACCELERO_INT2_PIN;
 8002112:	2330      	movs	r3, #48	; 0x30
 8002114:	607b      	str	r3, [r7, #4]
  GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING;
 8002116:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800211a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 800211c:	2303      	movs	r3, #3
 800211e:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8002120:	2300      	movs	r3, #0
 8002122:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(ACCELERO_INT_GPIO_PORT, &GPIO_InitStructure);
 8002124:	1d3b      	adds	r3, r7, #4
 8002126:	4619      	mov	r1, r3
 8002128:	4808      	ldr	r0, [pc, #32]	; (800214c <COMPASSACCELERO_IO_ITConfig+0x58>)
 800212a:	f000 fac9 	bl	80026c0 <HAL_GPIO_Init>
  
  /* Enable and set Button EXTI Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(ACCELERO_INT1_EXTI_IRQn, 0x0F, 0x00);
 800212e:	2200      	movs	r2, #0
 8002130:	210f      	movs	r1, #15
 8002132:	200a      	movs	r0, #10
 8002134:	f000 fa8d 	bl	8002652 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ACCELERO_INT1_EXTI_IRQn);
 8002138:	200a      	movs	r0, #10
 800213a:	f000 faa6 	bl	800268a <HAL_NVIC_EnableIRQ>
  
}
 800213e:	bf00      	nop
 8002140:	3718      	adds	r7, #24
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}
 8002146:	bf00      	nop
 8002148:	40021000 	.word	0x40021000
 800214c:	48001000 	.word	0x48001000

08002150 <COMPASSACCELERO_IO_Write>:
  * @param  RegisterAddr specifies the COMPASS / ACCELEROMETER register to be written.
  * @param  Value Data to be written
  * @retval   None
 */
void COMPASSACCELERO_IO_Write(uint16_t DeviceAddr, uint8_t RegisterAddr, uint8_t Value)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b082      	sub	sp, #8
 8002154:	af00      	add	r7, sp, #0
 8002156:	4603      	mov	r3, r0
 8002158:	80fb      	strh	r3, [r7, #6]
 800215a:	460b      	mov	r3, r1
 800215c:	717b      	strb	r3, [r7, #5]
 800215e:	4613      	mov	r3, r2
 8002160:	713b      	strb	r3, [r7, #4]
  /* call I2Cx Read data bus function */
  I2Cx_WriteData(DeviceAddr, RegisterAddr, Value);
 8002162:	793a      	ldrb	r2, [r7, #4]
 8002164:	7979      	ldrb	r1, [r7, #5]
 8002166:	88fb      	ldrh	r3, [r7, #6]
 8002168:	4618      	mov	r0, r3
 800216a:	f7ff fdcb 	bl	8001d04 <I2Cx_WriteData>
}
 800216e:	bf00      	nop
 8002170:	3708      	adds	r7, #8
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}

08002176 <COMPASSACCELERO_IO_Read>:
  * @param  DeviceAddr specifies the slave address to be programmed(ACC_I2C_ADDRESS or MAG_I2C_ADDRESS).
  * @param  RegisterAddr specifies the COMPASS / ACCELEROMETER internal address register to read from
  * @retval ACCELEROMETER register value
  */ 
uint8_t COMPASSACCELERO_IO_Read(uint16_t DeviceAddr, uint8_t RegisterAddr)
{
 8002176:	b580      	push	{r7, lr}
 8002178:	b082      	sub	sp, #8
 800217a:	af00      	add	r7, sp, #0
 800217c:	4603      	mov	r3, r0
 800217e:	460a      	mov	r2, r1
 8002180:	80fb      	strh	r3, [r7, #6]
 8002182:	4613      	mov	r3, r2
 8002184:	717b      	strb	r3, [r7, #5]
  /* call I2Cx Read data bus function */   
  return I2Cx_ReadData(DeviceAddr, RegisterAddr);
 8002186:	797a      	ldrb	r2, [r7, #5]
 8002188:	88fb      	ldrh	r3, [r7, #6]
 800218a:	4611      	mov	r1, r2
 800218c:	4618      	mov	r0, r3
 800218e:	f7ff fde1 	bl	8001d54 <I2Cx_ReadData>
 8002192:	4603      	mov	r3, r0
}
 8002194:	4618      	mov	r0, r3
 8002196:	3708      	adds	r7, #8
 8002198:	46bd      	mov	sp, r7
 800219a:	bd80      	pop	{r7, pc}

0800219c <BSP_ACCELERO_Init>:
/* Exported functions ---------------------------------------------------------*/
/** @addtogroup STM32F3_DISCOVERY_ACCELEROMETER_Exported_Functions
  * @{
  */
uint8_t BSP_ACCELERO_Init(void)
{  
 800219c:	b580      	push	{r7, lr}
 800219e:	b086      	sub	sp, #24
 80021a0:	af00      	add	r7, sp, #0
  uint8_t ret = ACCELERO_ERROR;
 80021a2:	2301      	movs	r3, #1
 80021a4:	75fb      	strb	r3, [r7, #23]
  uint16_t ctrl = 0x0000;
 80021a6:	2300      	movs	r3, #0
 80021a8:	82bb      	strh	r3, [r7, #20]
  ACCELERO_InitTypeDef LSM303DLHC_InitStructure;
  ACCELERO_FilterConfigTypeDef LSM303DLHC_FilterStructure;
 
  if(Lsm303dlhcDrv.ReadID() == I_AM_LMS303DLHC)
 80021aa:	4b2e      	ldr	r3, [pc, #184]	; (8002264 <BSP_ACCELERO_Init+0xc8>)
 80021ac:	689b      	ldr	r3, [r3, #8]
 80021ae:	4798      	blx	r3
 80021b0:	4603      	mov	r3, r0
 80021b2:	2b33      	cmp	r3, #51	; 0x33
 80021b4:	d14f      	bne.n	8002256 <BSP_ACCELERO_Init+0xba>
  {
    /* Initialize the gyroscope driver structure */
    AccelerometerDrv = &Lsm303dlhcDrv;
 80021b6:	4b2c      	ldr	r3, [pc, #176]	; (8002268 <BSP_ACCELERO_Init+0xcc>)
 80021b8:	4a2a      	ldr	r2, [pc, #168]	; (8002264 <BSP_ACCELERO_Init+0xc8>)
 80021ba:	601a      	str	r2, [r3, #0]
  
  /* MEMS configuration ------------------------------------------------------*/
   /* Fill the accelerometer structure */
    LSM303DLHC_InitStructure.Power_Mode = LSM303DLHC_NORMAL_MODE;
 80021bc:	2300      	movs	r3, #0
 80021be:	733b      	strb	r3, [r7, #12]
    LSM303DLHC_InitStructure.AccOutput_DataRate = LSM303DLHC_ODR_50_HZ;
 80021c0:	2340      	movs	r3, #64	; 0x40
 80021c2:	737b      	strb	r3, [r7, #13]
    LSM303DLHC_InitStructure.Axes_Enable= LSM303DLHC_AXES_ENABLE;
 80021c4:	2307      	movs	r3, #7
 80021c6:	73bb      	strb	r3, [r7, #14]
    LSM303DLHC_InitStructure.AccFull_Scale = LSM303DLHC_FULLSCALE_2G;
 80021c8:	2300      	movs	r3, #0
 80021ca:	74bb      	strb	r3, [r7, #18]
    LSM303DLHC_InitStructure.BlockData_Update = LSM303DLHC_BlockUpdate_Continous;
 80021cc:	2300      	movs	r3, #0
 80021ce:	743b      	strb	r3, [r7, #16]
    LSM303DLHC_InitStructure.Endianness=LSM303DLHC_BLE_LSB;
 80021d0:	2300      	movs	r3, #0
 80021d2:	747b      	strb	r3, [r7, #17]
    LSM303DLHC_InitStructure.High_Resolution=LSM303DLHC_HR_ENABLE;
 80021d4:	2308      	movs	r3, #8
 80021d6:	73fb      	strb	r3, [r7, #15]
    
    /* Configure MEMS: data rate, power mode, full scale and axes */
    ctrl |= (LSM303DLHC_InitStructure.Power_Mode | LSM303DLHC_InitStructure.AccOutput_DataRate | \
 80021d8:	7b3a      	ldrb	r2, [r7, #12]
 80021da:	7b7b      	ldrb	r3, [r7, #13]
 80021dc:	4313      	orrs	r3, r2
 80021de:	b2da      	uxtb	r2, r3
                       LSM303DLHC_InitStructure.Axes_Enable);
 80021e0:	7bbb      	ldrb	r3, [r7, #14]
    ctrl |= (LSM303DLHC_InitStructure.Power_Mode | LSM303DLHC_InitStructure.AccOutput_DataRate | \
 80021e2:	4313      	orrs	r3, r2
 80021e4:	b2db      	uxtb	r3, r3
 80021e6:	b29a      	uxth	r2, r3
 80021e8:	8abb      	ldrh	r3, [r7, #20]
 80021ea:	4313      	orrs	r3, r2
 80021ec:	82bb      	strh	r3, [r7, #20]
    
    ctrl |= ((LSM303DLHC_InitStructure.BlockData_Update | LSM303DLHC_InitStructure.Endianness | \
 80021ee:	7c3a      	ldrb	r2, [r7, #16]
 80021f0:	7c7b      	ldrb	r3, [r7, #17]
                      LSM303DLHC_InitStructure.AccFull_Scale | LSM303DLHC_InitStructure.High_Resolution) << 8);
 80021f2:	4313      	orrs	r3, r2
 80021f4:	b2da      	uxtb	r2, r3
 80021f6:	7cbb      	ldrb	r3, [r7, #18]
 80021f8:	4313      	orrs	r3, r2
 80021fa:	b2da      	uxtb	r2, r3
 80021fc:	7bfb      	ldrb	r3, [r7, #15]
 80021fe:	4313      	orrs	r3, r2
 8002200:	b2db      	uxtb	r3, r3
 8002202:	021b      	lsls	r3, r3, #8
    ctrl |= ((LSM303DLHC_InitStructure.BlockData_Update | LSM303DLHC_InitStructure.Endianness | \
 8002204:	b21a      	sxth	r2, r3
 8002206:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800220a:	4313      	orrs	r3, r2
 800220c:	b21b      	sxth	r3, r3
 800220e:	82bb      	strh	r3, [r7, #20]
    
  /* Configure the accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 8002210:	4b15      	ldr	r3, [pc, #84]	; (8002268 <BSP_ACCELERO_Init+0xcc>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	8aba      	ldrh	r2, [r7, #20]
 8002218:	4610      	mov	r0, r2
 800221a:	4798      	blx	r3
  
  /* Fill the accelerometer LPF structure */
    LSM303DLHC_FilterStructure.HighPassFilter_Mode_Selection =LSM303DLHC_HPM_NORMAL_MODE;
 800221c:	2380      	movs	r3, #128	; 0x80
 800221e:	713b      	strb	r3, [r7, #4]
    LSM303DLHC_FilterStructure.HighPassFilter_CutOff_Frequency = LSM303DLHC_HPFCF_16;
 8002220:	2310      	movs	r3, #16
 8002222:	717b      	strb	r3, [r7, #5]
    LSM303DLHC_FilterStructure.HighPassFilter_AOI1 = LSM303DLHC_HPF_AOI1_DISABLE;
 8002224:	2300      	movs	r3, #0
 8002226:	71bb      	strb	r3, [r7, #6]
    LSM303DLHC_FilterStructure.HighPassFilter_AOI2 = LSM303DLHC_HPF_AOI2_DISABLE;
 8002228:	2300      	movs	r3, #0
 800222a:	71fb      	strb	r3, [r7, #7]
    
    /* Configure MEMS: mode, cutoff frquency, Filter status, Click, AOI1 and AOI2 */
    ctrl = (uint8_t) (LSM303DLHC_FilterStructure.HighPassFilter_Mode_Selection |\
 800222c:	793a      	ldrb	r2, [r7, #4]
                      LSM303DLHC_FilterStructure.HighPassFilter_CutOff_Frequency|\
 800222e:	797b      	ldrb	r3, [r7, #5]
    ctrl = (uint8_t) (LSM303DLHC_FilterStructure.HighPassFilter_Mode_Selection |\
 8002230:	4313      	orrs	r3, r2
 8002232:	b2da      	uxtb	r2, r3
                      LSM303DLHC_FilterStructure.HighPassFilter_AOI1|\
 8002234:	79bb      	ldrb	r3, [r7, #6]
    ctrl = (uint8_t) (LSM303DLHC_FilterStructure.HighPassFilter_Mode_Selection |\
 8002236:	4313      	orrs	r3, r2
 8002238:	b2da      	uxtb	r2, r3
                      LSM303DLHC_FilterStructure.HighPassFilter_AOI2);
 800223a:	79fb      	ldrb	r3, [r7, #7]
    ctrl = (uint8_t) (LSM303DLHC_FilterStructure.HighPassFilter_Mode_Selection |\
 800223c:	4313      	orrs	r3, r2
 800223e:	b2db      	uxtb	r3, r3
 8002240:	82bb      	strh	r3, [r7, #20]

  /* Configure the accelerometer LPF main parameters */
    AccelerometerDrv->FilterConfig(ctrl);
 8002242:	4b09      	ldr	r3, [pc, #36]	; (8002268 <BSP_ACCELERO_Init+0xcc>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002248:	8aba      	ldrh	r2, [r7, #20]
 800224a:	b2d2      	uxtb	r2, r2
 800224c:	4610      	mov	r0, r2
 800224e:	4798      	blx	r3

    ret = ACCELERO_OK;
 8002250:	2300      	movs	r3, #0
 8002252:	75fb      	strb	r3, [r7, #23]
 8002254:	e001      	b.n	800225a <BSP_ACCELERO_Init+0xbe>
  }  
  else
  {
    ret = ACCELERO_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800225a:	7dfb      	ldrb	r3, [r7, #23]
}
 800225c:	4618      	mov	r0, r3
 800225e:	3718      	adds	r7, #24
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}
 8002264:	20000038 	.word	0x20000038
 8002268:	200006dc 	.word	0x200006dc

0800226c <BSP_ACCELERO_GetXYZ>:
  * @param pDataXYZ Pointeur on 3 angular accelerations 
  *                 pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
* @retval None
*/
void BSP_ACCELERO_GetXYZ(int16_t *pDataXYZ)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b082      	sub	sp, #8
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  if(AccelerometerDrv->GetXYZ!= NULL)
 8002274:	4b06      	ldr	r3, [pc, #24]	; (8002290 <BSP_ACCELERO_GetXYZ+0x24>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800227a:	2b00      	cmp	r3, #0
 800227c:	d004      	beq.n	8002288 <BSP_ACCELERO_GetXYZ+0x1c>
  {   
    AccelerometerDrv->GetXYZ(pDataXYZ);
 800227e:	4b04      	ldr	r3, [pc, #16]	; (8002290 <BSP_ACCELERO_GetXYZ+0x24>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002284:	6878      	ldr	r0, [r7, #4]
 8002286:	4798      	blx	r3
  }
}
 8002288:	bf00      	nop
 800228a:	3708      	adds	r7, #8
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}
 8002290:	200006dc 	.word	0x200006dc

08002294 <BSP_GYRO_Init>:
/**
  * @brief  Set GYROSCOPE Initialization.
  * @retval GYRO_OK if no problem during initialization
  */
uint8_t BSP_GYRO_Init(void)
{  
 8002294:	b580      	push	{r7, lr}
 8002296:	b084      	sub	sp, #16
 8002298:	af00      	add	r7, sp, #0
  uint8_t ret = GYRO_ERROR;
 800229a:	2301      	movs	r3, #1
 800229c:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 800229e:	2300      	movs	r3, #0
 80022a0:	81bb      	strh	r3, [r7, #12]
  GYRO_InitTypeDef L3GD20_InitStructure;
  GYRO_FilterConfigTypeDef L3GD20_FilterStructure;

  if((L3gd20Drv.ReadID() == I_AM_L3GD20) || (L3gd20Drv.ReadID() == I_AM_L3GD20_TR))
 80022a2:	4b2d      	ldr	r3, [pc, #180]	; (8002358 <BSP_GYRO_Init+0xc4>)
 80022a4:	689b      	ldr	r3, [r3, #8]
 80022a6:	4798      	blx	r3
 80022a8:	4603      	mov	r3, r0
 80022aa:	2bd4      	cmp	r3, #212	; 0xd4
 80022ac:	d005      	beq.n	80022ba <BSP_GYRO_Init+0x26>
 80022ae:	4b2a      	ldr	r3, [pc, #168]	; (8002358 <BSP_GYRO_Init+0xc4>)
 80022b0:	689b      	ldr	r3, [r3, #8]
 80022b2:	4798      	blx	r3
 80022b4:	4603      	mov	r3, r0
 80022b6:	2bd5      	cmp	r3, #213	; 0xd5
 80022b8:	d146      	bne.n	8002348 <BSP_GYRO_Init+0xb4>
  {
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &L3gd20Drv;
 80022ba:	4b28      	ldr	r3, [pc, #160]	; (800235c <BSP_GYRO_Init+0xc8>)
 80022bc:	4a26      	ldr	r2, [pc, #152]	; (8002358 <BSP_GYRO_Init+0xc4>)
 80022be:	601a      	str	r2, [r3, #0]

    /* Configure Mems : data rate, power mode, full scale and axes */
    L3GD20_InitStructure.Power_Mode = L3GD20_MODE_ACTIVE;
 80022c0:	2308      	movs	r3, #8
 80022c2:	713b      	strb	r3, [r7, #4]
    L3GD20_InitStructure.Output_DataRate = L3GD20_OUTPUT_DATARATE_1;
 80022c4:	2300      	movs	r3, #0
 80022c6:	717b      	strb	r3, [r7, #5]
    L3GD20_InitStructure.Axes_Enable = L3GD20_AXES_ENABLE;
 80022c8:	2307      	movs	r3, #7
 80022ca:	71bb      	strb	r3, [r7, #6]
    L3GD20_InitStructure.Band_Width = L3GD20_BANDWIDTH_4;
 80022cc:	2330      	movs	r3, #48	; 0x30
 80022ce:	71fb      	strb	r3, [r7, #7]
    L3GD20_InitStructure.BlockData_Update = L3GD20_BlockDataUpdate_Continous;
 80022d0:	2300      	movs	r3, #0
 80022d2:	723b      	strb	r3, [r7, #8]
    L3GD20_InitStructure.Endianness = L3GD20_BLE_LSB;
 80022d4:	2300      	movs	r3, #0
 80022d6:	727b      	strb	r3, [r7, #9]
    L3GD20_InitStructure.Full_Scale = L3GD20_FULLSCALE_500; 
 80022d8:	2310      	movs	r3, #16
 80022da:	72bb      	strb	r3, [r7, #10]
	
    /* Configure MEMS: data rate, power mode, full scale and axes */
    ctrl = (uint16_t) (L3GD20_InitStructure.Power_Mode | L3GD20_InitStructure.Output_DataRate | \
 80022dc:	793a      	ldrb	r2, [r7, #4]
 80022de:	797b      	ldrb	r3, [r7, #5]
 80022e0:	4313      	orrs	r3, r2
 80022e2:	b2da      	uxtb	r2, r3
                      L3GD20_InitStructure.Axes_Enable | L3GD20_InitStructure.Band_Width);
 80022e4:	79bb      	ldrb	r3, [r7, #6]
    ctrl = (uint16_t) (L3GD20_InitStructure.Power_Mode | L3GD20_InitStructure.Output_DataRate | \
 80022e6:	4313      	orrs	r3, r2
 80022e8:	b2da      	uxtb	r2, r3
                      L3GD20_InitStructure.Axes_Enable | L3GD20_InitStructure.Band_Width);
 80022ea:	79fb      	ldrb	r3, [r7, #7]
    ctrl = (uint16_t) (L3GD20_InitStructure.Power_Mode | L3GD20_InitStructure.Output_DataRate | \
 80022ec:	4313      	orrs	r3, r2
 80022ee:	b2db      	uxtb	r3, r3
 80022f0:	81bb      	strh	r3, [r7, #12]
	
    ctrl |= (uint16_t) ((L3GD20_InitStructure.BlockData_Update | L3GD20_InitStructure.Endianness | \
 80022f2:	7a3a      	ldrb	r2, [r7, #8]
 80022f4:	7a7b      	ldrb	r3, [r7, #9]
 80022f6:	4313      	orrs	r3, r2
 80022f8:	b2da      	uxtb	r2, r3
                        L3GD20_InitStructure.Full_Scale) << 8);
 80022fa:	7abb      	ldrb	r3, [r7, #10]
    ctrl |= (uint16_t) ((L3GD20_InitStructure.BlockData_Update | L3GD20_InitStructure.Endianness | \
 80022fc:	4313      	orrs	r3, r2
 80022fe:	b2db      	uxtb	r3, r3
 8002300:	b29b      	uxth	r3, r3
 8002302:	021b      	lsls	r3, r3, #8
 8002304:	b29a      	uxth	r2, r3
 8002306:	89bb      	ldrh	r3, [r7, #12]
 8002308:	4313      	orrs	r3, r2
 800230a:	81bb      	strh	r3, [r7, #12]

    /* L3gd20 Init */	 
    GyroscopeDrv->Init(ctrl);
 800230c:	4b13      	ldr	r3, [pc, #76]	; (800235c <BSP_GYRO_Init+0xc8>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	89ba      	ldrh	r2, [r7, #12]
 8002314:	4610      	mov	r0, r2
 8002316:	4798      	blx	r3
  
    L3GD20_FilterStructure.HighPassFilter_Mode_Selection =L3GD20_HPM_NORMAL_MODE_RES;
 8002318:	2300      	movs	r3, #0
 800231a:	703b      	strb	r3, [r7, #0]
    L3GD20_FilterStructure.HighPassFilter_CutOff_Frequency = L3GD20_HPFCF_0;
 800231c:	2300      	movs	r3, #0
 800231e:	707b      	strb	r3, [r7, #1]
	
    ctrl = (uint8_t) ((L3GD20_FilterStructure.HighPassFilter_Mode_Selection |\
 8002320:	783a      	ldrb	r2, [r7, #0]
                       L3GD20_FilterStructure.HighPassFilter_CutOff_Frequency));		
 8002322:	787b      	ldrb	r3, [r7, #1]
    ctrl = (uint8_t) ((L3GD20_FilterStructure.HighPassFilter_Mode_Selection |\
 8002324:	4313      	orrs	r3, r2
 8002326:	b2db      	uxtb	r3, r3
 8002328:	81bb      	strh	r3, [r7, #12]
	
    GyroscopeDrv->FilterConfig(ctrl) ;
 800232a:	4b0c      	ldr	r3, [pc, #48]	; (800235c <BSP_GYRO_Init+0xc8>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002330:	89ba      	ldrh	r2, [r7, #12]
 8002332:	b2d2      	uxtb	r2, r2
 8002334:	4610      	mov	r0, r2
 8002336:	4798      	blx	r3
  
    GyroscopeDrv->FilterCmd(L3GD20_HIGHPASSFILTER_ENABLE);
 8002338:	4b08      	ldr	r3, [pc, #32]	; (800235c <BSP_GYRO_Init+0xc8>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800233e:	2010      	movs	r0, #16
 8002340:	4798      	blx	r3
	
    ret = GYRO_OK;
 8002342:	2300      	movs	r3, #0
 8002344:	73fb      	strb	r3, [r7, #15]
 8002346:	e001      	b.n	800234c <BSP_GYRO_Init+0xb8>
  }
  else
  {
    ret = GYRO_ERROR;
 8002348:	2301      	movs	r3, #1
 800234a:	73fb      	strb	r3, [r7, #15]
  }
  
  return ret;
 800234c:	7bfb      	ldrb	r3, [r7, #15]
}
 800234e:	4618      	mov	r0, r3
 8002350:	3710      	adds	r7, #16
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}
 8002356:	bf00      	nop
 8002358:	20000004 	.word	0x20000004
 800235c:	200006e0 	.word	0x200006e0

08002360 <BSP_GYRO_GetXYZ>:
  * @brief  Get XYZ angular acceleration
  * @param pfData pointer on floating array         
  * @retval None
  */
void BSP_GYRO_GetXYZ(float* pfData)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b082      	sub	sp, #8
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  if(GyroscopeDrv->GetXYZ!= NULL)
 8002368:	4b06      	ldr	r3, [pc, #24]	; (8002384 <BSP_GYRO_GetXYZ+0x24>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800236e:	2b00      	cmp	r3, #0
 8002370:	d004      	beq.n	800237c <BSP_GYRO_GetXYZ+0x1c>
  {
	GyroscopeDrv->GetXYZ(pfData);
 8002372:	4b04      	ldr	r3, [pc, #16]	; (8002384 <BSP_GYRO_GetXYZ+0x24>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002378:	6878      	ldr	r0, [r7, #4]
 800237a:	4798      	blx	r3
  }  
}
 800237c:	bf00      	nop
 800237e:	3708      	adds	r7, #8
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}
 8002384:	200006e0 	.word	0x200006e0

08002388 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800238c:	4b08      	ldr	r3, [pc, #32]	; (80023b0 <HAL_Init+0x28>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a07      	ldr	r2, [pc, #28]	; (80023b0 <HAL_Init+0x28>)
 8002392:	f043 0310 	orr.w	r3, r3, #16
 8002396:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002398:	2003      	movs	r0, #3
 800239a:	f000 f94f 	bl	800263c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800239e:	2000      	movs	r0, #0
 80023a0:	f000 f808 	bl	80023b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80023a4:	f7fe fe30 	bl	8001008 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80023a8:	2300      	movs	r3, #0
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	bd80      	pop	{r7, pc}
 80023ae:	bf00      	nop
 80023b0:	40022000 	.word	0x40022000

080023b4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b082      	sub	sp, #8
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80023bc:	4b12      	ldr	r3, [pc, #72]	; (8002408 <HAL_InitTick+0x54>)
 80023be:	681a      	ldr	r2, [r3, #0]
 80023c0:	4b12      	ldr	r3, [pc, #72]	; (800240c <HAL_InitTick+0x58>)
 80023c2:	781b      	ldrb	r3, [r3, #0]
 80023c4:	4619      	mov	r1, r3
 80023c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80023ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80023d2:	4618      	mov	r0, r3
 80023d4:	f000 f967 	bl	80026a6 <HAL_SYSTICK_Config>
 80023d8:	4603      	mov	r3, r0
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d001      	beq.n	80023e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80023de:	2301      	movs	r3, #1
 80023e0:	e00e      	b.n	8002400 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2b0f      	cmp	r3, #15
 80023e6:	d80a      	bhi.n	80023fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80023e8:	2200      	movs	r2, #0
 80023ea:	6879      	ldr	r1, [r7, #4]
 80023ec:	f04f 30ff 	mov.w	r0, #4294967295
 80023f0:	f000 f92f 	bl	8002652 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80023f4:	4a06      	ldr	r2, [pc, #24]	; (8002410 <HAL_InitTick+0x5c>)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80023fa:	2300      	movs	r3, #0
 80023fc:	e000      	b.n	8002400 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
}
 8002400:	4618      	mov	r0, r3
 8002402:	3708      	adds	r7, #8
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}
 8002408:	20000000 	.word	0x20000000
 800240c:	20000078 	.word	0x20000078
 8002410:	20000074 	.word	0x20000074

08002414 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002414:	b480      	push	{r7}
 8002416:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002418:	4b06      	ldr	r3, [pc, #24]	; (8002434 <HAL_IncTick+0x20>)
 800241a:	781b      	ldrb	r3, [r3, #0]
 800241c:	461a      	mov	r2, r3
 800241e:	4b06      	ldr	r3, [pc, #24]	; (8002438 <HAL_IncTick+0x24>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4413      	add	r3, r2
 8002424:	4a04      	ldr	r2, [pc, #16]	; (8002438 <HAL_IncTick+0x24>)
 8002426:	6013      	str	r3, [r2, #0]
}
 8002428:	bf00      	nop
 800242a:	46bd      	mov	sp, r7
 800242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002430:	4770      	bx	lr
 8002432:	bf00      	nop
 8002434:	20000078 	.word	0x20000078
 8002438:	200006e4 	.word	0x200006e4

0800243c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800243c:	b480      	push	{r7}
 800243e:	af00      	add	r7, sp, #0
  return uwTick;  
 8002440:	4b03      	ldr	r3, [pc, #12]	; (8002450 <HAL_GetTick+0x14>)
 8002442:	681b      	ldr	r3, [r3, #0]
}
 8002444:	4618      	mov	r0, r3
 8002446:	46bd      	mov	sp, r7
 8002448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244c:	4770      	bx	lr
 800244e:	bf00      	nop
 8002450:	200006e4 	.word	0x200006e4

08002454 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b084      	sub	sp, #16
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800245c:	f7ff ffee 	bl	800243c <HAL_GetTick>
 8002460:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	f1b3 3fff 	cmp.w	r3, #4294967295
 800246c:	d005      	beq.n	800247a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800246e:	4b0a      	ldr	r3, [pc, #40]	; (8002498 <HAL_Delay+0x44>)
 8002470:	781b      	ldrb	r3, [r3, #0]
 8002472:	461a      	mov	r2, r3
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	4413      	add	r3, r2
 8002478:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800247a:	bf00      	nop
 800247c:	f7ff ffde 	bl	800243c <HAL_GetTick>
 8002480:	4602      	mov	r2, r0
 8002482:	68bb      	ldr	r3, [r7, #8]
 8002484:	1ad3      	subs	r3, r2, r3
 8002486:	68fa      	ldr	r2, [r7, #12]
 8002488:	429a      	cmp	r2, r3
 800248a:	d8f7      	bhi.n	800247c <HAL_Delay+0x28>
  {
  }
}
 800248c:	bf00      	nop
 800248e:	bf00      	nop
 8002490:	3710      	adds	r7, #16
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}
 8002496:	bf00      	nop
 8002498:	20000078 	.word	0x20000078

0800249c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800249c:	b480      	push	{r7}
 800249e:	b085      	sub	sp, #20
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	f003 0307 	and.w	r3, r3, #7
 80024aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024ac:	4b0c      	ldr	r3, [pc, #48]	; (80024e0 <__NVIC_SetPriorityGrouping+0x44>)
 80024ae:	68db      	ldr	r3, [r3, #12]
 80024b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024b2:	68ba      	ldr	r2, [r7, #8]
 80024b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80024b8:	4013      	ands	r3, r2
 80024ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80024c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024ce:	4a04      	ldr	r2, [pc, #16]	; (80024e0 <__NVIC_SetPriorityGrouping+0x44>)
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	60d3      	str	r3, [r2, #12]
}
 80024d4:	bf00      	nop
 80024d6:	3714      	adds	r7, #20
 80024d8:	46bd      	mov	sp, r7
 80024da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024de:	4770      	bx	lr
 80024e0:	e000ed00 	.word	0xe000ed00

080024e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024e4:	b480      	push	{r7}
 80024e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024e8:	4b04      	ldr	r3, [pc, #16]	; (80024fc <__NVIC_GetPriorityGrouping+0x18>)
 80024ea:	68db      	ldr	r3, [r3, #12]
 80024ec:	0a1b      	lsrs	r3, r3, #8
 80024ee:	f003 0307 	and.w	r3, r3, #7
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	46bd      	mov	sp, r7
 80024f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fa:	4770      	bx	lr
 80024fc:	e000ed00 	.word	0xe000ed00

08002500 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002500:	b480      	push	{r7}
 8002502:	b083      	sub	sp, #12
 8002504:	af00      	add	r7, sp, #0
 8002506:	4603      	mov	r3, r0
 8002508:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800250a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800250e:	2b00      	cmp	r3, #0
 8002510:	db0b      	blt.n	800252a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002512:	79fb      	ldrb	r3, [r7, #7]
 8002514:	f003 021f 	and.w	r2, r3, #31
 8002518:	4907      	ldr	r1, [pc, #28]	; (8002538 <__NVIC_EnableIRQ+0x38>)
 800251a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800251e:	095b      	lsrs	r3, r3, #5
 8002520:	2001      	movs	r0, #1
 8002522:	fa00 f202 	lsl.w	r2, r0, r2
 8002526:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800252a:	bf00      	nop
 800252c:	370c      	adds	r7, #12
 800252e:	46bd      	mov	sp, r7
 8002530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002534:	4770      	bx	lr
 8002536:	bf00      	nop
 8002538:	e000e100 	.word	0xe000e100

0800253c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800253c:	b480      	push	{r7}
 800253e:	b083      	sub	sp, #12
 8002540:	af00      	add	r7, sp, #0
 8002542:	4603      	mov	r3, r0
 8002544:	6039      	str	r1, [r7, #0]
 8002546:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002548:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800254c:	2b00      	cmp	r3, #0
 800254e:	db0a      	blt.n	8002566 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	b2da      	uxtb	r2, r3
 8002554:	490c      	ldr	r1, [pc, #48]	; (8002588 <__NVIC_SetPriority+0x4c>)
 8002556:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800255a:	0112      	lsls	r2, r2, #4
 800255c:	b2d2      	uxtb	r2, r2
 800255e:	440b      	add	r3, r1
 8002560:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002564:	e00a      	b.n	800257c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	b2da      	uxtb	r2, r3
 800256a:	4908      	ldr	r1, [pc, #32]	; (800258c <__NVIC_SetPriority+0x50>)
 800256c:	79fb      	ldrb	r3, [r7, #7]
 800256e:	f003 030f 	and.w	r3, r3, #15
 8002572:	3b04      	subs	r3, #4
 8002574:	0112      	lsls	r2, r2, #4
 8002576:	b2d2      	uxtb	r2, r2
 8002578:	440b      	add	r3, r1
 800257a:	761a      	strb	r2, [r3, #24]
}
 800257c:	bf00      	nop
 800257e:	370c      	adds	r7, #12
 8002580:	46bd      	mov	sp, r7
 8002582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002586:	4770      	bx	lr
 8002588:	e000e100 	.word	0xe000e100
 800258c:	e000ed00 	.word	0xe000ed00

08002590 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002590:	b480      	push	{r7}
 8002592:	b089      	sub	sp, #36	; 0x24
 8002594:	af00      	add	r7, sp, #0
 8002596:	60f8      	str	r0, [r7, #12]
 8002598:	60b9      	str	r1, [r7, #8]
 800259a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	f003 0307 	and.w	r3, r3, #7
 80025a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025a4:	69fb      	ldr	r3, [r7, #28]
 80025a6:	f1c3 0307 	rsb	r3, r3, #7
 80025aa:	2b04      	cmp	r3, #4
 80025ac:	bf28      	it	cs
 80025ae:	2304      	movcs	r3, #4
 80025b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025b2:	69fb      	ldr	r3, [r7, #28]
 80025b4:	3304      	adds	r3, #4
 80025b6:	2b06      	cmp	r3, #6
 80025b8:	d902      	bls.n	80025c0 <NVIC_EncodePriority+0x30>
 80025ba:	69fb      	ldr	r3, [r7, #28]
 80025bc:	3b03      	subs	r3, #3
 80025be:	e000      	b.n	80025c2 <NVIC_EncodePriority+0x32>
 80025c0:	2300      	movs	r3, #0
 80025c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025c4:	f04f 32ff 	mov.w	r2, #4294967295
 80025c8:	69bb      	ldr	r3, [r7, #24]
 80025ca:	fa02 f303 	lsl.w	r3, r2, r3
 80025ce:	43da      	mvns	r2, r3
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	401a      	ands	r2, r3
 80025d4:	697b      	ldr	r3, [r7, #20]
 80025d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025d8:	f04f 31ff 	mov.w	r1, #4294967295
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	fa01 f303 	lsl.w	r3, r1, r3
 80025e2:	43d9      	mvns	r1, r3
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025e8:	4313      	orrs	r3, r2
         );
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	3724      	adds	r7, #36	; 0x24
 80025ee:	46bd      	mov	sp, r7
 80025f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f4:	4770      	bx	lr
	...

080025f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b082      	sub	sp, #8
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	3b01      	subs	r3, #1
 8002604:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002608:	d301      	bcc.n	800260e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800260a:	2301      	movs	r3, #1
 800260c:	e00f      	b.n	800262e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800260e:	4a0a      	ldr	r2, [pc, #40]	; (8002638 <SysTick_Config+0x40>)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	3b01      	subs	r3, #1
 8002614:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002616:	210f      	movs	r1, #15
 8002618:	f04f 30ff 	mov.w	r0, #4294967295
 800261c:	f7ff ff8e 	bl	800253c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002620:	4b05      	ldr	r3, [pc, #20]	; (8002638 <SysTick_Config+0x40>)
 8002622:	2200      	movs	r2, #0
 8002624:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002626:	4b04      	ldr	r3, [pc, #16]	; (8002638 <SysTick_Config+0x40>)
 8002628:	2207      	movs	r2, #7
 800262a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800262c:	2300      	movs	r3, #0
}
 800262e:	4618      	mov	r0, r3
 8002630:	3708      	adds	r7, #8
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}
 8002636:	bf00      	nop
 8002638:	e000e010 	.word	0xe000e010

0800263c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b082      	sub	sp, #8
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002644:	6878      	ldr	r0, [r7, #4]
 8002646:	f7ff ff29 	bl	800249c <__NVIC_SetPriorityGrouping>
}
 800264a:	bf00      	nop
 800264c:	3708      	adds	r7, #8
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}

08002652 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002652:	b580      	push	{r7, lr}
 8002654:	b086      	sub	sp, #24
 8002656:	af00      	add	r7, sp, #0
 8002658:	4603      	mov	r3, r0
 800265a:	60b9      	str	r1, [r7, #8]
 800265c:	607a      	str	r2, [r7, #4]
 800265e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002660:	2300      	movs	r3, #0
 8002662:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002664:	f7ff ff3e 	bl	80024e4 <__NVIC_GetPriorityGrouping>
 8002668:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800266a:	687a      	ldr	r2, [r7, #4]
 800266c:	68b9      	ldr	r1, [r7, #8]
 800266e:	6978      	ldr	r0, [r7, #20]
 8002670:	f7ff ff8e 	bl	8002590 <NVIC_EncodePriority>
 8002674:	4602      	mov	r2, r0
 8002676:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800267a:	4611      	mov	r1, r2
 800267c:	4618      	mov	r0, r3
 800267e:	f7ff ff5d 	bl	800253c <__NVIC_SetPriority>
}
 8002682:	bf00      	nop
 8002684:	3718      	adds	r7, #24
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}

0800268a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800268a:	b580      	push	{r7, lr}
 800268c:	b082      	sub	sp, #8
 800268e:	af00      	add	r7, sp, #0
 8002690:	4603      	mov	r3, r0
 8002692:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002694:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002698:	4618      	mov	r0, r3
 800269a:	f7ff ff31 	bl	8002500 <__NVIC_EnableIRQ>
}
 800269e:	bf00      	nop
 80026a0:	3708      	adds	r7, #8
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}

080026a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80026a6:	b580      	push	{r7, lr}
 80026a8:	b082      	sub	sp, #8
 80026aa:	af00      	add	r7, sp, #0
 80026ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80026ae:	6878      	ldr	r0, [r7, #4]
 80026b0:	f7ff ffa2 	bl	80025f8 <SysTick_Config>
 80026b4:	4603      	mov	r3, r0
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	3708      	adds	r7, #8
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}
	...

080026c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b087      	sub	sp, #28
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
 80026c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80026ca:	2300      	movs	r3, #0
 80026cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80026ce:	e154      	b.n	800297a <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	681a      	ldr	r2, [r3, #0]
 80026d4:	2101      	movs	r1, #1
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	fa01 f303 	lsl.w	r3, r1, r3
 80026dc:	4013      	ands	r3, r2
 80026de:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	f000 8146 	beq.w	8002974 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	f003 0303 	and.w	r3, r3, #3
 80026f0:	2b01      	cmp	r3, #1
 80026f2:	d005      	beq.n	8002700 <HAL_GPIO_Init+0x40>
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	f003 0303 	and.w	r3, r3, #3
 80026fc:	2b02      	cmp	r3, #2
 80026fe:	d130      	bne.n	8002762 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	689b      	ldr	r3, [r3, #8]
 8002704:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	005b      	lsls	r3, r3, #1
 800270a:	2203      	movs	r2, #3
 800270c:	fa02 f303 	lsl.w	r3, r2, r3
 8002710:	43db      	mvns	r3, r3
 8002712:	693a      	ldr	r2, [r7, #16]
 8002714:	4013      	ands	r3, r2
 8002716:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	68da      	ldr	r2, [r3, #12]
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	005b      	lsls	r3, r3, #1
 8002720:	fa02 f303 	lsl.w	r3, r2, r3
 8002724:	693a      	ldr	r2, [r7, #16]
 8002726:	4313      	orrs	r3, r2
 8002728:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	693a      	ldr	r2, [r7, #16]
 800272e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002736:	2201      	movs	r2, #1
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	fa02 f303 	lsl.w	r3, r2, r3
 800273e:	43db      	mvns	r3, r3
 8002740:	693a      	ldr	r2, [r7, #16]
 8002742:	4013      	ands	r3, r2
 8002744:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	091b      	lsrs	r3, r3, #4
 800274c:	f003 0201 	and.w	r2, r3, #1
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	fa02 f303 	lsl.w	r3, r2, r3
 8002756:	693a      	ldr	r2, [r7, #16]
 8002758:	4313      	orrs	r3, r2
 800275a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	693a      	ldr	r2, [r7, #16]
 8002760:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	f003 0303 	and.w	r3, r3, #3
 800276a:	2b03      	cmp	r3, #3
 800276c:	d017      	beq.n	800279e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	68db      	ldr	r3, [r3, #12]
 8002772:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	005b      	lsls	r3, r3, #1
 8002778:	2203      	movs	r2, #3
 800277a:	fa02 f303 	lsl.w	r3, r2, r3
 800277e:	43db      	mvns	r3, r3
 8002780:	693a      	ldr	r2, [r7, #16]
 8002782:	4013      	ands	r3, r2
 8002784:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	689a      	ldr	r2, [r3, #8]
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	005b      	lsls	r3, r3, #1
 800278e:	fa02 f303 	lsl.w	r3, r2, r3
 8002792:	693a      	ldr	r2, [r7, #16]
 8002794:	4313      	orrs	r3, r2
 8002796:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	693a      	ldr	r2, [r7, #16]
 800279c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	f003 0303 	and.w	r3, r3, #3
 80027a6:	2b02      	cmp	r3, #2
 80027a8:	d123      	bne.n	80027f2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80027aa:	697b      	ldr	r3, [r7, #20]
 80027ac:	08da      	lsrs	r2, r3, #3
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	3208      	adds	r2, #8
 80027b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027b6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	f003 0307 	and.w	r3, r3, #7
 80027be:	009b      	lsls	r3, r3, #2
 80027c0:	220f      	movs	r2, #15
 80027c2:	fa02 f303 	lsl.w	r3, r2, r3
 80027c6:	43db      	mvns	r3, r3
 80027c8:	693a      	ldr	r2, [r7, #16]
 80027ca:	4013      	ands	r3, r2
 80027cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	691a      	ldr	r2, [r3, #16]
 80027d2:	697b      	ldr	r3, [r7, #20]
 80027d4:	f003 0307 	and.w	r3, r3, #7
 80027d8:	009b      	lsls	r3, r3, #2
 80027da:	fa02 f303 	lsl.w	r3, r2, r3
 80027de:	693a      	ldr	r2, [r7, #16]
 80027e0:	4313      	orrs	r3, r2
 80027e2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	08da      	lsrs	r2, r3, #3
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	3208      	adds	r2, #8
 80027ec:	6939      	ldr	r1, [r7, #16]
 80027ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	005b      	lsls	r3, r3, #1
 80027fc:	2203      	movs	r2, #3
 80027fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002802:	43db      	mvns	r3, r3
 8002804:	693a      	ldr	r2, [r7, #16]
 8002806:	4013      	ands	r3, r2
 8002808:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	f003 0203 	and.w	r2, r3, #3
 8002812:	697b      	ldr	r3, [r7, #20]
 8002814:	005b      	lsls	r3, r3, #1
 8002816:	fa02 f303 	lsl.w	r3, r2, r3
 800281a:	693a      	ldr	r2, [r7, #16]
 800281c:	4313      	orrs	r3, r2
 800281e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	693a      	ldr	r2, [r7, #16]
 8002824:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800282e:	2b00      	cmp	r3, #0
 8002830:	f000 80a0 	beq.w	8002974 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002834:	4b58      	ldr	r3, [pc, #352]	; (8002998 <HAL_GPIO_Init+0x2d8>)
 8002836:	699b      	ldr	r3, [r3, #24]
 8002838:	4a57      	ldr	r2, [pc, #348]	; (8002998 <HAL_GPIO_Init+0x2d8>)
 800283a:	f043 0301 	orr.w	r3, r3, #1
 800283e:	6193      	str	r3, [r2, #24]
 8002840:	4b55      	ldr	r3, [pc, #340]	; (8002998 <HAL_GPIO_Init+0x2d8>)
 8002842:	699b      	ldr	r3, [r3, #24]
 8002844:	f003 0301 	and.w	r3, r3, #1
 8002848:	60bb      	str	r3, [r7, #8]
 800284a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800284c:	4a53      	ldr	r2, [pc, #332]	; (800299c <HAL_GPIO_Init+0x2dc>)
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	089b      	lsrs	r3, r3, #2
 8002852:	3302      	adds	r3, #2
 8002854:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002858:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	f003 0303 	and.w	r3, r3, #3
 8002860:	009b      	lsls	r3, r3, #2
 8002862:	220f      	movs	r2, #15
 8002864:	fa02 f303 	lsl.w	r3, r2, r3
 8002868:	43db      	mvns	r3, r3
 800286a:	693a      	ldr	r2, [r7, #16]
 800286c:	4013      	ands	r3, r2
 800286e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002876:	d019      	beq.n	80028ac <HAL_GPIO_Init+0x1ec>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	4a49      	ldr	r2, [pc, #292]	; (80029a0 <HAL_GPIO_Init+0x2e0>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d013      	beq.n	80028a8 <HAL_GPIO_Init+0x1e8>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	4a48      	ldr	r2, [pc, #288]	; (80029a4 <HAL_GPIO_Init+0x2e4>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d00d      	beq.n	80028a4 <HAL_GPIO_Init+0x1e4>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	4a47      	ldr	r2, [pc, #284]	; (80029a8 <HAL_GPIO_Init+0x2e8>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d007      	beq.n	80028a0 <HAL_GPIO_Init+0x1e0>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	4a46      	ldr	r2, [pc, #280]	; (80029ac <HAL_GPIO_Init+0x2ec>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d101      	bne.n	800289c <HAL_GPIO_Init+0x1dc>
 8002898:	2304      	movs	r3, #4
 800289a:	e008      	b.n	80028ae <HAL_GPIO_Init+0x1ee>
 800289c:	2305      	movs	r3, #5
 800289e:	e006      	b.n	80028ae <HAL_GPIO_Init+0x1ee>
 80028a0:	2303      	movs	r3, #3
 80028a2:	e004      	b.n	80028ae <HAL_GPIO_Init+0x1ee>
 80028a4:	2302      	movs	r3, #2
 80028a6:	e002      	b.n	80028ae <HAL_GPIO_Init+0x1ee>
 80028a8:	2301      	movs	r3, #1
 80028aa:	e000      	b.n	80028ae <HAL_GPIO_Init+0x1ee>
 80028ac:	2300      	movs	r3, #0
 80028ae:	697a      	ldr	r2, [r7, #20]
 80028b0:	f002 0203 	and.w	r2, r2, #3
 80028b4:	0092      	lsls	r2, r2, #2
 80028b6:	4093      	lsls	r3, r2
 80028b8:	693a      	ldr	r2, [r7, #16]
 80028ba:	4313      	orrs	r3, r2
 80028bc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80028be:	4937      	ldr	r1, [pc, #220]	; (800299c <HAL_GPIO_Init+0x2dc>)
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	089b      	lsrs	r3, r3, #2
 80028c4:	3302      	adds	r3, #2
 80028c6:	693a      	ldr	r2, [r7, #16]
 80028c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80028cc:	4b38      	ldr	r3, [pc, #224]	; (80029b0 <HAL_GPIO_Init+0x2f0>)
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	43db      	mvns	r3, r3
 80028d6:	693a      	ldr	r2, [r7, #16]
 80028d8:	4013      	ands	r3, r2
 80028da:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d003      	beq.n	80028f0 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80028e8:	693a      	ldr	r2, [r7, #16]
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	4313      	orrs	r3, r2
 80028ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80028f0:	4a2f      	ldr	r2, [pc, #188]	; (80029b0 <HAL_GPIO_Init+0x2f0>)
 80028f2:	693b      	ldr	r3, [r7, #16]
 80028f4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80028f6:	4b2e      	ldr	r3, [pc, #184]	; (80029b0 <HAL_GPIO_Init+0x2f0>)
 80028f8:	68db      	ldr	r3, [r3, #12]
 80028fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	43db      	mvns	r3, r3
 8002900:	693a      	ldr	r2, [r7, #16]
 8002902:	4013      	ands	r3, r2
 8002904:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800290e:	2b00      	cmp	r3, #0
 8002910:	d003      	beq.n	800291a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8002912:	693a      	ldr	r2, [r7, #16]
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	4313      	orrs	r3, r2
 8002918:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800291a:	4a25      	ldr	r2, [pc, #148]	; (80029b0 <HAL_GPIO_Init+0x2f0>)
 800291c:	693b      	ldr	r3, [r7, #16]
 800291e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002920:	4b23      	ldr	r3, [pc, #140]	; (80029b0 <HAL_GPIO_Init+0x2f0>)
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	43db      	mvns	r3, r3
 800292a:	693a      	ldr	r2, [r7, #16]
 800292c:	4013      	ands	r3, r2
 800292e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002938:	2b00      	cmp	r3, #0
 800293a:	d003      	beq.n	8002944 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 800293c:	693a      	ldr	r2, [r7, #16]
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	4313      	orrs	r3, r2
 8002942:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002944:	4a1a      	ldr	r2, [pc, #104]	; (80029b0 <HAL_GPIO_Init+0x2f0>)
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800294a:	4b19      	ldr	r3, [pc, #100]	; (80029b0 <HAL_GPIO_Init+0x2f0>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	43db      	mvns	r3, r3
 8002954:	693a      	ldr	r2, [r7, #16]
 8002956:	4013      	ands	r3, r2
 8002958:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002962:	2b00      	cmp	r3, #0
 8002964:	d003      	beq.n	800296e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002966:	693a      	ldr	r2, [r7, #16]
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	4313      	orrs	r3, r2
 800296c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800296e:	4a10      	ldr	r2, [pc, #64]	; (80029b0 <HAL_GPIO_Init+0x2f0>)
 8002970:	693b      	ldr	r3, [r7, #16]
 8002972:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	3301      	adds	r3, #1
 8002978:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	681a      	ldr	r2, [r3, #0]
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	fa22 f303 	lsr.w	r3, r2, r3
 8002984:	2b00      	cmp	r3, #0
 8002986:	f47f aea3 	bne.w	80026d0 <HAL_GPIO_Init+0x10>
  }
}
 800298a:	bf00      	nop
 800298c:	bf00      	nop
 800298e:	371c      	adds	r7, #28
 8002990:	46bd      	mov	sp, r7
 8002992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002996:	4770      	bx	lr
 8002998:	40021000 	.word	0x40021000
 800299c:	40010000 	.word	0x40010000
 80029a0:	48000400 	.word	0x48000400
 80029a4:	48000800 	.word	0x48000800
 80029a8:	48000c00 	.word	0x48000c00
 80029ac:	48001000 	.word	0x48001000
 80029b0:	40010400 	.word	0x40010400

080029b4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b087      	sub	sp, #28
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
 80029bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80029be:	2300      	movs	r3, #0
 80029c0:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80029c2:	e0b8      	b.n	8002b36 <HAL_GPIO_DeInit+0x182>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80029c4:	2201      	movs	r2, #1
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	fa02 f303 	lsl.w	r3, r2, r3
 80029cc:	683a      	ldr	r2, [r7, #0]
 80029ce:	4013      	ands	r3, r2
 80029d0:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80029d2:	693b      	ldr	r3, [r7, #16]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	f000 80ab 	beq.w	8002b30 <HAL_GPIO_DeInit+0x17c>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80029da:	4a5e      	ldr	r2, [pc, #376]	; (8002b54 <HAL_GPIO_DeInit+0x1a0>)
 80029dc:	697b      	ldr	r3, [r7, #20]
 80029de:	089b      	lsrs	r3, r3, #2
 80029e0:	3302      	adds	r3, #2
 80029e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029e6:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	f003 0303 	and.w	r3, r3, #3
 80029ee:	009b      	lsls	r3, r3, #2
 80029f0:	220f      	movs	r2, #15
 80029f2:	fa02 f303 	lsl.w	r3, r2, r3
 80029f6:	68fa      	ldr	r2, [r7, #12]
 80029f8:	4013      	ands	r3, r2
 80029fa:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002a02:	d019      	beq.n	8002a38 <HAL_GPIO_DeInit+0x84>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	4a54      	ldr	r2, [pc, #336]	; (8002b58 <HAL_GPIO_DeInit+0x1a4>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d013      	beq.n	8002a34 <HAL_GPIO_DeInit+0x80>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	4a53      	ldr	r2, [pc, #332]	; (8002b5c <HAL_GPIO_DeInit+0x1a8>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d00d      	beq.n	8002a30 <HAL_GPIO_DeInit+0x7c>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	4a52      	ldr	r2, [pc, #328]	; (8002b60 <HAL_GPIO_DeInit+0x1ac>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d007      	beq.n	8002a2c <HAL_GPIO_DeInit+0x78>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	4a51      	ldr	r2, [pc, #324]	; (8002b64 <HAL_GPIO_DeInit+0x1b0>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d101      	bne.n	8002a28 <HAL_GPIO_DeInit+0x74>
 8002a24:	2304      	movs	r3, #4
 8002a26:	e008      	b.n	8002a3a <HAL_GPIO_DeInit+0x86>
 8002a28:	2305      	movs	r3, #5
 8002a2a:	e006      	b.n	8002a3a <HAL_GPIO_DeInit+0x86>
 8002a2c:	2303      	movs	r3, #3
 8002a2e:	e004      	b.n	8002a3a <HAL_GPIO_DeInit+0x86>
 8002a30:	2302      	movs	r3, #2
 8002a32:	e002      	b.n	8002a3a <HAL_GPIO_DeInit+0x86>
 8002a34:	2301      	movs	r3, #1
 8002a36:	e000      	b.n	8002a3a <HAL_GPIO_DeInit+0x86>
 8002a38:	2300      	movs	r3, #0
 8002a3a:	697a      	ldr	r2, [r7, #20]
 8002a3c:	f002 0203 	and.w	r2, r2, #3
 8002a40:	0092      	lsls	r2, r2, #2
 8002a42:	4093      	lsls	r3, r2
 8002a44:	68fa      	ldr	r2, [r7, #12]
 8002a46:	429a      	cmp	r2, r3
 8002a48:	d132      	bne.n	8002ab0 <HAL_GPIO_DeInit+0xfc>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8002a4a:	4b47      	ldr	r3, [pc, #284]	; (8002b68 <HAL_GPIO_DeInit+0x1b4>)
 8002a4c:	681a      	ldr	r2, [r3, #0]
 8002a4e:	693b      	ldr	r3, [r7, #16]
 8002a50:	43db      	mvns	r3, r3
 8002a52:	4945      	ldr	r1, [pc, #276]	; (8002b68 <HAL_GPIO_DeInit+0x1b4>)
 8002a54:	4013      	ands	r3, r2
 8002a56:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8002a58:	4b43      	ldr	r3, [pc, #268]	; (8002b68 <HAL_GPIO_DeInit+0x1b4>)
 8002a5a:	685a      	ldr	r2, [r3, #4]
 8002a5c:	693b      	ldr	r3, [r7, #16]
 8002a5e:	43db      	mvns	r3, r3
 8002a60:	4941      	ldr	r1, [pc, #260]	; (8002b68 <HAL_GPIO_DeInit+0x1b4>)
 8002a62:	4013      	ands	r3, r2
 8002a64:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8002a66:	4b40      	ldr	r3, [pc, #256]	; (8002b68 <HAL_GPIO_DeInit+0x1b4>)
 8002a68:	68da      	ldr	r2, [r3, #12]
 8002a6a:	693b      	ldr	r3, [r7, #16]
 8002a6c:	43db      	mvns	r3, r3
 8002a6e:	493e      	ldr	r1, [pc, #248]	; (8002b68 <HAL_GPIO_DeInit+0x1b4>)
 8002a70:	4013      	ands	r3, r2
 8002a72:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8002a74:	4b3c      	ldr	r3, [pc, #240]	; (8002b68 <HAL_GPIO_DeInit+0x1b4>)
 8002a76:	689a      	ldr	r2, [r3, #8]
 8002a78:	693b      	ldr	r3, [r7, #16]
 8002a7a:	43db      	mvns	r3, r3
 8002a7c:	493a      	ldr	r1, [pc, #232]	; (8002b68 <HAL_GPIO_DeInit+0x1b4>)
 8002a7e:	4013      	ands	r3, r2
 8002a80:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	f003 0303 	and.w	r3, r3, #3
 8002a88:	009b      	lsls	r3, r3, #2
 8002a8a:	220f      	movs	r2, #15
 8002a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a90:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8002a92:	4a30      	ldr	r2, [pc, #192]	; (8002b54 <HAL_GPIO_DeInit+0x1a0>)
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	089b      	lsrs	r3, r3, #2
 8002a98:	3302      	adds	r3, #2
 8002a9a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	43da      	mvns	r2, r3
 8002aa2:	482c      	ldr	r0, [pc, #176]	; (8002b54 <HAL_GPIO_DeInit+0x1a0>)
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	089b      	lsrs	r3, r3, #2
 8002aa8:	400a      	ands	r2, r1
 8002aaa:	3302      	adds	r3, #2
 8002aac:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681a      	ldr	r2, [r3, #0]
 8002ab4:	697b      	ldr	r3, [r7, #20]
 8002ab6:	005b      	lsls	r3, r3, #1
 8002ab8:	2103      	movs	r1, #3
 8002aba:	fa01 f303 	lsl.w	r3, r1, r3
 8002abe:	43db      	mvns	r3, r3
 8002ac0:	401a      	ands	r2, r3
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((uint32_t)(position & 0x07u) * 4u)) ;
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	08da      	lsrs	r2, r3, #3
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	3208      	adds	r2, #8
 8002ace:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002ad2:	697b      	ldr	r3, [r7, #20]
 8002ad4:	f003 0307 	and.w	r3, r3, #7
 8002ad8:	009b      	lsls	r3, r3, #2
 8002ada:	220f      	movs	r2, #15
 8002adc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae0:	43db      	mvns	r3, r3
 8002ae2:	697a      	ldr	r2, [r7, #20]
 8002ae4:	08d2      	lsrs	r2, r2, #3
 8002ae6:	4019      	ands	r1, r3
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	3208      	adds	r2, #8
 8002aec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	68da      	ldr	r2, [r3, #12]
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	005b      	lsls	r3, r3, #1
 8002af8:	2103      	movs	r1, #3
 8002afa:	fa01 f303 	lsl.w	r3, r1, r3
 8002afe:	43db      	mvns	r3, r3
 8002b00:	401a      	ands	r2, r3
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	685a      	ldr	r2, [r3, #4]
 8002b0a:	2101      	movs	r1, #1
 8002b0c:	697b      	ldr	r3, [r7, #20]
 8002b0e:	fa01 f303 	lsl.w	r3, r1, r3
 8002b12:	43db      	mvns	r3, r3
 8002b14:	401a      	ands	r2, r3
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	689a      	ldr	r2, [r3, #8]
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	005b      	lsls	r3, r3, #1
 8002b22:	2103      	movs	r1, #3
 8002b24:	fa01 f303 	lsl.w	r3, r1, r3
 8002b28:	43db      	mvns	r3, r3
 8002b2a:	401a      	ands	r2, r3
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	609a      	str	r2, [r3, #8]
    }

    position++;
 8002b30:	697b      	ldr	r3, [r7, #20]
 8002b32:	3301      	adds	r3, #1
 8002b34:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8002b36:	683a      	ldr	r2, [r7, #0]
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	fa22 f303 	lsr.w	r3, r2, r3
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	f47f af40 	bne.w	80029c4 <HAL_GPIO_DeInit+0x10>
  }
}
 8002b44:	bf00      	nop
 8002b46:	bf00      	nop
 8002b48:	371c      	adds	r7, #28
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b50:	4770      	bx	lr
 8002b52:	bf00      	nop
 8002b54:	40010000 	.word	0x40010000
 8002b58:	48000400 	.word	0x48000400
 8002b5c:	48000800 	.word	0x48000800
 8002b60:	48000c00 	.word	0x48000c00
 8002b64:	48001000 	.word	0x48001000
 8002b68:	40010400 	.word	0x40010400

08002b6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	b083      	sub	sp, #12
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
 8002b74:	460b      	mov	r3, r1
 8002b76:	807b      	strh	r3, [r7, #2]
 8002b78:	4613      	mov	r3, r2
 8002b7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b7c:	787b      	ldrb	r3, [r7, #1]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d003      	beq.n	8002b8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002b82:	887a      	ldrh	r2, [r7, #2]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002b88:	e002      	b.n	8002b90 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002b8a:	887a      	ldrh	r2, [r7, #2]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002b90:	bf00      	nop
 8002b92:	370c      	adds	r7, #12
 8002b94:	46bd      	mov	sp, r7
 8002b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9a:	4770      	bx	lr

08002b9c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b082      	sub	sp, #8
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d101      	bne.n	8002bae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	e081      	b.n	8002cb2 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002bb4:	b2db      	uxtb	r3, r3
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d106      	bne.n	8002bc8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002bc2:	6878      	ldr	r0, [r7, #4]
 8002bc4:	f7fe fa44 	bl	8001050 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2224      	movs	r2, #36	; 0x24
 8002bcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	681a      	ldr	r2, [r3, #0]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f022 0201 	bic.w	r2, r2, #1
 8002bde:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	685a      	ldr	r2, [r3, #4]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002bec:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	689a      	ldr	r2, [r3, #8]
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002bfc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	68db      	ldr	r3, [r3, #12]
 8002c02:	2b01      	cmp	r3, #1
 8002c04:	d107      	bne.n	8002c16 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	689a      	ldr	r2, [r3, #8]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c12:	609a      	str	r2, [r3, #8]
 8002c14:	e006      	b.n	8002c24 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	689a      	ldr	r2, [r3, #8]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002c22:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	68db      	ldr	r3, [r3, #12]
 8002c28:	2b02      	cmp	r3, #2
 8002c2a:	d104      	bne.n	8002c36 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002c34:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	687a      	ldr	r2, [r7, #4]
 8002c3e:	6812      	ldr	r2, [r2, #0]
 8002c40:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002c44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c48:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	68da      	ldr	r2, [r3, #12]
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c58:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	691a      	ldr	r2, [r3, #16]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	695b      	ldr	r3, [r3, #20]
 8002c62:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	699b      	ldr	r3, [r3, #24]
 8002c6a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	430a      	orrs	r2, r1
 8002c72:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	69d9      	ldr	r1, [r3, #28]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6a1a      	ldr	r2, [r3, #32]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	430a      	orrs	r2, r1
 8002c82:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	681a      	ldr	r2, [r3, #0]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f042 0201 	orr.w	r2, r2, #1
 8002c92:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2200      	movs	r2, #0
 8002c98:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2220      	movs	r2, #32
 8002c9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2200      	movs	r2, #0
 8002cac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002cb0:	2300      	movs	r3, #0
}
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	3708      	adds	r7, #8
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}

08002cba <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8002cba:	b580      	push	{r7, lr}
 8002cbc:	b082      	sub	sp, #8
 8002cbe:	af00      	add	r7, sp, #0
 8002cc0:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d101      	bne.n	8002ccc <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	e021      	b.n	8002d10 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2224      	movs	r2, #36	; 0x24
 8002cd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	681a      	ldr	r2, [r3, #0]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f022 0201 	bic.w	r2, r2, #1
 8002ce2:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8002ce4:	6878      	ldr	r0, [r7, #4]
 8002ce6:	f7fe f9f7 	bl	80010d8 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2200      	movs	r2, #0
 8002cee:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2200      	movs	r2, #0
 8002d02:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002d0e:	2300      	movs	r3, #0
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	3708      	adds	r7, #8
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bd80      	pop	{r7, pc}

08002d18 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b088      	sub	sp, #32
 8002d1c:	af02      	add	r7, sp, #8
 8002d1e:	60f8      	str	r0, [r7, #12]
 8002d20:	4608      	mov	r0, r1
 8002d22:	4611      	mov	r1, r2
 8002d24:	461a      	mov	r2, r3
 8002d26:	4603      	mov	r3, r0
 8002d28:	817b      	strh	r3, [r7, #10]
 8002d2a:	460b      	mov	r3, r1
 8002d2c:	813b      	strh	r3, [r7, #8]
 8002d2e:	4613      	mov	r3, r2
 8002d30:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d38:	b2db      	uxtb	r3, r3
 8002d3a:	2b20      	cmp	r3, #32
 8002d3c:	f040 80f9 	bne.w	8002f32 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d40:	6a3b      	ldr	r3, [r7, #32]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d002      	beq.n	8002d4c <HAL_I2C_Mem_Write+0x34>
 8002d46:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d105      	bne.n	8002d58 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d52:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002d54:	2301      	movs	r3, #1
 8002d56:	e0ed      	b.n	8002f34 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d5e:	2b01      	cmp	r3, #1
 8002d60:	d101      	bne.n	8002d66 <HAL_I2C_Mem_Write+0x4e>
 8002d62:	2302      	movs	r3, #2
 8002d64:	e0e6      	b.n	8002f34 <HAL_I2C_Mem_Write+0x21c>
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	2201      	movs	r2, #1
 8002d6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002d6e:	f7ff fb65 	bl	800243c <HAL_GetTick>
 8002d72:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	9300      	str	r3, [sp, #0]
 8002d78:	2319      	movs	r3, #25
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002d80:	68f8      	ldr	r0, [r7, #12]
 8002d82:	f000 fad1 	bl	8003328 <I2C_WaitOnFlagUntilTimeout>
 8002d86:	4603      	mov	r3, r0
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d001      	beq.n	8002d90 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	e0d1      	b.n	8002f34 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	2221      	movs	r2, #33	; 0x21
 8002d94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	2240      	movs	r2, #64	; 0x40
 8002d9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	2200      	movs	r2, #0
 8002da4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	6a3a      	ldr	r2, [r7, #32]
 8002daa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002db0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	2200      	movs	r2, #0
 8002db6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002db8:	88f8      	ldrh	r0, [r7, #6]
 8002dba:	893a      	ldrh	r2, [r7, #8]
 8002dbc:	8979      	ldrh	r1, [r7, #10]
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	9301      	str	r3, [sp, #4]
 8002dc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dc4:	9300      	str	r3, [sp, #0]
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	68f8      	ldr	r0, [r7, #12]
 8002dca:	f000 f9e1 	bl	8003190 <I2C_RequestMemoryWrite>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d005      	beq.n	8002de0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002ddc:	2301      	movs	r3, #1
 8002dde:	e0a9      	b.n	8002f34 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002de4:	b29b      	uxth	r3, r3
 8002de6:	2bff      	cmp	r3, #255	; 0xff
 8002de8:	d90e      	bls.n	8002e08 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	22ff      	movs	r2, #255	; 0xff
 8002dee:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002df4:	b2da      	uxtb	r2, r3
 8002df6:	8979      	ldrh	r1, [r7, #10]
 8002df8:	2300      	movs	r3, #0
 8002dfa:	9300      	str	r3, [sp, #0]
 8002dfc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002e00:	68f8      	ldr	r0, [r7, #12]
 8002e02:	f000 fc4b 	bl	800369c <I2C_TransferConfig>
 8002e06:	e00f      	b.n	8002e28 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e0c:	b29a      	uxth	r2, r3
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e16:	b2da      	uxtb	r2, r3
 8002e18:	8979      	ldrh	r1, [r7, #10]
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	9300      	str	r3, [sp, #0]
 8002e1e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e22:	68f8      	ldr	r0, [r7, #12]
 8002e24:	f000 fc3a 	bl	800369c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e28:	697a      	ldr	r2, [r7, #20]
 8002e2a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002e2c:	68f8      	ldr	r0, [r7, #12]
 8002e2e:	f000 faca 	bl	80033c6 <I2C_WaitOnTXISFlagUntilTimeout>
 8002e32:	4603      	mov	r3, r0
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d001      	beq.n	8002e3c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002e38:	2301      	movs	r3, #1
 8002e3a:	e07b      	b.n	8002f34 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e40:	781a      	ldrb	r2, [r3, #0]
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e4c:	1c5a      	adds	r2, r3, #1
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e56:	b29b      	uxth	r3, r3
 8002e58:	3b01      	subs	r3, #1
 8002e5a:	b29a      	uxth	r2, r3
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e64:	3b01      	subs	r3, #1
 8002e66:	b29a      	uxth	r2, r3
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e70:	b29b      	uxth	r3, r3
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d034      	beq.n	8002ee0 <HAL_I2C_Mem_Write+0x1c8>
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d130      	bne.n	8002ee0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002e7e:	697b      	ldr	r3, [r7, #20]
 8002e80:	9300      	str	r3, [sp, #0]
 8002e82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e84:	2200      	movs	r2, #0
 8002e86:	2180      	movs	r1, #128	; 0x80
 8002e88:	68f8      	ldr	r0, [r7, #12]
 8002e8a:	f000 fa4d 	bl	8003328 <I2C_WaitOnFlagUntilTimeout>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d001      	beq.n	8002e98 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002e94:	2301      	movs	r3, #1
 8002e96:	e04d      	b.n	8002f34 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e9c:	b29b      	uxth	r3, r3
 8002e9e:	2bff      	cmp	r3, #255	; 0xff
 8002ea0:	d90e      	bls.n	8002ec0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	22ff      	movs	r2, #255	; 0xff
 8002ea6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002eac:	b2da      	uxtb	r2, r3
 8002eae:	8979      	ldrh	r1, [r7, #10]
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	9300      	str	r3, [sp, #0]
 8002eb4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002eb8:	68f8      	ldr	r0, [r7, #12]
 8002eba:	f000 fbef 	bl	800369c <I2C_TransferConfig>
 8002ebe:	e00f      	b.n	8002ee0 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ec4:	b29a      	uxth	r2, r3
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ece:	b2da      	uxtb	r2, r3
 8002ed0:	8979      	ldrh	r1, [r7, #10]
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	9300      	str	r3, [sp, #0]
 8002ed6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002eda:	68f8      	ldr	r0, [r7, #12]
 8002edc:	f000 fbde 	bl	800369c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ee4:	b29b      	uxth	r3, r3
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d19e      	bne.n	8002e28 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002eea:	697a      	ldr	r2, [r7, #20]
 8002eec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002eee:	68f8      	ldr	r0, [r7, #12]
 8002ef0:	f000 fab0 	bl	8003454 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d001      	beq.n	8002efe <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	e01a      	b.n	8002f34 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	2220      	movs	r2, #32
 8002f04:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	6859      	ldr	r1, [r3, #4]
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681a      	ldr	r2, [r3, #0]
 8002f10:	4b0a      	ldr	r3, [pc, #40]	; (8002f3c <HAL_I2C_Mem_Write+0x224>)
 8002f12:	400b      	ands	r3, r1
 8002f14:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	2220      	movs	r2, #32
 8002f1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	2200      	movs	r2, #0
 8002f22:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	e000      	b.n	8002f34 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002f32:	2302      	movs	r3, #2
  }
}
 8002f34:	4618      	mov	r0, r3
 8002f36:	3718      	adds	r7, #24
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bd80      	pop	{r7, pc}
 8002f3c:	fe00e800 	.word	0xfe00e800

08002f40 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b088      	sub	sp, #32
 8002f44:	af02      	add	r7, sp, #8
 8002f46:	60f8      	str	r0, [r7, #12]
 8002f48:	4608      	mov	r0, r1
 8002f4a:	4611      	mov	r1, r2
 8002f4c:	461a      	mov	r2, r3
 8002f4e:	4603      	mov	r3, r0
 8002f50:	817b      	strh	r3, [r7, #10]
 8002f52:	460b      	mov	r3, r1
 8002f54:	813b      	strh	r3, [r7, #8]
 8002f56:	4613      	mov	r3, r2
 8002f58:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f60:	b2db      	uxtb	r3, r3
 8002f62:	2b20      	cmp	r3, #32
 8002f64:	f040 80fd 	bne.w	8003162 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f68:	6a3b      	ldr	r3, [r7, #32]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d002      	beq.n	8002f74 <HAL_I2C_Mem_Read+0x34>
 8002f6e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d105      	bne.n	8002f80 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f7a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	e0f1      	b.n	8003164 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f86:	2b01      	cmp	r3, #1
 8002f88:	d101      	bne.n	8002f8e <HAL_I2C_Mem_Read+0x4e>
 8002f8a:	2302      	movs	r3, #2
 8002f8c:	e0ea      	b.n	8003164 <HAL_I2C_Mem_Read+0x224>
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	2201      	movs	r2, #1
 8002f92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002f96:	f7ff fa51 	bl	800243c <HAL_GetTick>
 8002f9a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002f9c:	697b      	ldr	r3, [r7, #20]
 8002f9e:	9300      	str	r3, [sp, #0]
 8002fa0:	2319      	movs	r3, #25
 8002fa2:	2201      	movs	r2, #1
 8002fa4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002fa8:	68f8      	ldr	r0, [r7, #12]
 8002faa:	f000 f9bd 	bl	8003328 <I2C_WaitOnFlagUntilTimeout>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d001      	beq.n	8002fb8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	e0d5      	b.n	8003164 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	2222      	movs	r2, #34	; 0x22
 8002fbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	2240      	movs	r2, #64	; 0x40
 8002fc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	2200      	movs	r2, #0
 8002fcc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	6a3a      	ldr	r2, [r7, #32]
 8002fd2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002fd8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002fe0:	88f8      	ldrh	r0, [r7, #6]
 8002fe2:	893a      	ldrh	r2, [r7, #8]
 8002fe4:	8979      	ldrh	r1, [r7, #10]
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	9301      	str	r3, [sp, #4]
 8002fea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fec:	9300      	str	r3, [sp, #0]
 8002fee:	4603      	mov	r3, r0
 8002ff0:	68f8      	ldr	r0, [r7, #12]
 8002ff2:	f000 f921 	bl	8003238 <I2C_RequestMemoryRead>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d005      	beq.n	8003008 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	2200      	movs	r2, #0
 8003000:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003004:	2301      	movs	r3, #1
 8003006:	e0ad      	b.n	8003164 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800300c:	b29b      	uxth	r3, r3
 800300e:	2bff      	cmp	r3, #255	; 0xff
 8003010:	d90e      	bls.n	8003030 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	22ff      	movs	r2, #255	; 0xff
 8003016:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800301c:	b2da      	uxtb	r2, r3
 800301e:	8979      	ldrh	r1, [r7, #10]
 8003020:	4b52      	ldr	r3, [pc, #328]	; (800316c <HAL_I2C_Mem_Read+0x22c>)
 8003022:	9300      	str	r3, [sp, #0]
 8003024:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003028:	68f8      	ldr	r0, [r7, #12]
 800302a:	f000 fb37 	bl	800369c <I2C_TransferConfig>
 800302e:	e00f      	b.n	8003050 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003034:	b29a      	uxth	r2, r3
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800303e:	b2da      	uxtb	r2, r3
 8003040:	8979      	ldrh	r1, [r7, #10]
 8003042:	4b4a      	ldr	r3, [pc, #296]	; (800316c <HAL_I2C_Mem_Read+0x22c>)
 8003044:	9300      	str	r3, [sp, #0]
 8003046:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800304a:	68f8      	ldr	r0, [r7, #12]
 800304c:	f000 fb26 	bl	800369c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003050:	697b      	ldr	r3, [r7, #20]
 8003052:	9300      	str	r3, [sp, #0]
 8003054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003056:	2200      	movs	r2, #0
 8003058:	2104      	movs	r1, #4
 800305a:	68f8      	ldr	r0, [r7, #12]
 800305c:	f000 f964 	bl	8003328 <I2C_WaitOnFlagUntilTimeout>
 8003060:	4603      	mov	r3, r0
 8003062:	2b00      	cmp	r3, #0
 8003064:	d001      	beq.n	800306a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003066:	2301      	movs	r3, #1
 8003068:	e07c      	b.n	8003164 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003074:	b2d2      	uxtb	r2, r2
 8003076:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800307c:	1c5a      	adds	r2, r3, #1
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003086:	3b01      	subs	r3, #1
 8003088:	b29a      	uxth	r2, r3
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003092:	b29b      	uxth	r3, r3
 8003094:	3b01      	subs	r3, #1
 8003096:	b29a      	uxth	r2, r3
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030a0:	b29b      	uxth	r3, r3
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d034      	beq.n	8003110 <HAL_I2C_Mem_Read+0x1d0>
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d130      	bne.n	8003110 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80030ae:	697b      	ldr	r3, [r7, #20]
 80030b0:	9300      	str	r3, [sp, #0]
 80030b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030b4:	2200      	movs	r2, #0
 80030b6:	2180      	movs	r1, #128	; 0x80
 80030b8:	68f8      	ldr	r0, [r7, #12]
 80030ba:	f000 f935 	bl	8003328 <I2C_WaitOnFlagUntilTimeout>
 80030be:	4603      	mov	r3, r0
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d001      	beq.n	80030c8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80030c4:	2301      	movs	r3, #1
 80030c6:	e04d      	b.n	8003164 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030cc:	b29b      	uxth	r3, r3
 80030ce:	2bff      	cmp	r3, #255	; 0xff
 80030d0:	d90e      	bls.n	80030f0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	22ff      	movs	r2, #255	; 0xff
 80030d6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030dc:	b2da      	uxtb	r2, r3
 80030de:	8979      	ldrh	r1, [r7, #10]
 80030e0:	2300      	movs	r3, #0
 80030e2:	9300      	str	r3, [sp, #0]
 80030e4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80030e8:	68f8      	ldr	r0, [r7, #12]
 80030ea:	f000 fad7 	bl	800369c <I2C_TransferConfig>
 80030ee:	e00f      	b.n	8003110 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030f4:	b29a      	uxth	r2, r3
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030fe:	b2da      	uxtb	r2, r3
 8003100:	8979      	ldrh	r1, [r7, #10]
 8003102:	2300      	movs	r3, #0
 8003104:	9300      	str	r3, [sp, #0]
 8003106:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800310a:	68f8      	ldr	r0, [r7, #12]
 800310c:	f000 fac6 	bl	800369c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003114:	b29b      	uxth	r3, r3
 8003116:	2b00      	cmp	r3, #0
 8003118:	d19a      	bne.n	8003050 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800311a:	697a      	ldr	r2, [r7, #20]
 800311c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800311e:	68f8      	ldr	r0, [r7, #12]
 8003120:	f000 f998 	bl	8003454 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003124:	4603      	mov	r3, r0
 8003126:	2b00      	cmp	r3, #0
 8003128:	d001      	beq.n	800312e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800312a:	2301      	movs	r3, #1
 800312c:	e01a      	b.n	8003164 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	2220      	movs	r2, #32
 8003134:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	6859      	ldr	r1, [r3, #4]
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681a      	ldr	r2, [r3, #0]
 8003140:	4b0b      	ldr	r3, [pc, #44]	; (8003170 <HAL_I2C_Mem_Read+0x230>)
 8003142:	400b      	ands	r3, r1
 8003144:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	2220      	movs	r2, #32
 800314a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	2200      	movs	r2, #0
 8003152:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2200      	movs	r2, #0
 800315a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800315e:	2300      	movs	r3, #0
 8003160:	e000      	b.n	8003164 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003162:	2302      	movs	r3, #2
  }
}
 8003164:	4618      	mov	r0, r3
 8003166:	3718      	adds	r7, #24
 8003168:	46bd      	mov	sp, r7
 800316a:	bd80      	pop	{r7, pc}
 800316c:	80002400 	.word	0x80002400
 8003170:	fe00e800 	.word	0xfe00e800

08003174 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 8003174:	b480      	push	{r7}
 8003176:	b083      	sub	sp, #12
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003182:	b2db      	uxtb	r3, r3
}
 8003184:	4618      	mov	r0, r3
 8003186:	370c      	adds	r7, #12
 8003188:	46bd      	mov	sp, r7
 800318a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318e:	4770      	bx	lr

08003190 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b086      	sub	sp, #24
 8003194:	af02      	add	r7, sp, #8
 8003196:	60f8      	str	r0, [r7, #12]
 8003198:	4608      	mov	r0, r1
 800319a:	4611      	mov	r1, r2
 800319c:	461a      	mov	r2, r3
 800319e:	4603      	mov	r3, r0
 80031a0:	817b      	strh	r3, [r7, #10]
 80031a2:	460b      	mov	r3, r1
 80031a4:	813b      	strh	r3, [r7, #8]
 80031a6:	4613      	mov	r3, r2
 80031a8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80031aa:	88fb      	ldrh	r3, [r7, #6]
 80031ac:	b2da      	uxtb	r2, r3
 80031ae:	8979      	ldrh	r1, [r7, #10]
 80031b0:	4b20      	ldr	r3, [pc, #128]	; (8003234 <I2C_RequestMemoryWrite+0xa4>)
 80031b2:	9300      	str	r3, [sp, #0]
 80031b4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80031b8:	68f8      	ldr	r0, [r7, #12]
 80031ba:	f000 fa6f 	bl	800369c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80031be:	69fa      	ldr	r2, [r7, #28]
 80031c0:	69b9      	ldr	r1, [r7, #24]
 80031c2:	68f8      	ldr	r0, [r7, #12]
 80031c4:	f000 f8ff 	bl	80033c6 <I2C_WaitOnTXISFlagUntilTimeout>
 80031c8:	4603      	mov	r3, r0
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d001      	beq.n	80031d2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	e02c      	b.n	800322c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80031d2:	88fb      	ldrh	r3, [r7, #6]
 80031d4:	2b01      	cmp	r3, #1
 80031d6:	d105      	bne.n	80031e4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80031d8:	893b      	ldrh	r3, [r7, #8]
 80031da:	b2da      	uxtb	r2, r3
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	629a      	str	r2, [r3, #40]	; 0x28
 80031e2:	e015      	b.n	8003210 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80031e4:	893b      	ldrh	r3, [r7, #8]
 80031e6:	0a1b      	lsrs	r3, r3, #8
 80031e8:	b29b      	uxth	r3, r3
 80031ea:	b2da      	uxtb	r2, r3
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80031f2:	69fa      	ldr	r2, [r7, #28]
 80031f4:	69b9      	ldr	r1, [r7, #24]
 80031f6:	68f8      	ldr	r0, [r7, #12]
 80031f8:	f000 f8e5 	bl	80033c6 <I2C_WaitOnTXISFlagUntilTimeout>
 80031fc:	4603      	mov	r3, r0
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d001      	beq.n	8003206 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	e012      	b.n	800322c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003206:	893b      	ldrh	r3, [r7, #8]
 8003208:	b2da      	uxtb	r2, r3
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003210:	69fb      	ldr	r3, [r7, #28]
 8003212:	9300      	str	r3, [sp, #0]
 8003214:	69bb      	ldr	r3, [r7, #24]
 8003216:	2200      	movs	r2, #0
 8003218:	2180      	movs	r1, #128	; 0x80
 800321a:	68f8      	ldr	r0, [r7, #12]
 800321c:	f000 f884 	bl	8003328 <I2C_WaitOnFlagUntilTimeout>
 8003220:	4603      	mov	r3, r0
 8003222:	2b00      	cmp	r3, #0
 8003224:	d001      	beq.n	800322a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003226:	2301      	movs	r3, #1
 8003228:	e000      	b.n	800322c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800322a:	2300      	movs	r3, #0
}
 800322c:	4618      	mov	r0, r3
 800322e:	3710      	adds	r7, #16
 8003230:	46bd      	mov	sp, r7
 8003232:	bd80      	pop	{r7, pc}
 8003234:	80002000 	.word	0x80002000

08003238 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b086      	sub	sp, #24
 800323c:	af02      	add	r7, sp, #8
 800323e:	60f8      	str	r0, [r7, #12]
 8003240:	4608      	mov	r0, r1
 8003242:	4611      	mov	r1, r2
 8003244:	461a      	mov	r2, r3
 8003246:	4603      	mov	r3, r0
 8003248:	817b      	strh	r3, [r7, #10]
 800324a:	460b      	mov	r3, r1
 800324c:	813b      	strh	r3, [r7, #8]
 800324e:	4613      	mov	r3, r2
 8003250:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003252:	88fb      	ldrh	r3, [r7, #6]
 8003254:	b2da      	uxtb	r2, r3
 8003256:	8979      	ldrh	r1, [r7, #10]
 8003258:	4b20      	ldr	r3, [pc, #128]	; (80032dc <I2C_RequestMemoryRead+0xa4>)
 800325a:	9300      	str	r3, [sp, #0]
 800325c:	2300      	movs	r3, #0
 800325e:	68f8      	ldr	r0, [r7, #12]
 8003260:	f000 fa1c 	bl	800369c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003264:	69fa      	ldr	r2, [r7, #28]
 8003266:	69b9      	ldr	r1, [r7, #24]
 8003268:	68f8      	ldr	r0, [r7, #12]
 800326a:	f000 f8ac 	bl	80033c6 <I2C_WaitOnTXISFlagUntilTimeout>
 800326e:	4603      	mov	r3, r0
 8003270:	2b00      	cmp	r3, #0
 8003272:	d001      	beq.n	8003278 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003274:	2301      	movs	r3, #1
 8003276:	e02c      	b.n	80032d2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003278:	88fb      	ldrh	r3, [r7, #6]
 800327a:	2b01      	cmp	r3, #1
 800327c:	d105      	bne.n	800328a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800327e:	893b      	ldrh	r3, [r7, #8]
 8003280:	b2da      	uxtb	r2, r3
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	629a      	str	r2, [r3, #40]	; 0x28
 8003288:	e015      	b.n	80032b6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800328a:	893b      	ldrh	r3, [r7, #8]
 800328c:	0a1b      	lsrs	r3, r3, #8
 800328e:	b29b      	uxth	r3, r3
 8003290:	b2da      	uxtb	r2, r3
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003298:	69fa      	ldr	r2, [r7, #28]
 800329a:	69b9      	ldr	r1, [r7, #24]
 800329c:	68f8      	ldr	r0, [r7, #12]
 800329e:	f000 f892 	bl	80033c6 <I2C_WaitOnTXISFlagUntilTimeout>
 80032a2:	4603      	mov	r3, r0
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d001      	beq.n	80032ac <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80032a8:	2301      	movs	r3, #1
 80032aa:	e012      	b.n	80032d2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80032ac:	893b      	ldrh	r3, [r7, #8]
 80032ae:	b2da      	uxtb	r2, r3
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80032b6:	69fb      	ldr	r3, [r7, #28]
 80032b8:	9300      	str	r3, [sp, #0]
 80032ba:	69bb      	ldr	r3, [r7, #24]
 80032bc:	2200      	movs	r2, #0
 80032be:	2140      	movs	r1, #64	; 0x40
 80032c0:	68f8      	ldr	r0, [r7, #12]
 80032c2:	f000 f831 	bl	8003328 <I2C_WaitOnFlagUntilTimeout>
 80032c6:	4603      	mov	r3, r0
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d001      	beq.n	80032d0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80032cc:	2301      	movs	r3, #1
 80032ce:	e000      	b.n	80032d2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80032d0:	2300      	movs	r3, #0
}
 80032d2:	4618      	mov	r0, r3
 80032d4:	3710      	adds	r7, #16
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}
 80032da:	bf00      	nop
 80032dc:	80002000 	.word	0x80002000

080032e0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80032e0:	b480      	push	{r7}
 80032e2:	b083      	sub	sp, #12
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	699b      	ldr	r3, [r3, #24]
 80032ee:	f003 0302 	and.w	r3, r3, #2
 80032f2:	2b02      	cmp	r3, #2
 80032f4:	d103      	bne.n	80032fe <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	2200      	movs	r2, #0
 80032fc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	699b      	ldr	r3, [r3, #24]
 8003304:	f003 0301 	and.w	r3, r3, #1
 8003308:	2b01      	cmp	r3, #1
 800330a:	d007      	beq.n	800331c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	699a      	ldr	r2, [r3, #24]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f042 0201 	orr.w	r2, r2, #1
 800331a:	619a      	str	r2, [r3, #24]
  }
}
 800331c:	bf00      	nop
 800331e:	370c      	adds	r7, #12
 8003320:	46bd      	mov	sp, r7
 8003322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003326:	4770      	bx	lr

08003328 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b084      	sub	sp, #16
 800332c:	af00      	add	r7, sp, #0
 800332e:	60f8      	str	r0, [r7, #12]
 8003330:	60b9      	str	r1, [r7, #8]
 8003332:	603b      	str	r3, [r7, #0]
 8003334:	4613      	mov	r3, r2
 8003336:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003338:	e031      	b.n	800339e <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003340:	d02d      	beq.n	800339e <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003342:	f7ff f87b 	bl	800243c <HAL_GetTick>
 8003346:	4602      	mov	r2, r0
 8003348:	69bb      	ldr	r3, [r7, #24]
 800334a:	1ad3      	subs	r3, r2, r3
 800334c:	683a      	ldr	r2, [r7, #0]
 800334e:	429a      	cmp	r2, r3
 8003350:	d302      	bcc.n	8003358 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d122      	bne.n	800339e <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	699a      	ldr	r2, [r3, #24]
 800335e:	68bb      	ldr	r3, [r7, #8]
 8003360:	4013      	ands	r3, r2
 8003362:	68ba      	ldr	r2, [r7, #8]
 8003364:	429a      	cmp	r2, r3
 8003366:	bf0c      	ite	eq
 8003368:	2301      	moveq	r3, #1
 800336a:	2300      	movne	r3, #0
 800336c:	b2db      	uxtb	r3, r3
 800336e:	461a      	mov	r2, r3
 8003370:	79fb      	ldrb	r3, [r7, #7]
 8003372:	429a      	cmp	r2, r3
 8003374:	d113      	bne.n	800339e <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800337a:	f043 0220 	orr.w	r2, r3, #32
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	2220      	movs	r2, #32
 8003386:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	2200      	movs	r2, #0
 800338e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	2200      	movs	r2, #0
 8003396:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 800339a:	2301      	movs	r3, #1
 800339c:	e00f      	b.n	80033be <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	699a      	ldr	r2, [r3, #24]
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	4013      	ands	r3, r2
 80033a8:	68ba      	ldr	r2, [r7, #8]
 80033aa:	429a      	cmp	r2, r3
 80033ac:	bf0c      	ite	eq
 80033ae:	2301      	moveq	r3, #1
 80033b0:	2300      	movne	r3, #0
 80033b2:	b2db      	uxtb	r3, r3
 80033b4:	461a      	mov	r2, r3
 80033b6:	79fb      	ldrb	r3, [r7, #7]
 80033b8:	429a      	cmp	r2, r3
 80033ba:	d0be      	beq.n	800333a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80033bc:	2300      	movs	r3, #0
}
 80033be:	4618      	mov	r0, r3
 80033c0:	3710      	adds	r7, #16
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd80      	pop	{r7, pc}

080033c6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80033c6:	b580      	push	{r7, lr}
 80033c8:	b084      	sub	sp, #16
 80033ca:	af00      	add	r7, sp, #0
 80033cc:	60f8      	str	r0, [r7, #12]
 80033ce:	60b9      	str	r1, [r7, #8]
 80033d0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80033d2:	e033      	b.n	800343c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80033d4:	687a      	ldr	r2, [r7, #4]
 80033d6:	68b9      	ldr	r1, [r7, #8]
 80033d8:	68f8      	ldr	r0, [r7, #12]
 80033da:	f000 f87f 	bl	80034dc <I2C_IsErrorOccurred>
 80033de:	4603      	mov	r3, r0
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d001      	beq.n	80033e8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80033e4:	2301      	movs	r3, #1
 80033e6:	e031      	b.n	800344c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033e8:	68bb      	ldr	r3, [r7, #8]
 80033ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033ee:	d025      	beq.n	800343c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033f0:	f7ff f824 	bl	800243c <HAL_GetTick>
 80033f4:	4602      	mov	r2, r0
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	1ad3      	subs	r3, r2, r3
 80033fa:	68ba      	ldr	r2, [r7, #8]
 80033fc:	429a      	cmp	r2, r3
 80033fe:	d302      	bcc.n	8003406 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d11a      	bne.n	800343c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	699b      	ldr	r3, [r3, #24]
 800340c:	f003 0302 	and.w	r3, r3, #2
 8003410:	2b02      	cmp	r3, #2
 8003412:	d013      	beq.n	800343c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003418:	f043 0220 	orr.w	r2, r3, #32
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	2220      	movs	r2, #32
 8003424:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	2200      	movs	r2, #0
 800342c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	2200      	movs	r2, #0
 8003434:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003438:	2301      	movs	r3, #1
 800343a:	e007      	b.n	800344c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	699b      	ldr	r3, [r3, #24]
 8003442:	f003 0302 	and.w	r3, r3, #2
 8003446:	2b02      	cmp	r3, #2
 8003448:	d1c4      	bne.n	80033d4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800344a:	2300      	movs	r3, #0
}
 800344c:	4618      	mov	r0, r3
 800344e:	3710      	adds	r7, #16
 8003450:	46bd      	mov	sp, r7
 8003452:	bd80      	pop	{r7, pc}

08003454 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b084      	sub	sp, #16
 8003458:	af00      	add	r7, sp, #0
 800345a:	60f8      	str	r0, [r7, #12]
 800345c:	60b9      	str	r1, [r7, #8]
 800345e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003460:	e02f      	b.n	80034c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003462:	687a      	ldr	r2, [r7, #4]
 8003464:	68b9      	ldr	r1, [r7, #8]
 8003466:	68f8      	ldr	r0, [r7, #12]
 8003468:	f000 f838 	bl	80034dc <I2C_IsErrorOccurred>
 800346c:	4603      	mov	r3, r0
 800346e:	2b00      	cmp	r3, #0
 8003470:	d001      	beq.n	8003476 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003472:	2301      	movs	r3, #1
 8003474:	e02d      	b.n	80034d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003476:	f7fe ffe1 	bl	800243c <HAL_GetTick>
 800347a:	4602      	mov	r2, r0
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	1ad3      	subs	r3, r2, r3
 8003480:	68ba      	ldr	r2, [r7, #8]
 8003482:	429a      	cmp	r2, r3
 8003484:	d302      	bcc.n	800348c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003486:	68bb      	ldr	r3, [r7, #8]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d11a      	bne.n	80034c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	699b      	ldr	r3, [r3, #24]
 8003492:	f003 0320 	and.w	r3, r3, #32
 8003496:	2b20      	cmp	r3, #32
 8003498:	d013      	beq.n	80034c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800349e:	f043 0220 	orr.w	r2, r3, #32
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	2220      	movs	r2, #32
 80034aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	2200      	movs	r2, #0
 80034b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	2200      	movs	r2, #0
 80034ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80034be:	2301      	movs	r3, #1
 80034c0:	e007      	b.n	80034d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	699b      	ldr	r3, [r3, #24]
 80034c8:	f003 0320 	and.w	r3, r3, #32
 80034cc:	2b20      	cmp	r3, #32
 80034ce:	d1c8      	bne.n	8003462 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80034d0:	2300      	movs	r3, #0
}
 80034d2:	4618      	mov	r0, r3
 80034d4:	3710      	adds	r7, #16
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}
	...

080034dc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b08a      	sub	sp, #40	; 0x28
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	60f8      	str	r0, [r7, #12]
 80034e4:	60b9      	str	r1, [r7, #8]
 80034e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80034e8:	2300      	movs	r3, #0
 80034ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	699b      	ldr	r3, [r3, #24]
 80034f4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80034f6:	2300      	movs	r3, #0
 80034f8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80034fe:	69bb      	ldr	r3, [r7, #24]
 8003500:	f003 0310 	and.w	r3, r3, #16
 8003504:	2b00      	cmp	r3, #0
 8003506:	d068      	beq.n	80035da <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	2210      	movs	r2, #16
 800350e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003510:	e049      	b.n	80035a6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003512:	68bb      	ldr	r3, [r7, #8]
 8003514:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003518:	d045      	beq.n	80035a6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800351a:	f7fe ff8f 	bl	800243c <HAL_GetTick>
 800351e:	4602      	mov	r2, r0
 8003520:	69fb      	ldr	r3, [r7, #28]
 8003522:	1ad3      	subs	r3, r2, r3
 8003524:	68ba      	ldr	r2, [r7, #8]
 8003526:	429a      	cmp	r2, r3
 8003528:	d302      	bcc.n	8003530 <I2C_IsErrorOccurred+0x54>
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d13a      	bne.n	80035a6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800353a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003542:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	699b      	ldr	r3, [r3, #24]
 800354a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800354e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003552:	d121      	bne.n	8003598 <I2C_IsErrorOccurred+0xbc>
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800355a:	d01d      	beq.n	8003598 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800355c:	7cfb      	ldrb	r3, [r7, #19]
 800355e:	2b20      	cmp	r3, #32
 8003560:	d01a      	beq.n	8003598 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	685a      	ldr	r2, [r3, #4]
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003570:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003572:	f7fe ff63 	bl	800243c <HAL_GetTick>
 8003576:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003578:	e00e      	b.n	8003598 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800357a:	f7fe ff5f 	bl	800243c <HAL_GetTick>
 800357e:	4602      	mov	r2, r0
 8003580:	69fb      	ldr	r3, [r7, #28]
 8003582:	1ad3      	subs	r3, r2, r3
 8003584:	2b19      	cmp	r3, #25
 8003586:	d907      	bls.n	8003598 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003588:	6a3b      	ldr	r3, [r7, #32]
 800358a:	f043 0320 	orr.w	r3, r3, #32
 800358e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003590:	2301      	movs	r3, #1
 8003592:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8003596:	e006      	b.n	80035a6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	699b      	ldr	r3, [r3, #24]
 800359e:	f003 0320 	and.w	r3, r3, #32
 80035a2:	2b20      	cmp	r3, #32
 80035a4:	d1e9      	bne.n	800357a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	699b      	ldr	r3, [r3, #24]
 80035ac:	f003 0320 	and.w	r3, r3, #32
 80035b0:	2b20      	cmp	r3, #32
 80035b2:	d003      	beq.n	80035bc <I2C_IsErrorOccurred+0xe0>
 80035b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d0aa      	beq.n	8003512 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80035bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d103      	bne.n	80035cc <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	2220      	movs	r2, #32
 80035ca:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80035cc:	6a3b      	ldr	r3, [r7, #32]
 80035ce:	f043 0304 	orr.w	r3, r3, #4
 80035d2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80035d4:	2301      	movs	r3, #1
 80035d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	699b      	ldr	r3, [r3, #24]
 80035e0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80035e2:	69bb      	ldr	r3, [r7, #24]
 80035e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d00b      	beq.n	8003604 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80035ec:	6a3b      	ldr	r3, [r7, #32]
 80035ee:	f043 0301 	orr.w	r3, r3, #1
 80035f2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80035fc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80035fe:	2301      	movs	r3, #1
 8003600:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003604:	69bb      	ldr	r3, [r7, #24]
 8003606:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800360a:	2b00      	cmp	r3, #0
 800360c:	d00b      	beq.n	8003626 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800360e:	6a3b      	ldr	r3, [r7, #32]
 8003610:	f043 0308 	orr.w	r3, r3, #8
 8003614:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800361e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003620:	2301      	movs	r3, #1
 8003622:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003626:	69bb      	ldr	r3, [r7, #24]
 8003628:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800362c:	2b00      	cmp	r3, #0
 800362e:	d00b      	beq.n	8003648 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003630:	6a3b      	ldr	r3, [r7, #32]
 8003632:	f043 0302 	orr.w	r3, r3, #2
 8003636:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003640:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003642:	2301      	movs	r3, #1
 8003644:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003648:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800364c:	2b00      	cmp	r3, #0
 800364e:	d01c      	beq.n	800368a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003650:	68f8      	ldr	r0, [r7, #12]
 8003652:	f7ff fe45 	bl	80032e0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	6859      	ldr	r1, [r3, #4]
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681a      	ldr	r2, [r3, #0]
 8003660:	4b0d      	ldr	r3, [pc, #52]	; (8003698 <I2C_IsErrorOccurred+0x1bc>)
 8003662:	400b      	ands	r3, r1
 8003664:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800366a:	6a3b      	ldr	r3, [r7, #32]
 800366c:	431a      	orrs	r2, r3
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	2220      	movs	r2, #32
 8003676:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	2200      	movs	r2, #0
 800367e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	2200      	movs	r2, #0
 8003686:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800368a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800368e:	4618      	mov	r0, r3
 8003690:	3728      	adds	r7, #40	; 0x28
 8003692:	46bd      	mov	sp, r7
 8003694:	bd80      	pop	{r7, pc}
 8003696:	bf00      	nop
 8003698:	fe00e800 	.word	0xfe00e800

0800369c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800369c:	b480      	push	{r7}
 800369e:	b087      	sub	sp, #28
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	60f8      	str	r0, [r7, #12]
 80036a4:	607b      	str	r3, [r7, #4]
 80036a6:	460b      	mov	r3, r1
 80036a8:	817b      	strh	r3, [r7, #10]
 80036aa:	4613      	mov	r3, r2
 80036ac:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80036ae:	897b      	ldrh	r3, [r7, #10]
 80036b0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80036b4:	7a7b      	ldrb	r3, [r7, #9]
 80036b6:	041b      	lsls	r3, r3, #16
 80036b8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80036bc:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80036c2:	6a3b      	ldr	r3, [r7, #32]
 80036c4:	4313      	orrs	r3, r2
 80036c6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80036ca:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	685a      	ldr	r2, [r3, #4]
 80036d2:	6a3b      	ldr	r3, [r7, #32]
 80036d4:	0d5b      	lsrs	r3, r3, #21
 80036d6:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80036da:	4b08      	ldr	r3, [pc, #32]	; (80036fc <I2C_TransferConfig+0x60>)
 80036dc:	430b      	orrs	r3, r1
 80036de:	43db      	mvns	r3, r3
 80036e0:	ea02 0103 	and.w	r1, r2, r3
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	697a      	ldr	r2, [r7, #20]
 80036ea:	430a      	orrs	r2, r1
 80036ec:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80036ee:	bf00      	nop
 80036f0:	371c      	adds	r7, #28
 80036f2:	46bd      	mov	sp, r7
 80036f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f8:	4770      	bx	lr
 80036fa:	bf00      	nop
 80036fc:	03ff63ff 	.word	0x03ff63ff

08003700 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003700:	b480      	push	{r7}
 8003702:	b083      	sub	sp, #12
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
 8003708:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003710:	b2db      	uxtb	r3, r3
 8003712:	2b20      	cmp	r3, #32
 8003714:	d138      	bne.n	8003788 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800371c:	2b01      	cmp	r3, #1
 800371e:	d101      	bne.n	8003724 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003720:	2302      	movs	r3, #2
 8003722:	e032      	b.n	800378a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2201      	movs	r2, #1
 8003728:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2224      	movs	r2, #36	; 0x24
 8003730:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	681a      	ldr	r2, [r3, #0]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f022 0201 	bic.w	r2, r2, #1
 8003742:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	681a      	ldr	r2, [r3, #0]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003752:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	6819      	ldr	r1, [r3, #0]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	683a      	ldr	r2, [r7, #0]
 8003760:	430a      	orrs	r2, r1
 8003762:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	681a      	ldr	r2, [r3, #0]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f042 0201 	orr.w	r2, r2, #1
 8003772:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2220      	movs	r2, #32
 8003778:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2200      	movs	r2, #0
 8003780:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003784:	2300      	movs	r3, #0
 8003786:	e000      	b.n	800378a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003788:	2302      	movs	r3, #2
  }
}
 800378a:	4618      	mov	r0, r3
 800378c:	370c      	adds	r7, #12
 800378e:	46bd      	mov	sp, r7
 8003790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003794:	4770      	bx	lr

08003796 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003796:	b480      	push	{r7}
 8003798:	b085      	sub	sp, #20
 800379a:	af00      	add	r7, sp, #0
 800379c:	6078      	str	r0, [r7, #4]
 800379e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037a6:	b2db      	uxtb	r3, r3
 80037a8:	2b20      	cmp	r3, #32
 80037aa:	d139      	bne.n	8003820 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80037b2:	2b01      	cmp	r3, #1
 80037b4:	d101      	bne.n	80037ba <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80037b6:	2302      	movs	r3, #2
 80037b8:	e033      	b.n	8003822 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2201      	movs	r2, #1
 80037be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2224      	movs	r2, #36	; 0x24
 80037c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	681a      	ldr	r2, [r3, #0]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f022 0201 	bic.w	r2, r2, #1
 80037d8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80037e8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	021b      	lsls	r3, r3, #8
 80037ee:	68fa      	ldr	r2, [r7, #12]
 80037f0:	4313      	orrs	r3, r2
 80037f2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	68fa      	ldr	r2, [r7, #12]
 80037fa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	681a      	ldr	r2, [r3, #0]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f042 0201 	orr.w	r2, r2, #1
 800380a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2220      	movs	r2, #32
 8003810:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2200      	movs	r2, #0
 8003818:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800381c:	2300      	movs	r3, #0
 800381e:	e000      	b.n	8003822 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003820:	2302      	movs	r3, #2
  }
}
 8003822:	4618      	mov	r0, r3
 8003824:	3714      	adds	r7, #20
 8003826:	46bd      	mov	sp, r7
 8003828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382c:	4770      	bx	lr

0800382e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800382e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003830:	b08b      	sub	sp, #44	; 0x2c
 8003832:	af06      	add	r7, sp, #24
 8003834:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d101      	bne.n	8003840 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800383c:	2301      	movs	r3, #1
 800383e:	e0c4      	b.n	80039ca <HAL_PCD_Init+0x19c>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8003846:	b2db      	uxtb	r3, r3
 8003848:	2b00      	cmp	r3, #0
 800384a:	d106      	bne.n	800385a <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2200      	movs	r2, #0
 8003850:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003854:	6878      	ldr	r0, [r7, #4]
 8003856:	f7fd fcbf 	bl	80011d8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2203      	movs	r2, #3
 800385e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4618      	mov	r0, r3
 8003868:	f002 fb57 	bl	8005f1a <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800386c:	2300      	movs	r3, #0
 800386e:	73fb      	strb	r3, [r7, #15]
 8003870:	e040      	b.n	80038f4 <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003872:	7bfb      	ldrb	r3, [r7, #15]
 8003874:	6879      	ldr	r1, [r7, #4]
 8003876:	1c5a      	adds	r2, r3, #1
 8003878:	4613      	mov	r3, r2
 800387a:	009b      	lsls	r3, r3, #2
 800387c:	4413      	add	r3, r2
 800387e:	00db      	lsls	r3, r3, #3
 8003880:	440b      	add	r3, r1
 8003882:	3301      	adds	r3, #1
 8003884:	2201      	movs	r2, #1
 8003886:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003888:	7bfb      	ldrb	r3, [r7, #15]
 800388a:	6879      	ldr	r1, [r7, #4]
 800388c:	1c5a      	adds	r2, r3, #1
 800388e:	4613      	mov	r3, r2
 8003890:	009b      	lsls	r3, r3, #2
 8003892:	4413      	add	r3, r2
 8003894:	00db      	lsls	r3, r3, #3
 8003896:	440b      	add	r3, r1
 8003898:	7bfa      	ldrb	r2, [r7, #15]
 800389a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800389c:	7bfb      	ldrb	r3, [r7, #15]
 800389e:	6879      	ldr	r1, [r7, #4]
 80038a0:	1c5a      	adds	r2, r3, #1
 80038a2:	4613      	mov	r3, r2
 80038a4:	009b      	lsls	r3, r3, #2
 80038a6:	4413      	add	r3, r2
 80038a8:	00db      	lsls	r3, r3, #3
 80038aa:	440b      	add	r3, r1
 80038ac:	3303      	adds	r3, #3
 80038ae:	2200      	movs	r2, #0
 80038b0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80038b2:	7bfa      	ldrb	r2, [r7, #15]
 80038b4:	6879      	ldr	r1, [r7, #4]
 80038b6:	4613      	mov	r3, r2
 80038b8:	009b      	lsls	r3, r3, #2
 80038ba:	4413      	add	r3, r2
 80038bc:	00db      	lsls	r3, r3, #3
 80038be:	440b      	add	r3, r1
 80038c0:	3338      	adds	r3, #56	; 0x38
 80038c2:	2200      	movs	r2, #0
 80038c4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80038c6:	7bfa      	ldrb	r2, [r7, #15]
 80038c8:	6879      	ldr	r1, [r7, #4]
 80038ca:	4613      	mov	r3, r2
 80038cc:	009b      	lsls	r3, r3, #2
 80038ce:	4413      	add	r3, r2
 80038d0:	00db      	lsls	r3, r3, #3
 80038d2:	440b      	add	r3, r1
 80038d4:	333c      	adds	r3, #60	; 0x3c
 80038d6:	2200      	movs	r2, #0
 80038d8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80038da:	7bfa      	ldrb	r2, [r7, #15]
 80038dc:	6879      	ldr	r1, [r7, #4]
 80038de:	4613      	mov	r3, r2
 80038e0:	009b      	lsls	r3, r3, #2
 80038e2:	4413      	add	r3, r2
 80038e4:	00db      	lsls	r3, r3, #3
 80038e6:	440b      	add	r3, r1
 80038e8:	3340      	adds	r3, #64	; 0x40
 80038ea:	2200      	movs	r2, #0
 80038ec:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80038ee:	7bfb      	ldrb	r3, [r7, #15]
 80038f0:	3301      	adds	r3, #1
 80038f2:	73fb      	strb	r3, [r7, #15]
 80038f4:	7bfa      	ldrb	r2, [r7, #15]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	429a      	cmp	r2, r3
 80038fc:	d3b9      	bcc.n	8003872 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80038fe:	2300      	movs	r3, #0
 8003900:	73fb      	strb	r3, [r7, #15]
 8003902:	e044      	b.n	800398e <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003904:	7bfa      	ldrb	r2, [r7, #15]
 8003906:	6879      	ldr	r1, [r7, #4]
 8003908:	4613      	mov	r3, r2
 800390a:	009b      	lsls	r3, r3, #2
 800390c:	4413      	add	r3, r2
 800390e:	00db      	lsls	r3, r3, #3
 8003910:	440b      	add	r3, r1
 8003912:	f203 1369 	addw	r3, r3, #361	; 0x169
 8003916:	2200      	movs	r2, #0
 8003918:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800391a:	7bfa      	ldrb	r2, [r7, #15]
 800391c:	6879      	ldr	r1, [r7, #4]
 800391e:	4613      	mov	r3, r2
 8003920:	009b      	lsls	r3, r3, #2
 8003922:	4413      	add	r3, r2
 8003924:	00db      	lsls	r3, r3, #3
 8003926:	440b      	add	r3, r1
 8003928:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800392c:	7bfa      	ldrb	r2, [r7, #15]
 800392e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003930:	7bfa      	ldrb	r2, [r7, #15]
 8003932:	6879      	ldr	r1, [r7, #4]
 8003934:	4613      	mov	r3, r2
 8003936:	009b      	lsls	r3, r3, #2
 8003938:	4413      	add	r3, r2
 800393a:	00db      	lsls	r3, r3, #3
 800393c:	440b      	add	r3, r1
 800393e:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8003942:	2200      	movs	r2, #0
 8003944:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003946:	7bfa      	ldrb	r2, [r7, #15]
 8003948:	6879      	ldr	r1, [r7, #4]
 800394a:	4613      	mov	r3, r2
 800394c:	009b      	lsls	r3, r3, #2
 800394e:	4413      	add	r3, r2
 8003950:	00db      	lsls	r3, r3, #3
 8003952:	440b      	add	r3, r1
 8003954:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8003958:	2200      	movs	r2, #0
 800395a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800395c:	7bfa      	ldrb	r2, [r7, #15]
 800395e:	6879      	ldr	r1, [r7, #4]
 8003960:	4613      	mov	r3, r2
 8003962:	009b      	lsls	r3, r3, #2
 8003964:	4413      	add	r3, r2
 8003966:	00db      	lsls	r3, r3, #3
 8003968:	440b      	add	r3, r1
 800396a:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800396e:	2200      	movs	r2, #0
 8003970:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003972:	7bfa      	ldrb	r2, [r7, #15]
 8003974:	6879      	ldr	r1, [r7, #4]
 8003976:	4613      	mov	r3, r2
 8003978:	009b      	lsls	r3, r3, #2
 800397a:	4413      	add	r3, r2
 800397c:	00db      	lsls	r3, r3, #3
 800397e:	440b      	add	r3, r1
 8003980:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003984:	2200      	movs	r2, #0
 8003986:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003988:	7bfb      	ldrb	r3, [r7, #15]
 800398a:	3301      	adds	r3, #1
 800398c:	73fb      	strb	r3, [r7, #15]
 800398e:	7bfa      	ldrb	r2, [r7, #15]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	429a      	cmp	r2, r3
 8003996:	d3b5      	bcc.n	8003904 <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	603b      	str	r3, [r7, #0]
 800399e:	687e      	ldr	r6, [r7, #4]
 80039a0:	466d      	mov	r5, sp
 80039a2:	f106 0410 	add.w	r4, r6, #16
 80039a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80039a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80039aa:	6823      	ldr	r3, [r4, #0]
 80039ac:	602b      	str	r3, [r5, #0]
 80039ae:	1d33      	adds	r3, r6, #4
 80039b0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80039b2:	6838      	ldr	r0, [r7, #0]
 80039b4:	f002 facc 	bl	8005f50 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2200      	movs	r2, #0
 80039bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2201      	movs	r2, #1
 80039c4:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 80039c8:	2300      	movs	r3, #0
}
 80039ca:	4618      	mov	r0, r3
 80039cc:	3714      	adds	r7, #20
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080039d4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80039da:	af00      	add	r7, sp, #0
 80039dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039e0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80039e4:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80039e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039ea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d102      	bne.n	80039fa <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80039f4:	2301      	movs	r3, #1
 80039f6:	f001 b823 	b.w	8004a40 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039fe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f003 0301 	and.w	r3, r3, #1
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	f000 817d 	beq.w	8003d0a <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003a10:	4bbc      	ldr	r3, [pc, #752]	; (8003d04 <HAL_RCC_OscConfig+0x330>)
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	f003 030c 	and.w	r3, r3, #12
 8003a18:	2b04      	cmp	r3, #4
 8003a1a:	d00c      	beq.n	8003a36 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003a1c:	4bb9      	ldr	r3, [pc, #740]	; (8003d04 <HAL_RCC_OscConfig+0x330>)
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	f003 030c 	and.w	r3, r3, #12
 8003a24:	2b08      	cmp	r3, #8
 8003a26:	d15c      	bne.n	8003ae2 <HAL_RCC_OscConfig+0x10e>
 8003a28:	4bb6      	ldr	r3, [pc, #728]	; (8003d04 <HAL_RCC_OscConfig+0x330>)
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a34:	d155      	bne.n	8003ae2 <HAL_RCC_OscConfig+0x10e>
 8003a36:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003a3a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a3e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8003a42:	fa93 f3a3 	rbit	r3, r3
 8003a46:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003a4a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a4e:	fab3 f383 	clz	r3, r3
 8003a52:	b2db      	uxtb	r3, r3
 8003a54:	095b      	lsrs	r3, r3, #5
 8003a56:	b2db      	uxtb	r3, r3
 8003a58:	f043 0301 	orr.w	r3, r3, #1
 8003a5c:	b2db      	uxtb	r3, r3
 8003a5e:	2b01      	cmp	r3, #1
 8003a60:	d102      	bne.n	8003a68 <HAL_RCC_OscConfig+0x94>
 8003a62:	4ba8      	ldr	r3, [pc, #672]	; (8003d04 <HAL_RCC_OscConfig+0x330>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	e015      	b.n	8003a94 <HAL_RCC_OscConfig+0xc0>
 8003a68:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003a6c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a70:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8003a74:	fa93 f3a3 	rbit	r3, r3
 8003a78:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8003a7c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003a80:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8003a84:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8003a88:	fa93 f3a3 	rbit	r3, r3
 8003a8c:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8003a90:	4b9c      	ldr	r3, [pc, #624]	; (8003d04 <HAL_RCC_OscConfig+0x330>)
 8003a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a94:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003a98:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8003a9c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8003aa0:	fa92 f2a2 	rbit	r2, r2
 8003aa4:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8003aa8:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8003aac:	fab2 f282 	clz	r2, r2
 8003ab0:	b2d2      	uxtb	r2, r2
 8003ab2:	f042 0220 	orr.w	r2, r2, #32
 8003ab6:	b2d2      	uxtb	r2, r2
 8003ab8:	f002 021f 	and.w	r2, r2, #31
 8003abc:	2101      	movs	r1, #1
 8003abe:	fa01 f202 	lsl.w	r2, r1, r2
 8003ac2:	4013      	ands	r3, r2
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	f000 811f 	beq.w	8003d08 <HAL_RCC_OscConfig+0x334>
 8003aca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ace:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	f040 8116 	bne.w	8003d08 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8003adc:	2301      	movs	r3, #1
 8003ade:	f000 bfaf 	b.w	8004a40 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ae2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ae6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003af2:	d106      	bne.n	8003b02 <HAL_RCC_OscConfig+0x12e>
 8003af4:	4b83      	ldr	r3, [pc, #524]	; (8003d04 <HAL_RCC_OscConfig+0x330>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a82      	ldr	r2, [pc, #520]	; (8003d04 <HAL_RCC_OscConfig+0x330>)
 8003afa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003afe:	6013      	str	r3, [r2, #0]
 8003b00:	e036      	b.n	8003b70 <HAL_RCC_OscConfig+0x19c>
 8003b02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b06:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d10c      	bne.n	8003b2c <HAL_RCC_OscConfig+0x158>
 8003b12:	4b7c      	ldr	r3, [pc, #496]	; (8003d04 <HAL_RCC_OscConfig+0x330>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a7b      	ldr	r2, [pc, #492]	; (8003d04 <HAL_RCC_OscConfig+0x330>)
 8003b18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b1c:	6013      	str	r3, [r2, #0]
 8003b1e:	4b79      	ldr	r3, [pc, #484]	; (8003d04 <HAL_RCC_OscConfig+0x330>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a78      	ldr	r2, [pc, #480]	; (8003d04 <HAL_RCC_OscConfig+0x330>)
 8003b24:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b28:	6013      	str	r3, [r2, #0]
 8003b2a:	e021      	b.n	8003b70 <HAL_RCC_OscConfig+0x19c>
 8003b2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b30:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b3c:	d10c      	bne.n	8003b58 <HAL_RCC_OscConfig+0x184>
 8003b3e:	4b71      	ldr	r3, [pc, #452]	; (8003d04 <HAL_RCC_OscConfig+0x330>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a70      	ldr	r2, [pc, #448]	; (8003d04 <HAL_RCC_OscConfig+0x330>)
 8003b44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b48:	6013      	str	r3, [r2, #0]
 8003b4a:	4b6e      	ldr	r3, [pc, #440]	; (8003d04 <HAL_RCC_OscConfig+0x330>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a6d      	ldr	r2, [pc, #436]	; (8003d04 <HAL_RCC_OscConfig+0x330>)
 8003b50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b54:	6013      	str	r3, [r2, #0]
 8003b56:	e00b      	b.n	8003b70 <HAL_RCC_OscConfig+0x19c>
 8003b58:	4b6a      	ldr	r3, [pc, #424]	; (8003d04 <HAL_RCC_OscConfig+0x330>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a69      	ldr	r2, [pc, #420]	; (8003d04 <HAL_RCC_OscConfig+0x330>)
 8003b5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b62:	6013      	str	r3, [r2, #0]
 8003b64:	4b67      	ldr	r3, [pc, #412]	; (8003d04 <HAL_RCC_OscConfig+0x330>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a66      	ldr	r2, [pc, #408]	; (8003d04 <HAL_RCC_OscConfig+0x330>)
 8003b6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b6e:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003b70:	4b64      	ldr	r3, [pc, #400]	; (8003d04 <HAL_RCC_OscConfig+0x330>)
 8003b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b74:	f023 020f 	bic.w	r2, r3, #15
 8003b78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b7c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	689b      	ldr	r3, [r3, #8]
 8003b84:	495f      	ldr	r1, [pc, #380]	; (8003d04 <HAL_RCC_OscConfig+0x330>)
 8003b86:	4313      	orrs	r3, r2
 8003b88:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b8e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d059      	beq.n	8003c4e <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b9a:	f7fe fc4f 	bl	800243c <HAL_GetTick>
 8003b9e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ba2:	e00a      	b.n	8003bba <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ba4:	f7fe fc4a 	bl	800243c <HAL_GetTick>
 8003ba8:	4602      	mov	r2, r0
 8003baa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003bae:	1ad3      	subs	r3, r2, r3
 8003bb0:	2b64      	cmp	r3, #100	; 0x64
 8003bb2:	d902      	bls.n	8003bba <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8003bb4:	2303      	movs	r3, #3
 8003bb6:	f000 bf43 	b.w	8004a40 <HAL_RCC_OscConfig+0x106c>
 8003bba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003bbe:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bc2:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8003bc6:	fa93 f3a3 	rbit	r3, r3
 8003bca:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8003bce:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bd2:	fab3 f383 	clz	r3, r3
 8003bd6:	b2db      	uxtb	r3, r3
 8003bd8:	095b      	lsrs	r3, r3, #5
 8003bda:	b2db      	uxtb	r3, r3
 8003bdc:	f043 0301 	orr.w	r3, r3, #1
 8003be0:	b2db      	uxtb	r3, r3
 8003be2:	2b01      	cmp	r3, #1
 8003be4:	d102      	bne.n	8003bec <HAL_RCC_OscConfig+0x218>
 8003be6:	4b47      	ldr	r3, [pc, #284]	; (8003d04 <HAL_RCC_OscConfig+0x330>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	e015      	b.n	8003c18 <HAL_RCC_OscConfig+0x244>
 8003bec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003bf0:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bf4:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8003bf8:	fa93 f3a3 	rbit	r3, r3
 8003bfc:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8003c00:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003c04:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8003c08:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8003c0c:	fa93 f3a3 	rbit	r3, r3
 8003c10:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8003c14:	4b3b      	ldr	r3, [pc, #236]	; (8003d04 <HAL_RCC_OscConfig+0x330>)
 8003c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c18:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003c1c:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8003c20:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8003c24:	fa92 f2a2 	rbit	r2, r2
 8003c28:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8003c2c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8003c30:	fab2 f282 	clz	r2, r2
 8003c34:	b2d2      	uxtb	r2, r2
 8003c36:	f042 0220 	orr.w	r2, r2, #32
 8003c3a:	b2d2      	uxtb	r2, r2
 8003c3c:	f002 021f 	and.w	r2, r2, #31
 8003c40:	2101      	movs	r1, #1
 8003c42:	fa01 f202 	lsl.w	r2, r1, r2
 8003c46:	4013      	ands	r3, r2
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d0ab      	beq.n	8003ba4 <HAL_RCC_OscConfig+0x1d0>
 8003c4c:	e05d      	b.n	8003d0a <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c4e:	f7fe fbf5 	bl	800243c <HAL_GetTick>
 8003c52:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c56:	e00a      	b.n	8003c6e <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c58:	f7fe fbf0 	bl	800243c <HAL_GetTick>
 8003c5c:	4602      	mov	r2, r0
 8003c5e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003c62:	1ad3      	subs	r3, r2, r3
 8003c64:	2b64      	cmp	r3, #100	; 0x64
 8003c66:	d902      	bls.n	8003c6e <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8003c68:	2303      	movs	r3, #3
 8003c6a:	f000 bee9 	b.w	8004a40 <HAL_RCC_OscConfig+0x106c>
 8003c6e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003c72:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c76:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8003c7a:	fa93 f3a3 	rbit	r3, r3
 8003c7e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8003c82:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c86:	fab3 f383 	clz	r3, r3
 8003c8a:	b2db      	uxtb	r3, r3
 8003c8c:	095b      	lsrs	r3, r3, #5
 8003c8e:	b2db      	uxtb	r3, r3
 8003c90:	f043 0301 	orr.w	r3, r3, #1
 8003c94:	b2db      	uxtb	r3, r3
 8003c96:	2b01      	cmp	r3, #1
 8003c98:	d102      	bne.n	8003ca0 <HAL_RCC_OscConfig+0x2cc>
 8003c9a:	4b1a      	ldr	r3, [pc, #104]	; (8003d04 <HAL_RCC_OscConfig+0x330>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	e015      	b.n	8003ccc <HAL_RCC_OscConfig+0x2f8>
 8003ca0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003ca4:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ca8:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8003cac:	fa93 f3a3 	rbit	r3, r3
 8003cb0:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8003cb4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003cb8:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8003cbc:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8003cc0:	fa93 f3a3 	rbit	r3, r3
 8003cc4:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8003cc8:	4b0e      	ldr	r3, [pc, #56]	; (8003d04 <HAL_RCC_OscConfig+0x330>)
 8003cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ccc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003cd0:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8003cd4:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8003cd8:	fa92 f2a2 	rbit	r2, r2
 8003cdc:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8003ce0:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8003ce4:	fab2 f282 	clz	r2, r2
 8003ce8:	b2d2      	uxtb	r2, r2
 8003cea:	f042 0220 	orr.w	r2, r2, #32
 8003cee:	b2d2      	uxtb	r2, r2
 8003cf0:	f002 021f 	and.w	r2, r2, #31
 8003cf4:	2101      	movs	r1, #1
 8003cf6:	fa01 f202 	lsl.w	r2, r1, r2
 8003cfa:	4013      	ands	r3, r2
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d1ab      	bne.n	8003c58 <HAL_RCC_OscConfig+0x284>
 8003d00:	e003      	b.n	8003d0a <HAL_RCC_OscConfig+0x336>
 8003d02:	bf00      	nop
 8003d04:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d0e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f003 0302 	and.w	r3, r3, #2
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	f000 817d 	beq.w	800401a <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003d20:	4ba6      	ldr	r3, [pc, #664]	; (8003fbc <HAL_RCC_OscConfig+0x5e8>)
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	f003 030c 	and.w	r3, r3, #12
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d00b      	beq.n	8003d44 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003d2c:	4ba3      	ldr	r3, [pc, #652]	; (8003fbc <HAL_RCC_OscConfig+0x5e8>)
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	f003 030c 	and.w	r3, r3, #12
 8003d34:	2b08      	cmp	r3, #8
 8003d36:	d172      	bne.n	8003e1e <HAL_RCC_OscConfig+0x44a>
 8003d38:	4ba0      	ldr	r3, [pc, #640]	; (8003fbc <HAL_RCC_OscConfig+0x5e8>)
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d16c      	bne.n	8003e1e <HAL_RCC_OscConfig+0x44a>
 8003d44:	2302      	movs	r3, #2
 8003d46:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d4a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8003d4e:	fa93 f3a3 	rbit	r3, r3
 8003d52:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8003d56:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d5a:	fab3 f383 	clz	r3, r3
 8003d5e:	b2db      	uxtb	r3, r3
 8003d60:	095b      	lsrs	r3, r3, #5
 8003d62:	b2db      	uxtb	r3, r3
 8003d64:	f043 0301 	orr.w	r3, r3, #1
 8003d68:	b2db      	uxtb	r3, r3
 8003d6a:	2b01      	cmp	r3, #1
 8003d6c:	d102      	bne.n	8003d74 <HAL_RCC_OscConfig+0x3a0>
 8003d6e:	4b93      	ldr	r3, [pc, #588]	; (8003fbc <HAL_RCC_OscConfig+0x5e8>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	e013      	b.n	8003d9c <HAL_RCC_OscConfig+0x3c8>
 8003d74:	2302      	movs	r3, #2
 8003d76:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d7a:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8003d7e:	fa93 f3a3 	rbit	r3, r3
 8003d82:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8003d86:	2302      	movs	r3, #2
 8003d88:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8003d8c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003d90:	fa93 f3a3 	rbit	r3, r3
 8003d94:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8003d98:	4b88      	ldr	r3, [pc, #544]	; (8003fbc <HAL_RCC_OscConfig+0x5e8>)
 8003d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d9c:	2202      	movs	r2, #2
 8003d9e:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8003da2:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8003da6:	fa92 f2a2 	rbit	r2, r2
 8003daa:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8003dae:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8003db2:	fab2 f282 	clz	r2, r2
 8003db6:	b2d2      	uxtb	r2, r2
 8003db8:	f042 0220 	orr.w	r2, r2, #32
 8003dbc:	b2d2      	uxtb	r2, r2
 8003dbe:	f002 021f 	and.w	r2, r2, #31
 8003dc2:	2101      	movs	r1, #1
 8003dc4:	fa01 f202 	lsl.w	r2, r1, r2
 8003dc8:	4013      	ands	r3, r2
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d00a      	beq.n	8003de4 <HAL_RCC_OscConfig+0x410>
 8003dce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003dd2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	691b      	ldr	r3, [r3, #16]
 8003dda:	2b01      	cmp	r3, #1
 8003ddc:	d002      	beq.n	8003de4 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	f000 be2e 	b.w	8004a40 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003de4:	4b75      	ldr	r3, [pc, #468]	; (8003fbc <HAL_RCC_OscConfig+0x5e8>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003dec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003df0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	695b      	ldr	r3, [r3, #20]
 8003df8:	21f8      	movs	r1, #248	; 0xf8
 8003dfa:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dfe:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8003e02:	fa91 f1a1 	rbit	r1, r1
 8003e06:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8003e0a:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8003e0e:	fab1 f181 	clz	r1, r1
 8003e12:	b2c9      	uxtb	r1, r1
 8003e14:	408b      	lsls	r3, r1
 8003e16:	4969      	ldr	r1, [pc, #420]	; (8003fbc <HAL_RCC_OscConfig+0x5e8>)
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e1c:	e0fd      	b.n	800401a <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003e1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e22:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	691b      	ldr	r3, [r3, #16]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	f000 8088 	beq.w	8003f40 <HAL_RCC_OscConfig+0x56c>
 8003e30:	2301      	movs	r3, #1
 8003e32:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e36:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8003e3a:	fa93 f3a3 	rbit	r3, r3
 8003e3e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8003e42:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e46:	fab3 f383 	clz	r3, r3
 8003e4a:	b2db      	uxtb	r3, r3
 8003e4c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003e50:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003e54:	009b      	lsls	r3, r3, #2
 8003e56:	461a      	mov	r2, r3
 8003e58:	2301      	movs	r3, #1
 8003e5a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e5c:	f7fe faee 	bl	800243c <HAL_GetTick>
 8003e60:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e64:	e00a      	b.n	8003e7c <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e66:	f7fe fae9 	bl	800243c <HAL_GetTick>
 8003e6a:	4602      	mov	r2, r0
 8003e6c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003e70:	1ad3      	subs	r3, r2, r3
 8003e72:	2b02      	cmp	r3, #2
 8003e74:	d902      	bls.n	8003e7c <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8003e76:	2303      	movs	r3, #3
 8003e78:	f000 bde2 	b.w	8004a40 <HAL_RCC_OscConfig+0x106c>
 8003e7c:	2302      	movs	r3, #2
 8003e7e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e82:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8003e86:	fa93 f3a3 	rbit	r3, r3
 8003e8a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8003e8e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e92:	fab3 f383 	clz	r3, r3
 8003e96:	b2db      	uxtb	r3, r3
 8003e98:	095b      	lsrs	r3, r3, #5
 8003e9a:	b2db      	uxtb	r3, r3
 8003e9c:	f043 0301 	orr.w	r3, r3, #1
 8003ea0:	b2db      	uxtb	r3, r3
 8003ea2:	2b01      	cmp	r3, #1
 8003ea4:	d102      	bne.n	8003eac <HAL_RCC_OscConfig+0x4d8>
 8003ea6:	4b45      	ldr	r3, [pc, #276]	; (8003fbc <HAL_RCC_OscConfig+0x5e8>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	e013      	b.n	8003ed4 <HAL_RCC_OscConfig+0x500>
 8003eac:	2302      	movs	r3, #2
 8003eae:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eb2:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8003eb6:	fa93 f3a3 	rbit	r3, r3
 8003eba:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8003ebe:	2302      	movs	r3, #2
 8003ec0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003ec4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8003ec8:	fa93 f3a3 	rbit	r3, r3
 8003ecc:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8003ed0:	4b3a      	ldr	r3, [pc, #232]	; (8003fbc <HAL_RCC_OscConfig+0x5e8>)
 8003ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed4:	2202      	movs	r2, #2
 8003ed6:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8003eda:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8003ede:	fa92 f2a2 	rbit	r2, r2
 8003ee2:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8003ee6:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8003eea:	fab2 f282 	clz	r2, r2
 8003eee:	b2d2      	uxtb	r2, r2
 8003ef0:	f042 0220 	orr.w	r2, r2, #32
 8003ef4:	b2d2      	uxtb	r2, r2
 8003ef6:	f002 021f 	and.w	r2, r2, #31
 8003efa:	2101      	movs	r1, #1
 8003efc:	fa01 f202 	lsl.w	r2, r1, r2
 8003f00:	4013      	ands	r3, r2
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d0af      	beq.n	8003e66 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f06:	4b2d      	ldr	r3, [pc, #180]	; (8003fbc <HAL_RCC_OscConfig+0x5e8>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f12:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	695b      	ldr	r3, [r3, #20]
 8003f1a:	21f8      	movs	r1, #248	; 0xf8
 8003f1c:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f20:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8003f24:	fa91 f1a1 	rbit	r1, r1
 8003f28:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8003f2c:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8003f30:	fab1 f181 	clz	r1, r1
 8003f34:	b2c9      	uxtb	r1, r1
 8003f36:	408b      	lsls	r3, r1
 8003f38:	4920      	ldr	r1, [pc, #128]	; (8003fbc <HAL_RCC_OscConfig+0x5e8>)
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	600b      	str	r3, [r1, #0]
 8003f3e:	e06c      	b.n	800401a <HAL_RCC_OscConfig+0x646>
 8003f40:	2301      	movs	r3, #1
 8003f42:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f46:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003f4a:	fa93 f3a3 	rbit	r3, r3
 8003f4e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8003f52:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f56:	fab3 f383 	clz	r3, r3
 8003f5a:	b2db      	uxtb	r3, r3
 8003f5c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003f60:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003f64:	009b      	lsls	r3, r3, #2
 8003f66:	461a      	mov	r2, r3
 8003f68:	2300      	movs	r3, #0
 8003f6a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f6c:	f7fe fa66 	bl	800243c <HAL_GetTick>
 8003f70:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f74:	e00a      	b.n	8003f8c <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f76:	f7fe fa61 	bl	800243c <HAL_GetTick>
 8003f7a:	4602      	mov	r2, r0
 8003f7c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003f80:	1ad3      	subs	r3, r2, r3
 8003f82:	2b02      	cmp	r3, #2
 8003f84:	d902      	bls.n	8003f8c <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8003f86:	2303      	movs	r3, #3
 8003f88:	f000 bd5a 	b.w	8004a40 <HAL_RCC_OscConfig+0x106c>
 8003f8c:	2302      	movs	r3, #2
 8003f8e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f92:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003f96:	fa93 f3a3 	rbit	r3, r3
 8003f9a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8003f9e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003fa2:	fab3 f383 	clz	r3, r3
 8003fa6:	b2db      	uxtb	r3, r3
 8003fa8:	095b      	lsrs	r3, r3, #5
 8003faa:	b2db      	uxtb	r3, r3
 8003fac:	f043 0301 	orr.w	r3, r3, #1
 8003fb0:	b2db      	uxtb	r3, r3
 8003fb2:	2b01      	cmp	r3, #1
 8003fb4:	d104      	bne.n	8003fc0 <HAL_RCC_OscConfig+0x5ec>
 8003fb6:	4b01      	ldr	r3, [pc, #4]	; (8003fbc <HAL_RCC_OscConfig+0x5e8>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	e015      	b.n	8003fe8 <HAL_RCC_OscConfig+0x614>
 8003fbc:	40021000 	.word	0x40021000
 8003fc0:	2302      	movs	r3, #2
 8003fc2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fc6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003fca:	fa93 f3a3 	rbit	r3, r3
 8003fce:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003fd2:	2302      	movs	r3, #2
 8003fd4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003fd8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003fdc:	fa93 f3a3 	rbit	r3, r3
 8003fe0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003fe4:	4bc8      	ldr	r3, [pc, #800]	; (8004308 <HAL_RCC_OscConfig+0x934>)
 8003fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe8:	2202      	movs	r2, #2
 8003fea:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8003fee:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8003ff2:	fa92 f2a2 	rbit	r2, r2
 8003ff6:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8003ffa:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8003ffe:	fab2 f282 	clz	r2, r2
 8004002:	b2d2      	uxtb	r2, r2
 8004004:	f042 0220 	orr.w	r2, r2, #32
 8004008:	b2d2      	uxtb	r2, r2
 800400a:	f002 021f 	and.w	r2, r2, #31
 800400e:	2101      	movs	r1, #1
 8004010:	fa01 f202 	lsl.w	r2, r1, r2
 8004014:	4013      	ands	r3, r2
 8004016:	2b00      	cmp	r3, #0
 8004018:	d1ad      	bne.n	8003f76 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800401a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800401e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f003 0308 	and.w	r3, r3, #8
 800402a:	2b00      	cmp	r3, #0
 800402c:	f000 8110 	beq.w	8004250 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004030:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004034:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	699b      	ldr	r3, [r3, #24]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d079      	beq.n	8004134 <HAL_RCC_OscConfig+0x760>
 8004040:	2301      	movs	r3, #1
 8004042:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004046:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800404a:	fa93 f3a3 	rbit	r3, r3
 800404e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8004052:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004056:	fab3 f383 	clz	r3, r3
 800405a:	b2db      	uxtb	r3, r3
 800405c:	461a      	mov	r2, r3
 800405e:	4bab      	ldr	r3, [pc, #684]	; (800430c <HAL_RCC_OscConfig+0x938>)
 8004060:	4413      	add	r3, r2
 8004062:	009b      	lsls	r3, r3, #2
 8004064:	461a      	mov	r2, r3
 8004066:	2301      	movs	r3, #1
 8004068:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800406a:	f7fe f9e7 	bl	800243c <HAL_GetTick>
 800406e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004072:	e00a      	b.n	800408a <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004074:	f7fe f9e2 	bl	800243c <HAL_GetTick>
 8004078:	4602      	mov	r2, r0
 800407a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800407e:	1ad3      	subs	r3, r2, r3
 8004080:	2b02      	cmp	r3, #2
 8004082:	d902      	bls.n	800408a <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8004084:	2303      	movs	r3, #3
 8004086:	f000 bcdb 	b.w	8004a40 <HAL_RCC_OscConfig+0x106c>
 800408a:	2302      	movs	r3, #2
 800408c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004090:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8004094:	fa93 f3a3 	rbit	r3, r3
 8004098:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800409c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040a0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80040a4:	2202      	movs	r2, #2
 80040a6:	601a      	str	r2, [r3, #0]
 80040a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040ac:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	fa93 f2a3 	rbit	r2, r3
 80040b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040ba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80040be:	601a      	str	r2, [r3, #0]
 80040c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80040c8:	2202      	movs	r2, #2
 80040ca:	601a      	str	r2, [r3, #0]
 80040cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	fa93 f2a3 	rbit	r2, r3
 80040da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040de:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80040e2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040e4:	4b88      	ldr	r3, [pc, #544]	; (8004308 <HAL_RCC_OscConfig+0x934>)
 80040e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80040e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040ec:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80040f0:	2102      	movs	r1, #2
 80040f2:	6019      	str	r1, [r3, #0]
 80040f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040f8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	fa93 f1a3 	rbit	r1, r3
 8004102:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004106:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800410a:	6019      	str	r1, [r3, #0]
  return result;
 800410c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004110:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	fab3 f383 	clz	r3, r3
 800411a:	b2db      	uxtb	r3, r3
 800411c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004120:	b2db      	uxtb	r3, r3
 8004122:	f003 031f 	and.w	r3, r3, #31
 8004126:	2101      	movs	r1, #1
 8004128:	fa01 f303 	lsl.w	r3, r1, r3
 800412c:	4013      	ands	r3, r2
 800412e:	2b00      	cmp	r3, #0
 8004130:	d0a0      	beq.n	8004074 <HAL_RCC_OscConfig+0x6a0>
 8004132:	e08d      	b.n	8004250 <HAL_RCC_OscConfig+0x87c>
 8004134:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004138:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800413c:	2201      	movs	r2, #1
 800413e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004140:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004144:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	fa93 f2a3 	rbit	r2, r3
 800414e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004152:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004156:	601a      	str	r2, [r3, #0]
  return result;
 8004158:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800415c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004160:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004162:	fab3 f383 	clz	r3, r3
 8004166:	b2db      	uxtb	r3, r3
 8004168:	461a      	mov	r2, r3
 800416a:	4b68      	ldr	r3, [pc, #416]	; (800430c <HAL_RCC_OscConfig+0x938>)
 800416c:	4413      	add	r3, r2
 800416e:	009b      	lsls	r3, r3, #2
 8004170:	461a      	mov	r2, r3
 8004172:	2300      	movs	r3, #0
 8004174:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004176:	f7fe f961 	bl	800243c <HAL_GetTick>
 800417a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800417e:	e00a      	b.n	8004196 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004180:	f7fe f95c 	bl	800243c <HAL_GetTick>
 8004184:	4602      	mov	r2, r0
 8004186:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800418a:	1ad3      	subs	r3, r2, r3
 800418c:	2b02      	cmp	r3, #2
 800418e:	d902      	bls.n	8004196 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8004190:	2303      	movs	r3, #3
 8004192:	f000 bc55 	b.w	8004a40 <HAL_RCC_OscConfig+0x106c>
 8004196:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800419a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800419e:	2202      	movs	r2, #2
 80041a0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041a6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	fa93 f2a3 	rbit	r2, r3
 80041b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041b4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80041b8:	601a      	str	r2, [r3, #0]
 80041ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041be:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80041c2:	2202      	movs	r2, #2
 80041c4:	601a      	str	r2, [r3, #0]
 80041c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041ca:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	fa93 f2a3 	rbit	r2, r3
 80041d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041d8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80041dc:	601a      	str	r2, [r3, #0]
 80041de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80041e6:	2202      	movs	r2, #2
 80041e8:	601a      	str	r2, [r3, #0]
 80041ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	fa93 f2a3 	rbit	r2, r3
 80041f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041fc:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8004200:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004202:	4b41      	ldr	r3, [pc, #260]	; (8004308 <HAL_RCC_OscConfig+0x934>)
 8004204:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004206:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800420a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800420e:	2102      	movs	r1, #2
 8004210:	6019      	str	r1, [r3, #0]
 8004212:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004216:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	fa93 f1a3 	rbit	r1, r3
 8004220:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004224:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8004228:	6019      	str	r1, [r3, #0]
  return result;
 800422a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800422e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	fab3 f383 	clz	r3, r3
 8004238:	b2db      	uxtb	r3, r3
 800423a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800423e:	b2db      	uxtb	r3, r3
 8004240:	f003 031f 	and.w	r3, r3, #31
 8004244:	2101      	movs	r1, #1
 8004246:	fa01 f303 	lsl.w	r3, r1, r3
 800424a:	4013      	ands	r3, r2
 800424c:	2b00      	cmp	r3, #0
 800424e:	d197      	bne.n	8004180 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004250:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004254:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f003 0304 	and.w	r3, r3, #4
 8004260:	2b00      	cmp	r3, #0
 8004262:	f000 81a1 	beq.w	80045a8 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004266:	2300      	movs	r3, #0
 8004268:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800426c:	4b26      	ldr	r3, [pc, #152]	; (8004308 <HAL_RCC_OscConfig+0x934>)
 800426e:	69db      	ldr	r3, [r3, #28]
 8004270:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004274:	2b00      	cmp	r3, #0
 8004276:	d116      	bne.n	80042a6 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004278:	4b23      	ldr	r3, [pc, #140]	; (8004308 <HAL_RCC_OscConfig+0x934>)
 800427a:	69db      	ldr	r3, [r3, #28]
 800427c:	4a22      	ldr	r2, [pc, #136]	; (8004308 <HAL_RCC_OscConfig+0x934>)
 800427e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004282:	61d3      	str	r3, [r2, #28]
 8004284:	4b20      	ldr	r3, [pc, #128]	; (8004308 <HAL_RCC_OscConfig+0x934>)
 8004286:	69db      	ldr	r3, [r3, #28]
 8004288:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800428c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004290:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8004294:	601a      	str	r2, [r3, #0]
 8004296:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800429a:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800429e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80042a0:	2301      	movs	r3, #1
 80042a2:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042a6:	4b1a      	ldr	r3, [pc, #104]	; (8004310 <HAL_RCC_OscConfig+0x93c>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d11a      	bne.n	80042e8 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80042b2:	4b17      	ldr	r3, [pc, #92]	; (8004310 <HAL_RCC_OscConfig+0x93c>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4a16      	ldr	r2, [pc, #88]	; (8004310 <HAL_RCC_OscConfig+0x93c>)
 80042b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042bc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80042be:	f7fe f8bd 	bl	800243c <HAL_GetTick>
 80042c2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042c6:	e009      	b.n	80042dc <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042c8:	f7fe f8b8 	bl	800243c <HAL_GetTick>
 80042cc:	4602      	mov	r2, r0
 80042ce:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80042d2:	1ad3      	subs	r3, r2, r3
 80042d4:	2b64      	cmp	r3, #100	; 0x64
 80042d6:	d901      	bls.n	80042dc <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80042d8:	2303      	movs	r3, #3
 80042da:	e3b1      	b.n	8004a40 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042dc:	4b0c      	ldr	r3, [pc, #48]	; (8004310 <HAL_RCC_OscConfig+0x93c>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d0ef      	beq.n	80042c8 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80042e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042ec:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	68db      	ldr	r3, [r3, #12]
 80042f4:	2b01      	cmp	r3, #1
 80042f6:	d10d      	bne.n	8004314 <HAL_RCC_OscConfig+0x940>
 80042f8:	4b03      	ldr	r3, [pc, #12]	; (8004308 <HAL_RCC_OscConfig+0x934>)
 80042fa:	6a1b      	ldr	r3, [r3, #32]
 80042fc:	4a02      	ldr	r2, [pc, #8]	; (8004308 <HAL_RCC_OscConfig+0x934>)
 80042fe:	f043 0301 	orr.w	r3, r3, #1
 8004302:	6213      	str	r3, [r2, #32]
 8004304:	e03c      	b.n	8004380 <HAL_RCC_OscConfig+0x9ac>
 8004306:	bf00      	nop
 8004308:	40021000 	.word	0x40021000
 800430c:	10908120 	.word	0x10908120
 8004310:	40007000 	.word	0x40007000
 8004314:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004318:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	68db      	ldr	r3, [r3, #12]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d10c      	bne.n	800433e <HAL_RCC_OscConfig+0x96a>
 8004324:	4bc1      	ldr	r3, [pc, #772]	; (800462c <HAL_RCC_OscConfig+0xc58>)
 8004326:	6a1b      	ldr	r3, [r3, #32]
 8004328:	4ac0      	ldr	r2, [pc, #768]	; (800462c <HAL_RCC_OscConfig+0xc58>)
 800432a:	f023 0301 	bic.w	r3, r3, #1
 800432e:	6213      	str	r3, [r2, #32]
 8004330:	4bbe      	ldr	r3, [pc, #760]	; (800462c <HAL_RCC_OscConfig+0xc58>)
 8004332:	6a1b      	ldr	r3, [r3, #32]
 8004334:	4abd      	ldr	r2, [pc, #756]	; (800462c <HAL_RCC_OscConfig+0xc58>)
 8004336:	f023 0304 	bic.w	r3, r3, #4
 800433a:	6213      	str	r3, [r2, #32]
 800433c:	e020      	b.n	8004380 <HAL_RCC_OscConfig+0x9ac>
 800433e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004342:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	68db      	ldr	r3, [r3, #12]
 800434a:	2b05      	cmp	r3, #5
 800434c:	d10c      	bne.n	8004368 <HAL_RCC_OscConfig+0x994>
 800434e:	4bb7      	ldr	r3, [pc, #732]	; (800462c <HAL_RCC_OscConfig+0xc58>)
 8004350:	6a1b      	ldr	r3, [r3, #32]
 8004352:	4ab6      	ldr	r2, [pc, #728]	; (800462c <HAL_RCC_OscConfig+0xc58>)
 8004354:	f043 0304 	orr.w	r3, r3, #4
 8004358:	6213      	str	r3, [r2, #32]
 800435a:	4bb4      	ldr	r3, [pc, #720]	; (800462c <HAL_RCC_OscConfig+0xc58>)
 800435c:	6a1b      	ldr	r3, [r3, #32]
 800435e:	4ab3      	ldr	r2, [pc, #716]	; (800462c <HAL_RCC_OscConfig+0xc58>)
 8004360:	f043 0301 	orr.w	r3, r3, #1
 8004364:	6213      	str	r3, [r2, #32]
 8004366:	e00b      	b.n	8004380 <HAL_RCC_OscConfig+0x9ac>
 8004368:	4bb0      	ldr	r3, [pc, #704]	; (800462c <HAL_RCC_OscConfig+0xc58>)
 800436a:	6a1b      	ldr	r3, [r3, #32]
 800436c:	4aaf      	ldr	r2, [pc, #700]	; (800462c <HAL_RCC_OscConfig+0xc58>)
 800436e:	f023 0301 	bic.w	r3, r3, #1
 8004372:	6213      	str	r3, [r2, #32]
 8004374:	4bad      	ldr	r3, [pc, #692]	; (800462c <HAL_RCC_OscConfig+0xc58>)
 8004376:	6a1b      	ldr	r3, [r3, #32]
 8004378:	4aac      	ldr	r2, [pc, #688]	; (800462c <HAL_RCC_OscConfig+0xc58>)
 800437a:	f023 0304 	bic.w	r3, r3, #4
 800437e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004380:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004384:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	68db      	ldr	r3, [r3, #12]
 800438c:	2b00      	cmp	r3, #0
 800438e:	f000 8081 	beq.w	8004494 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004392:	f7fe f853 	bl	800243c <HAL_GetTick>
 8004396:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800439a:	e00b      	b.n	80043b4 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800439c:	f7fe f84e 	bl	800243c <HAL_GetTick>
 80043a0:	4602      	mov	r2, r0
 80043a2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80043a6:	1ad3      	subs	r3, r2, r3
 80043a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d901      	bls.n	80043b4 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80043b0:	2303      	movs	r3, #3
 80043b2:	e345      	b.n	8004a40 <HAL_RCC_OscConfig+0x106c>
 80043b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043b8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80043bc:	2202      	movs	r2, #2
 80043be:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043c4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	fa93 f2a3 	rbit	r2, r3
 80043ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043d2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80043d6:	601a      	str	r2, [r3, #0]
 80043d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043dc:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80043e0:	2202      	movs	r2, #2
 80043e2:	601a      	str	r2, [r3, #0]
 80043e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043e8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	fa93 f2a3 	rbit	r2, r3
 80043f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043f6:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80043fa:	601a      	str	r2, [r3, #0]
  return result;
 80043fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004400:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8004404:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004406:	fab3 f383 	clz	r3, r3
 800440a:	b2db      	uxtb	r3, r3
 800440c:	095b      	lsrs	r3, r3, #5
 800440e:	b2db      	uxtb	r3, r3
 8004410:	f043 0302 	orr.w	r3, r3, #2
 8004414:	b2db      	uxtb	r3, r3
 8004416:	2b02      	cmp	r3, #2
 8004418:	d102      	bne.n	8004420 <HAL_RCC_OscConfig+0xa4c>
 800441a:	4b84      	ldr	r3, [pc, #528]	; (800462c <HAL_RCC_OscConfig+0xc58>)
 800441c:	6a1b      	ldr	r3, [r3, #32]
 800441e:	e013      	b.n	8004448 <HAL_RCC_OscConfig+0xa74>
 8004420:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004424:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8004428:	2202      	movs	r2, #2
 800442a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800442c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004430:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	fa93 f2a3 	rbit	r2, r3
 800443a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800443e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8004442:	601a      	str	r2, [r3, #0]
 8004444:	4b79      	ldr	r3, [pc, #484]	; (800462c <HAL_RCC_OscConfig+0xc58>)
 8004446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004448:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800444c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8004450:	2102      	movs	r1, #2
 8004452:	6011      	str	r1, [r2, #0]
 8004454:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004458:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800445c:	6812      	ldr	r2, [r2, #0]
 800445e:	fa92 f1a2 	rbit	r1, r2
 8004462:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004466:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800446a:	6011      	str	r1, [r2, #0]
  return result;
 800446c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004470:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8004474:	6812      	ldr	r2, [r2, #0]
 8004476:	fab2 f282 	clz	r2, r2
 800447a:	b2d2      	uxtb	r2, r2
 800447c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004480:	b2d2      	uxtb	r2, r2
 8004482:	f002 021f 	and.w	r2, r2, #31
 8004486:	2101      	movs	r1, #1
 8004488:	fa01 f202 	lsl.w	r2, r1, r2
 800448c:	4013      	ands	r3, r2
 800448e:	2b00      	cmp	r3, #0
 8004490:	d084      	beq.n	800439c <HAL_RCC_OscConfig+0x9c8>
 8004492:	e07f      	b.n	8004594 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004494:	f7fd ffd2 	bl	800243c <HAL_GetTick>
 8004498:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800449c:	e00b      	b.n	80044b6 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800449e:	f7fd ffcd 	bl	800243c <HAL_GetTick>
 80044a2:	4602      	mov	r2, r0
 80044a4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80044a8:	1ad3      	subs	r3, r2, r3
 80044aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d901      	bls.n	80044b6 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80044b2:	2303      	movs	r3, #3
 80044b4:	e2c4      	b.n	8004a40 <HAL_RCC_OscConfig+0x106c>
 80044b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044ba:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80044be:	2202      	movs	r2, #2
 80044c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044c6:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	fa93 f2a3 	rbit	r2, r3
 80044d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044d4:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80044d8:	601a      	str	r2, [r3, #0]
 80044da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044de:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80044e2:	2202      	movs	r2, #2
 80044e4:	601a      	str	r2, [r3, #0]
 80044e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044ea:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	fa93 f2a3 	rbit	r2, r3
 80044f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044f8:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80044fc:	601a      	str	r2, [r3, #0]
  return result;
 80044fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004502:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8004506:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004508:	fab3 f383 	clz	r3, r3
 800450c:	b2db      	uxtb	r3, r3
 800450e:	095b      	lsrs	r3, r3, #5
 8004510:	b2db      	uxtb	r3, r3
 8004512:	f043 0302 	orr.w	r3, r3, #2
 8004516:	b2db      	uxtb	r3, r3
 8004518:	2b02      	cmp	r3, #2
 800451a:	d102      	bne.n	8004522 <HAL_RCC_OscConfig+0xb4e>
 800451c:	4b43      	ldr	r3, [pc, #268]	; (800462c <HAL_RCC_OscConfig+0xc58>)
 800451e:	6a1b      	ldr	r3, [r3, #32]
 8004520:	e013      	b.n	800454a <HAL_RCC_OscConfig+0xb76>
 8004522:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004526:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800452a:	2202      	movs	r2, #2
 800452c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800452e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004532:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	fa93 f2a3 	rbit	r2, r3
 800453c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004540:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8004544:	601a      	str	r2, [r3, #0]
 8004546:	4b39      	ldr	r3, [pc, #228]	; (800462c <HAL_RCC_OscConfig+0xc58>)
 8004548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800454a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800454e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8004552:	2102      	movs	r1, #2
 8004554:	6011      	str	r1, [r2, #0]
 8004556:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800455a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800455e:	6812      	ldr	r2, [r2, #0]
 8004560:	fa92 f1a2 	rbit	r1, r2
 8004564:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004568:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800456c:	6011      	str	r1, [r2, #0]
  return result;
 800456e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004572:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8004576:	6812      	ldr	r2, [r2, #0]
 8004578:	fab2 f282 	clz	r2, r2
 800457c:	b2d2      	uxtb	r2, r2
 800457e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004582:	b2d2      	uxtb	r2, r2
 8004584:	f002 021f 	and.w	r2, r2, #31
 8004588:	2101      	movs	r1, #1
 800458a:	fa01 f202 	lsl.w	r2, r1, r2
 800458e:	4013      	ands	r3, r2
 8004590:	2b00      	cmp	r3, #0
 8004592:	d184      	bne.n	800449e <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004594:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8004598:	2b01      	cmp	r3, #1
 800459a:	d105      	bne.n	80045a8 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800459c:	4b23      	ldr	r3, [pc, #140]	; (800462c <HAL_RCC_OscConfig+0xc58>)
 800459e:	69db      	ldr	r3, [r3, #28]
 80045a0:	4a22      	ldr	r2, [pc, #136]	; (800462c <HAL_RCC_OscConfig+0xc58>)
 80045a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80045a6:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80045a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045ac:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	69db      	ldr	r3, [r3, #28]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	f000 8242 	beq.w	8004a3e <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80045ba:	4b1c      	ldr	r3, [pc, #112]	; (800462c <HAL_RCC_OscConfig+0xc58>)
 80045bc:	685b      	ldr	r3, [r3, #4]
 80045be:	f003 030c 	and.w	r3, r3, #12
 80045c2:	2b08      	cmp	r3, #8
 80045c4:	f000 8213 	beq.w	80049ee <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80045c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045cc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	69db      	ldr	r3, [r3, #28]
 80045d4:	2b02      	cmp	r3, #2
 80045d6:	f040 8162 	bne.w	800489e <HAL_RCC_OscConfig+0xeca>
 80045da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045de:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80045e2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80045e6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045ec:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	fa93 f2a3 	rbit	r2, r3
 80045f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045fa:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80045fe:	601a      	str	r2, [r3, #0]
  return result;
 8004600:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004604:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8004608:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800460a:	fab3 f383 	clz	r3, r3
 800460e:	b2db      	uxtb	r3, r3
 8004610:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004614:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004618:	009b      	lsls	r3, r3, #2
 800461a:	461a      	mov	r2, r3
 800461c:	2300      	movs	r3, #0
 800461e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004620:	f7fd ff0c 	bl	800243c <HAL_GetTick>
 8004624:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004628:	e00c      	b.n	8004644 <HAL_RCC_OscConfig+0xc70>
 800462a:	bf00      	nop
 800462c:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004630:	f7fd ff04 	bl	800243c <HAL_GetTick>
 8004634:	4602      	mov	r2, r0
 8004636:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800463a:	1ad3      	subs	r3, r2, r3
 800463c:	2b02      	cmp	r3, #2
 800463e:	d901      	bls.n	8004644 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8004640:	2303      	movs	r3, #3
 8004642:	e1fd      	b.n	8004a40 <HAL_RCC_OscConfig+0x106c>
 8004644:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004648:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800464c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004650:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004652:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004656:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	fa93 f2a3 	rbit	r2, r3
 8004660:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004664:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004668:	601a      	str	r2, [r3, #0]
  return result;
 800466a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800466e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8004672:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004674:	fab3 f383 	clz	r3, r3
 8004678:	b2db      	uxtb	r3, r3
 800467a:	095b      	lsrs	r3, r3, #5
 800467c:	b2db      	uxtb	r3, r3
 800467e:	f043 0301 	orr.w	r3, r3, #1
 8004682:	b2db      	uxtb	r3, r3
 8004684:	2b01      	cmp	r3, #1
 8004686:	d102      	bne.n	800468e <HAL_RCC_OscConfig+0xcba>
 8004688:	4bb0      	ldr	r3, [pc, #704]	; (800494c <HAL_RCC_OscConfig+0xf78>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	e027      	b.n	80046de <HAL_RCC_OscConfig+0xd0a>
 800468e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004692:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8004696:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800469a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800469c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046a0:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	fa93 f2a3 	rbit	r2, r3
 80046aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046ae:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80046b2:	601a      	str	r2, [r3, #0]
 80046b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046b8:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80046bc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80046c0:	601a      	str	r2, [r3, #0]
 80046c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046c6:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	fa93 f2a3 	rbit	r2, r3
 80046d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046d4:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80046d8:	601a      	str	r2, [r3, #0]
 80046da:	4b9c      	ldr	r3, [pc, #624]	; (800494c <HAL_RCC_OscConfig+0xf78>)
 80046dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046de:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80046e2:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80046e6:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80046ea:	6011      	str	r1, [r2, #0]
 80046ec:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80046f0:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80046f4:	6812      	ldr	r2, [r2, #0]
 80046f6:	fa92 f1a2 	rbit	r1, r2
 80046fa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80046fe:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8004702:	6011      	str	r1, [r2, #0]
  return result;
 8004704:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004708:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800470c:	6812      	ldr	r2, [r2, #0]
 800470e:	fab2 f282 	clz	r2, r2
 8004712:	b2d2      	uxtb	r2, r2
 8004714:	f042 0220 	orr.w	r2, r2, #32
 8004718:	b2d2      	uxtb	r2, r2
 800471a:	f002 021f 	and.w	r2, r2, #31
 800471e:	2101      	movs	r1, #1
 8004720:	fa01 f202 	lsl.w	r2, r1, r2
 8004724:	4013      	ands	r3, r2
 8004726:	2b00      	cmp	r3, #0
 8004728:	d182      	bne.n	8004630 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800472a:	4b88      	ldr	r3, [pc, #544]	; (800494c <HAL_RCC_OscConfig+0xf78>)
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004732:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004736:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800473e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004742:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	6a1b      	ldr	r3, [r3, #32]
 800474a:	430b      	orrs	r3, r1
 800474c:	497f      	ldr	r1, [pc, #508]	; (800494c <HAL_RCC_OscConfig+0xf78>)
 800474e:	4313      	orrs	r3, r2
 8004750:	604b      	str	r3, [r1, #4]
 8004752:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004756:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800475a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800475e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004760:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004764:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	fa93 f2a3 	rbit	r2, r3
 800476e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004772:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8004776:	601a      	str	r2, [r3, #0]
  return result;
 8004778:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800477c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8004780:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004782:	fab3 f383 	clz	r3, r3
 8004786:	b2db      	uxtb	r3, r3
 8004788:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800478c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004790:	009b      	lsls	r3, r3, #2
 8004792:	461a      	mov	r2, r3
 8004794:	2301      	movs	r3, #1
 8004796:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004798:	f7fd fe50 	bl	800243c <HAL_GetTick>
 800479c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80047a0:	e009      	b.n	80047b6 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047a2:	f7fd fe4b 	bl	800243c <HAL_GetTick>
 80047a6:	4602      	mov	r2, r0
 80047a8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80047ac:	1ad3      	subs	r3, r2, r3
 80047ae:	2b02      	cmp	r3, #2
 80047b0:	d901      	bls.n	80047b6 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80047b2:	2303      	movs	r3, #3
 80047b4:	e144      	b.n	8004a40 <HAL_RCC_OscConfig+0x106c>
 80047b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047ba:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80047be:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80047c2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047c8:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	fa93 f2a3 	rbit	r2, r3
 80047d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047d6:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80047da:	601a      	str	r2, [r3, #0]
  return result;
 80047dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047e0:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80047e4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80047e6:	fab3 f383 	clz	r3, r3
 80047ea:	b2db      	uxtb	r3, r3
 80047ec:	095b      	lsrs	r3, r3, #5
 80047ee:	b2db      	uxtb	r3, r3
 80047f0:	f043 0301 	orr.w	r3, r3, #1
 80047f4:	b2db      	uxtb	r3, r3
 80047f6:	2b01      	cmp	r3, #1
 80047f8:	d102      	bne.n	8004800 <HAL_RCC_OscConfig+0xe2c>
 80047fa:	4b54      	ldr	r3, [pc, #336]	; (800494c <HAL_RCC_OscConfig+0xf78>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	e027      	b.n	8004850 <HAL_RCC_OscConfig+0xe7c>
 8004800:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004804:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8004808:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800480c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800480e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004812:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	fa93 f2a3 	rbit	r2, r3
 800481c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004820:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8004824:	601a      	str	r2, [r3, #0]
 8004826:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800482a:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800482e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004832:	601a      	str	r2, [r3, #0]
 8004834:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004838:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	fa93 f2a3 	rbit	r2, r3
 8004842:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004846:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800484a:	601a      	str	r2, [r3, #0]
 800484c:	4b3f      	ldr	r3, [pc, #252]	; (800494c <HAL_RCC_OscConfig+0xf78>)
 800484e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004850:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004854:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8004858:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800485c:	6011      	str	r1, [r2, #0]
 800485e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004862:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8004866:	6812      	ldr	r2, [r2, #0]
 8004868:	fa92 f1a2 	rbit	r1, r2
 800486c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004870:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8004874:	6011      	str	r1, [r2, #0]
  return result;
 8004876:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800487a:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800487e:	6812      	ldr	r2, [r2, #0]
 8004880:	fab2 f282 	clz	r2, r2
 8004884:	b2d2      	uxtb	r2, r2
 8004886:	f042 0220 	orr.w	r2, r2, #32
 800488a:	b2d2      	uxtb	r2, r2
 800488c:	f002 021f 	and.w	r2, r2, #31
 8004890:	2101      	movs	r1, #1
 8004892:	fa01 f202 	lsl.w	r2, r1, r2
 8004896:	4013      	ands	r3, r2
 8004898:	2b00      	cmp	r3, #0
 800489a:	d082      	beq.n	80047a2 <HAL_RCC_OscConfig+0xdce>
 800489c:	e0cf      	b.n	8004a3e <HAL_RCC_OscConfig+0x106a>
 800489e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048a2:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80048a6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80048aa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048b0:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	fa93 f2a3 	rbit	r2, r3
 80048ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048be:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80048c2:	601a      	str	r2, [r3, #0]
  return result;
 80048c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048c8:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80048cc:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048ce:	fab3 f383 	clz	r3, r3
 80048d2:	b2db      	uxtb	r3, r3
 80048d4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80048d8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80048dc:	009b      	lsls	r3, r3, #2
 80048de:	461a      	mov	r2, r3
 80048e0:	2300      	movs	r3, #0
 80048e2:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048e4:	f7fd fdaa 	bl	800243c <HAL_GetTick>
 80048e8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80048ec:	e009      	b.n	8004902 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80048ee:	f7fd fda5 	bl	800243c <HAL_GetTick>
 80048f2:	4602      	mov	r2, r0
 80048f4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80048f8:	1ad3      	subs	r3, r2, r3
 80048fa:	2b02      	cmp	r3, #2
 80048fc:	d901      	bls.n	8004902 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80048fe:	2303      	movs	r3, #3
 8004900:	e09e      	b.n	8004a40 <HAL_RCC_OscConfig+0x106c>
 8004902:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004906:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800490a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800490e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004910:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004914:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	fa93 f2a3 	rbit	r2, r3
 800491e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004922:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8004926:	601a      	str	r2, [r3, #0]
  return result;
 8004928:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800492c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8004930:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004932:	fab3 f383 	clz	r3, r3
 8004936:	b2db      	uxtb	r3, r3
 8004938:	095b      	lsrs	r3, r3, #5
 800493a:	b2db      	uxtb	r3, r3
 800493c:	f043 0301 	orr.w	r3, r3, #1
 8004940:	b2db      	uxtb	r3, r3
 8004942:	2b01      	cmp	r3, #1
 8004944:	d104      	bne.n	8004950 <HAL_RCC_OscConfig+0xf7c>
 8004946:	4b01      	ldr	r3, [pc, #4]	; (800494c <HAL_RCC_OscConfig+0xf78>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	e029      	b.n	80049a0 <HAL_RCC_OscConfig+0xfcc>
 800494c:	40021000 	.word	0x40021000
 8004950:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004954:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004958:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800495c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800495e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004962:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	fa93 f2a3 	rbit	r2, r3
 800496c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004970:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8004974:	601a      	str	r2, [r3, #0]
 8004976:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800497a:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800497e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004982:	601a      	str	r2, [r3, #0]
 8004984:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004988:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	fa93 f2a3 	rbit	r2, r3
 8004992:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004996:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800499a:	601a      	str	r2, [r3, #0]
 800499c:	4b2b      	ldr	r3, [pc, #172]	; (8004a4c <HAL_RCC_OscConfig+0x1078>)
 800499e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049a0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80049a4:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80049a8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80049ac:	6011      	str	r1, [r2, #0]
 80049ae:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80049b2:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80049b6:	6812      	ldr	r2, [r2, #0]
 80049b8:	fa92 f1a2 	rbit	r1, r2
 80049bc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80049c0:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80049c4:	6011      	str	r1, [r2, #0]
  return result;
 80049c6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80049ca:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80049ce:	6812      	ldr	r2, [r2, #0]
 80049d0:	fab2 f282 	clz	r2, r2
 80049d4:	b2d2      	uxtb	r2, r2
 80049d6:	f042 0220 	orr.w	r2, r2, #32
 80049da:	b2d2      	uxtb	r2, r2
 80049dc:	f002 021f 	and.w	r2, r2, #31
 80049e0:	2101      	movs	r1, #1
 80049e2:	fa01 f202 	lsl.w	r2, r1, r2
 80049e6:	4013      	ands	r3, r2
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d180      	bne.n	80048ee <HAL_RCC_OscConfig+0xf1a>
 80049ec:	e027      	b.n	8004a3e <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80049ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049f2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	69db      	ldr	r3, [r3, #28]
 80049fa:	2b01      	cmp	r3, #1
 80049fc:	d101      	bne.n	8004a02 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80049fe:	2301      	movs	r3, #1
 8004a00:	e01e      	b.n	8004a40 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004a02:	4b12      	ldr	r3, [pc, #72]	; (8004a4c <HAL_RCC_OscConfig+0x1078>)
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004a0a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004a0e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004a12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a16:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	6a1b      	ldr	r3, [r3, #32]
 8004a1e:	429a      	cmp	r2, r3
 8004a20:	d10b      	bne.n	8004a3a <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8004a22:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004a26:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004a2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a2e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004a36:	429a      	cmp	r2, r3
 8004a38:	d001      	beq.n	8004a3e <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	e000      	b.n	8004a40 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8004a3e:	2300      	movs	r3, #0
}
 8004a40:	4618      	mov	r0, r3
 8004a42:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8004a46:	46bd      	mov	sp, r7
 8004a48:	bd80      	pop	{r7, pc}
 8004a4a:	bf00      	nop
 8004a4c:	40021000 	.word	0x40021000

08004a50 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b09e      	sub	sp, #120	; 0x78
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
 8004a58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d101      	bne.n	8004a68 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004a64:	2301      	movs	r3, #1
 8004a66:	e162      	b.n	8004d2e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004a68:	4b90      	ldr	r3, [pc, #576]	; (8004cac <HAL_RCC_ClockConfig+0x25c>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f003 0307 	and.w	r3, r3, #7
 8004a70:	683a      	ldr	r2, [r7, #0]
 8004a72:	429a      	cmp	r2, r3
 8004a74:	d910      	bls.n	8004a98 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a76:	4b8d      	ldr	r3, [pc, #564]	; (8004cac <HAL_RCC_ClockConfig+0x25c>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f023 0207 	bic.w	r2, r3, #7
 8004a7e:	498b      	ldr	r1, [pc, #556]	; (8004cac <HAL_RCC_ClockConfig+0x25c>)
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	4313      	orrs	r3, r2
 8004a84:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a86:	4b89      	ldr	r3, [pc, #548]	; (8004cac <HAL_RCC_ClockConfig+0x25c>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f003 0307 	and.w	r3, r3, #7
 8004a8e:	683a      	ldr	r2, [r7, #0]
 8004a90:	429a      	cmp	r2, r3
 8004a92:	d001      	beq.n	8004a98 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004a94:	2301      	movs	r3, #1
 8004a96:	e14a      	b.n	8004d2e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f003 0302 	and.w	r3, r3, #2
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d008      	beq.n	8004ab6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004aa4:	4b82      	ldr	r3, [pc, #520]	; (8004cb0 <HAL_RCC_ClockConfig+0x260>)
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	689b      	ldr	r3, [r3, #8]
 8004ab0:	497f      	ldr	r1, [pc, #508]	; (8004cb0 <HAL_RCC_ClockConfig+0x260>)
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f003 0301 	and.w	r3, r3, #1
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	f000 80dc 	beq.w	8004c7c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	685b      	ldr	r3, [r3, #4]
 8004ac8:	2b01      	cmp	r3, #1
 8004aca:	d13c      	bne.n	8004b46 <HAL_RCC_ClockConfig+0xf6>
 8004acc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004ad0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ad2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004ad4:	fa93 f3a3 	rbit	r3, r3
 8004ad8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8004ada:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004adc:	fab3 f383 	clz	r3, r3
 8004ae0:	b2db      	uxtb	r3, r3
 8004ae2:	095b      	lsrs	r3, r3, #5
 8004ae4:	b2db      	uxtb	r3, r3
 8004ae6:	f043 0301 	orr.w	r3, r3, #1
 8004aea:	b2db      	uxtb	r3, r3
 8004aec:	2b01      	cmp	r3, #1
 8004aee:	d102      	bne.n	8004af6 <HAL_RCC_ClockConfig+0xa6>
 8004af0:	4b6f      	ldr	r3, [pc, #444]	; (8004cb0 <HAL_RCC_ClockConfig+0x260>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	e00f      	b.n	8004b16 <HAL_RCC_ClockConfig+0xc6>
 8004af6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004afa:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004afc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004afe:	fa93 f3a3 	rbit	r3, r3
 8004b02:	667b      	str	r3, [r7, #100]	; 0x64
 8004b04:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004b08:	663b      	str	r3, [r7, #96]	; 0x60
 8004b0a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004b0c:	fa93 f3a3 	rbit	r3, r3
 8004b10:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004b12:	4b67      	ldr	r3, [pc, #412]	; (8004cb0 <HAL_RCC_ClockConfig+0x260>)
 8004b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b16:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004b1a:	65ba      	str	r2, [r7, #88]	; 0x58
 8004b1c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004b1e:	fa92 f2a2 	rbit	r2, r2
 8004b22:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8004b24:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004b26:	fab2 f282 	clz	r2, r2
 8004b2a:	b2d2      	uxtb	r2, r2
 8004b2c:	f042 0220 	orr.w	r2, r2, #32
 8004b30:	b2d2      	uxtb	r2, r2
 8004b32:	f002 021f 	and.w	r2, r2, #31
 8004b36:	2101      	movs	r1, #1
 8004b38:	fa01 f202 	lsl.w	r2, r1, r2
 8004b3c:	4013      	ands	r3, r2
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d17b      	bne.n	8004c3a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004b42:	2301      	movs	r3, #1
 8004b44:	e0f3      	b.n	8004d2e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	685b      	ldr	r3, [r3, #4]
 8004b4a:	2b02      	cmp	r3, #2
 8004b4c:	d13c      	bne.n	8004bc8 <HAL_RCC_ClockConfig+0x178>
 8004b4e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004b52:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b56:	fa93 f3a3 	rbit	r3, r3
 8004b5a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004b5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b5e:	fab3 f383 	clz	r3, r3
 8004b62:	b2db      	uxtb	r3, r3
 8004b64:	095b      	lsrs	r3, r3, #5
 8004b66:	b2db      	uxtb	r3, r3
 8004b68:	f043 0301 	orr.w	r3, r3, #1
 8004b6c:	b2db      	uxtb	r3, r3
 8004b6e:	2b01      	cmp	r3, #1
 8004b70:	d102      	bne.n	8004b78 <HAL_RCC_ClockConfig+0x128>
 8004b72:	4b4f      	ldr	r3, [pc, #316]	; (8004cb0 <HAL_RCC_ClockConfig+0x260>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	e00f      	b.n	8004b98 <HAL_RCC_ClockConfig+0x148>
 8004b78:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004b7c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b80:	fa93 f3a3 	rbit	r3, r3
 8004b84:	647b      	str	r3, [r7, #68]	; 0x44
 8004b86:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004b8a:	643b      	str	r3, [r7, #64]	; 0x40
 8004b8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b8e:	fa93 f3a3 	rbit	r3, r3
 8004b92:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b94:	4b46      	ldr	r3, [pc, #280]	; (8004cb0 <HAL_RCC_ClockConfig+0x260>)
 8004b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b98:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004b9c:	63ba      	str	r2, [r7, #56]	; 0x38
 8004b9e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004ba0:	fa92 f2a2 	rbit	r2, r2
 8004ba4:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8004ba6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004ba8:	fab2 f282 	clz	r2, r2
 8004bac:	b2d2      	uxtb	r2, r2
 8004bae:	f042 0220 	orr.w	r2, r2, #32
 8004bb2:	b2d2      	uxtb	r2, r2
 8004bb4:	f002 021f 	and.w	r2, r2, #31
 8004bb8:	2101      	movs	r1, #1
 8004bba:	fa01 f202 	lsl.w	r2, r1, r2
 8004bbe:	4013      	ands	r3, r2
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d13a      	bne.n	8004c3a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	e0b2      	b.n	8004d2e <HAL_RCC_ClockConfig+0x2de>
 8004bc8:	2302      	movs	r3, #2
 8004bca:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bce:	fa93 f3a3 	rbit	r3, r3
 8004bd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004bd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bd6:	fab3 f383 	clz	r3, r3
 8004bda:	b2db      	uxtb	r3, r3
 8004bdc:	095b      	lsrs	r3, r3, #5
 8004bde:	b2db      	uxtb	r3, r3
 8004be0:	f043 0301 	orr.w	r3, r3, #1
 8004be4:	b2db      	uxtb	r3, r3
 8004be6:	2b01      	cmp	r3, #1
 8004be8:	d102      	bne.n	8004bf0 <HAL_RCC_ClockConfig+0x1a0>
 8004bea:	4b31      	ldr	r3, [pc, #196]	; (8004cb0 <HAL_RCC_ClockConfig+0x260>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	e00d      	b.n	8004c0c <HAL_RCC_ClockConfig+0x1bc>
 8004bf0:	2302      	movs	r3, #2
 8004bf2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bf6:	fa93 f3a3 	rbit	r3, r3
 8004bfa:	627b      	str	r3, [r7, #36]	; 0x24
 8004bfc:	2302      	movs	r3, #2
 8004bfe:	623b      	str	r3, [r7, #32]
 8004c00:	6a3b      	ldr	r3, [r7, #32]
 8004c02:	fa93 f3a3 	rbit	r3, r3
 8004c06:	61fb      	str	r3, [r7, #28]
 8004c08:	4b29      	ldr	r3, [pc, #164]	; (8004cb0 <HAL_RCC_ClockConfig+0x260>)
 8004c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c0c:	2202      	movs	r2, #2
 8004c0e:	61ba      	str	r2, [r7, #24]
 8004c10:	69ba      	ldr	r2, [r7, #24]
 8004c12:	fa92 f2a2 	rbit	r2, r2
 8004c16:	617a      	str	r2, [r7, #20]
  return result;
 8004c18:	697a      	ldr	r2, [r7, #20]
 8004c1a:	fab2 f282 	clz	r2, r2
 8004c1e:	b2d2      	uxtb	r2, r2
 8004c20:	f042 0220 	orr.w	r2, r2, #32
 8004c24:	b2d2      	uxtb	r2, r2
 8004c26:	f002 021f 	and.w	r2, r2, #31
 8004c2a:	2101      	movs	r1, #1
 8004c2c:	fa01 f202 	lsl.w	r2, r1, r2
 8004c30:	4013      	ands	r3, r2
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d101      	bne.n	8004c3a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004c36:	2301      	movs	r3, #1
 8004c38:	e079      	b.n	8004d2e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004c3a:	4b1d      	ldr	r3, [pc, #116]	; (8004cb0 <HAL_RCC_ClockConfig+0x260>)
 8004c3c:	685b      	ldr	r3, [r3, #4]
 8004c3e:	f023 0203 	bic.w	r2, r3, #3
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	491a      	ldr	r1, [pc, #104]	; (8004cb0 <HAL_RCC_ClockConfig+0x260>)
 8004c48:	4313      	orrs	r3, r2
 8004c4a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004c4c:	f7fd fbf6 	bl	800243c <HAL_GetTick>
 8004c50:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c52:	e00a      	b.n	8004c6a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c54:	f7fd fbf2 	bl	800243c <HAL_GetTick>
 8004c58:	4602      	mov	r2, r0
 8004c5a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c5c:	1ad3      	subs	r3, r2, r3
 8004c5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d901      	bls.n	8004c6a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8004c66:	2303      	movs	r3, #3
 8004c68:	e061      	b.n	8004d2e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c6a:	4b11      	ldr	r3, [pc, #68]	; (8004cb0 <HAL_RCC_ClockConfig+0x260>)
 8004c6c:	685b      	ldr	r3, [r3, #4]
 8004c6e:	f003 020c 	and.w	r2, r3, #12
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	009b      	lsls	r3, r3, #2
 8004c78:	429a      	cmp	r2, r3
 8004c7a:	d1eb      	bne.n	8004c54 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004c7c:	4b0b      	ldr	r3, [pc, #44]	; (8004cac <HAL_RCC_ClockConfig+0x25c>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f003 0307 	and.w	r3, r3, #7
 8004c84:	683a      	ldr	r2, [r7, #0]
 8004c86:	429a      	cmp	r2, r3
 8004c88:	d214      	bcs.n	8004cb4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c8a:	4b08      	ldr	r3, [pc, #32]	; (8004cac <HAL_RCC_ClockConfig+0x25c>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f023 0207 	bic.w	r2, r3, #7
 8004c92:	4906      	ldr	r1, [pc, #24]	; (8004cac <HAL_RCC_ClockConfig+0x25c>)
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	4313      	orrs	r3, r2
 8004c98:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c9a:	4b04      	ldr	r3, [pc, #16]	; (8004cac <HAL_RCC_ClockConfig+0x25c>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f003 0307 	and.w	r3, r3, #7
 8004ca2:	683a      	ldr	r2, [r7, #0]
 8004ca4:	429a      	cmp	r2, r3
 8004ca6:	d005      	beq.n	8004cb4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8004ca8:	2301      	movs	r3, #1
 8004caa:	e040      	b.n	8004d2e <HAL_RCC_ClockConfig+0x2de>
 8004cac:	40022000 	.word	0x40022000
 8004cb0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f003 0304 	and.w	r3, r3, #4
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d008      	beq.n	8004cd2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004cc0:	4b1d      	ldr	r3, [pc, #116]	; (8004d38 <HAL_RCC_ClockConfig+0x2e8>)
 8004cc2:	685b      	ldr	r3, [r3, #4]
 8004cc4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	68db      	ldr	r3, [r3, #12]
 8004ccc:	491a      	ldr	r1, [pc, #104]	; (8004d38 <HAL_RCC_ClockConfig+0x2e8>)
 8004cce:	4313      	orrs	r3, r2
 8004cd0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f003 0308 	and.w	r3, r3, #8
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d009      	beq.n	8004cf2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004cde:	4b16      	ldr	r3, [pc, #88]	; (8004d38 <HAL_RCC_ClockConfig+0x2e8>)
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	691b      	ldr	r3, [r3, #16]
 8004cea:	00db      	lsls	r3, r3, #3
 8004cec:	4912      	ldr	r1, [pc, #72]	; (8004d38 <HAL_RCC_ClockConfig+0x2e8>)
 8004cee:	4313      	orrs	r3, r2
 8004cf0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004cf2:	f000 f829 	bl	8004d48 <HAL_RCC_GetSysClockFreq>
 8004cf6:	4601      	mov	r1, r0
 8004cf8:	4b0f      	ldr	r3, [pc, #60]	; (8004d38 <HAL_RCC_ClockConfig+0x2e8>)
 8004cfa:	685b      	ldr	r3, [r3, #4]
 8004cfc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004d00:	22f0      	movs	r2, #240	; 0xf0
 8004d02:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d04:	693a      	ldr	r2, [r7, #16]
 8004d06:	fa92 f2a2 	rbit	r2, r2
 8004d0a:	60fa      	str	r2, [r7, #12]
  return result;
 8004d0c:	68fa      	ldr	r2, [r7, #12]
 8004d0e:	fab2 f282 	clz	r2, r2
 8004d12:	b2d2      	uxtb	r2, r2
 8004d14:	40d3      	lsrs	r3, r2
 8004d16:	4a09      	ldr	r2, [pc, #36]	; (8004d3c <HAL_RCC_ClockConfig+0x2ec>)
 8004d18:	5cd3      	ldrb	r3, [r2, r3]
 8004d1a:	fa21 f303 	lsr.w	r3, r1, r3
 8004d1e:	4a08      	ldr	r2, [pc, #32]	; (8004d40 <HAL_RCC_ClockConfig+0x2f0>)
 8004d20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8004d22:	4b08      	ldr	r3, [pc, #32]	; (8004d44 <HAL_RCC_ClockConfig+0x2f4>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4618      	mov	r0, r3
 8004d28:	f7fd fb44 	bl	80023b4 <HAL_InitTick>
  
  return HAL_OK;
 8004d2c:	2300      	movs	r3, #0
}
 8004d2e:	4618      	mov	r0, r3
 8004d30:	3778      	adds	r7, #120	; 0x78
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bd80      	pop	{r7, pc}
 8004d36:	bf00      	nop
 8004d38:	40021000 	.word	0x40021000
 8004d3c:	08008a40 	.word	0x08008a40
 8004d40:	20000000 	.word	0x20000000
 8004d44:	20000074 	.word	0x20000074

08004d48 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d48:	b480      	push	{r7}
 8004d4a:	b08b      	sub	sp, #44	; 0x2c
 8004d4c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004d4e:	2300      	movs	r3, #0
 8004d50:	61fb      	str	r3, [r7, #28]
 8004d52:	2300      	movs	r3, #0
 8004d54:	61bb      	str	r3, [r7, #24]
 8004d56:	2300      	movs	r3, #0
 8004d58:	627b      	str	r3, [r7, #36]	; 0x24
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004d5e:	2300      	movs	r3, #0
 8004d60:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8004d62:	4b29      	ldr	r3, [pc, #164]	; (8004e08 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004d64:	685b      	ldr	r3, [r3, #4]
 8004d66:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004d68:	69fb      	ldr	r3, [r7, #28]
 8004d6a:	f003 030c 	and.w	r3, r3, #12
 8004d6e:	2b04      	cmp	r3, #4
 8004d70:	d002      	beq.n	8004d78 <HAL_RCC_GetSysClockFreq+0x30>
 8004d72:	2b08      	cmp	r3, #8
 8004d74:	d003      	beq.n	8004d7e <HAL_RCC_GetSysClockFreq+0x36>
 8004d76:	e03c      	b.n	8004df2 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004d78:	4b24      	ldr	r3, [pc, #144]	; (8004e0c <HAL_RCC_GetSysClockFreq+0xc4>)
 8004d7a:	623b      	str	r3, [r7, #32]
      break;
 8004d7c:	e03c      	b.n	8004df8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8004d7e:	69fb      	ldr	r3, [r7, #28]
 8004d80:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8004d84:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8004d88:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d8a:	68ba      	ldr	r2, [r7, #8]
 8004d8c:	fa92 f2a2 	rbit	r2, r2
 8004d90:	607a      	str	r2, [r7, #4]
  return result;
 8004d92:	687a      	ldr	r2, [r7, #4]
 8004d94:	fab2 f282 	clz	r2, r2
 8004d98:	b2d2      	uxtb	r2, r2
 8004d9a:	40d3      	lsrs	r3, r2
 8004d9c:	4a1c      	ldr	r2, [pc, #112]	; (8004e10 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004d9e:	5cd3      	ldrb	r3, [r2, r3]
 8004da0:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8004da2:	4b19      	ldr	r3, [pc, #100]	; (8004e08 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004da4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004da6:	f003 030f 	and.w	r3, r3, #15
 8004daa:	220f      	movs	r2, #15
 8004dac:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dae:	693a      	ldr	r2, [r7, #16]
 8004db0:	fa92 f2a2 	rbit	r2, r2
 8004db4:	60fa      	str	r2, [r7, #12]
  return result;
 8004db6:	68fa      	ldr	r2, [r7, #12]
 8004db8:	fab2 f282 	clz	r2, r2
 8004dbc:	b2d2      	uxtb	r2, r2
 8004dbe:	40d3      	lsrs	r3, r2
 8004dc0:	4a14      	ldr	r2, [pc, #80]	; (8004e14 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004dc2:	5cd3      	ldrb	r3, [r2, r3]
 8004dc4:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8004dc6:	69fb      	ldr	r3, [r7, #28]
 8004dc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d008      	beq.n	8004de2 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004dd0:	4a0e      	ldr	r2, [pc, #56]	; (8004e0c <HAL_RCC_GetSysClockFreq+0xc4>)
 8004dd2:	69bb      	ldr	r3, [r7, #24]
 8004dd4:	fbb2 f2f3 	udiv	r2, r2, r3
 8004dd8:	697b      	ldr	r3, [r7, #20]
 8004dda:	fb02 f303 	mul.w	r3, r2, r3
 8004dde:	627b      	str	r3, [r7, #36]	; 0x24
 8004de0:	e004      	b.n	8004dec <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004de2:	697b      	ldr	r3, [r7, #20]
 8004de4:	4a0c      	ldr	r2, [pc, #48]	; (8004e18 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004de6:	fb02 f303 	mul.w	r3, r2, r3
 8004dea:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dee:	623b      	str	r3, [r7, #32]
      break;
 8004df0:	e002      	b.n	8004df8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004df2:	4b06      	ldr	r3, [pc, #24]	; (8004e0c <HAL_RCC_GetSysClockFreq+0xc4>)
 8004df4:	623b      	str	r3, [r7, #32]
      break;
 8004df6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004df8:	6a3b      	ldr	r3, [r7, #32]
}
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	372c      	adds	r7, #44	; 0x2c
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e04:	4770      	bx	lr
 8004e06:	bf00      	nop
 8004e08:	40021000 	.word	0x40021000
 8004e0c:	007a1200 	.word	0x007a1200
 8004e10:	08008a58 	.word	0x08008a58
 8004e14:	08008a68 	.word	0x08008a68
 8004e18:	003d0900 	.word	0x003d0900

08004e1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e1c:	b480      	push	{r7}
 8004e1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e20:	4b03      	ldr	r3, [pc, #12]	; (8004e30 <HAL_RCC_GetHCLKFreq+0x14>)
 8004e22:	681b      	ldr	r3, [r3, #0]
}
 8004e24:	4618      	mov	r0, r3
 8004e26:	46bd      	mov	sp, r7
 8004e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2c:	4770      	bx	lr
 8004e2e:	bf00      	nop
 8004e30:	20000000 	.word	0x20000000

08004e34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b082      	sub	sp, #8
 8004e38:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8004e3a:	f7ff ffef 	bl	8004e1c <HAL_RCC_GetHCLKFreq>
 8004e3e:	4601      	mov	r1, r0
 8004e40:	4b0b      	ldr	r3, [pc, #44]	; (8004e70 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8004e42:	685b      	ldr	r3, [r3, #4]
 8004e44:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004e48:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004e4c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e4e:	687a      	ldr	r2, [r7, #4]
 8004e50:	fa92 f2a2 	rbit	r2, r2
 8004e54:	603a      	str	r2, [r7, #0]
  return result;
 8004e56:	683a      	ldr	r2, [r7, #0]
 8004e58:	fab2 f282 	clz	r2, r2
 8004e5c:	b2d2      	uxtb	r2, r2
 8004e5e:	40d3      	lsrs	r3, r2
 8004e60:	4a04      	ldr	r2, [pc, #16]	; (8004e74 <HAL_RCC_GetPCLK1Freq+0x40>)
 8004e62:	5cd3      	ldrb	r3, [r2, r3]
 8004e64:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8004e68:	4618      	mov	r0, r3
 8004e6a:	3708      	adds	r7, #8
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	bd80      	pop	{r7, pc}
 8004e70:	40021000 	.word	0x40021000
 8004e74:	08008a50 	.word	0x08008a50

08004e78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b082      	sub	sp, #8
 8004e7c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8004e7e:	f7ff ffcd 	bl	8004e1c <HAL_RCC_GetHCLKFreq>
 8004e82:	4601      	mov	r1, r0
 8004e84:	4b0b      	ldr	r3, [pc, #44]	; (8004eb4 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8004e86:	685b      	ldr	r3, [r3, #4]
 8004e88:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8004e8c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8004e90:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e92:	687a      	ldr	r2, [r7, #4]
 8004e94:	fa92 f2a2 	rbit	r2, r2
 8004e98:	603a      	str	r2, [r7, #0]
  return result;
 8004e9a:	683a      	ldr	r2, [r7, #0]
 8004e9c:	fab2 f282 	clz	r2, r2
 8004ea0:	b2d2      	uxtb	r2, r2
 8004ea2:	40d3      	lsrs	r3, r2
 8004ea4:	4a04      	ldr	r2, [pc, #16]	; (8004eb8 <HAL_RCC_GetPCLK2Freq+0x40>)
 8004ea6:	5cd3      	ldrb	r3, [r2, r3]
 8004ea8:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8004eac:	4618      	mov	r0, r3
 8004eae:	3708      	adds	r7, #8
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	bd80      	pop	{r7, pc}
 8004eb4:	40021000 	.word	0x40021000
 8004eb8:	08008a50 	.word	0x08008a50

08004ebc <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b092      	sub	sp, #72	; 0x48
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8004ec8:	2300      	movs	r3, #0
 8004eca:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8004ecc:	2300      	movs	r3, #0
 8004ece:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	f000 80d4 	beq.w	8005088 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ee0:	4b4e      	ldr	r3, [pc, #312]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ee2:	69db      	ldr	r3, [r3, #28]
 8004ee4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d10e      	bne.n	8004f0a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004eec:	4b4b      	ldr	r3, [pc, #300]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004eee:	69db      	ldr	r3, [r3, #28]
 8004ef0:	4a4a      	ldr	r2, [pc, #296]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ef2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ef6:	61d3      	str	r3, [r2, #28]
 8004ef8:	4b48      	ldr	r3, [pc, #288]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004efa:	69db      	ldr	r3, [r3, #28]
 8004efc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f00:	60bb      	str	r3, [r7, #8]
 8004f02:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004f04:	2301      	movs	r3, #1
 8004f06:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f0a:	4b45      	ldr	r3, [pc, #276]	; (8005020 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d118      	bne.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004f16:	4b42      	ldr	r3, [pc, #264]	; (8005020 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	4a41      	ldr	r2, [pc, #260]	; (8005020 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004f1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f20:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f22:	f7fd fa8b 	bl	800243c <HAL_GetTick>
 8004f26:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f28:	e008      	b.n	8004f3c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f2a:	f7fd fa87 	bl	800243c <HAL_GetTick>
 8004f2e:	4602      	mov	r2, r0
 8004f30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f32:	1ad3      	subs	r3, r2, r3
 8004f34:	2b64      	cmp	r3, #100	; 0x64
 8004f36:	d901      	bls.n	8004f3c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004f38:	2303      	movs	r3, #3
 8004f3a:	e169      	b.n	8005210 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f3c:	4b38      	ldr	r3, [pc, #224]	; (8005020 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d0f0      	beq.n	8004f2a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004f48:	4b34      	ldr	r3, [pc, #208]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f4a:	6a1b      	ldr	r3, [r3, #32]
 8004f4c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f50:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004f52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	f000 8084 	beq.w	8005062 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	685b      	ldr	r3, [r3, #4]
 8004f5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f62:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004f64:	429a      	cmp	r2, r3
 8004f66:	d07c      	beq.n	8005062 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004f68:	4b2c      	ldr	r3, [pc, #176]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f6a:	6a1b      	ldr	r3, [r3, #32]
 8004f6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f70:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f72:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004f76:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f7a:	fa93 f3a3 	rbit	r3, r3
 8004f7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004f80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004f82:	fab3 f383 	clz	r3, r3
 8004f86:	b2db      	uxtb	r3, r3
 8004f88:	461a      	mov	r2, r3
 8004f8a:	4b26      	ldr	r3, [pc, #152]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004f8c:	4413      	add	r3, r2
 8004f8e:	009b      	lsls	r3, r3, #2
 8004f90:	461a      	mov	r2, r3
 8004f92:	2301      	movs	r3, #1
 8004f94:	6013      	str	r3, [r2, #0]
 8004f96:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004f9a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f9e:	fa93 f3a3 	rbit	r3, r3
 8004fa2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004fa4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004fa6:	fab3 f383 	clz	r3, r3
 8004faa:	b2db      	uxtb	r3, r3
 8004fac:	461a      	mov	r2, r3
 8004fae:	4b1d      	ldr	r3, [pc, #116]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004fb0:	4413      	add	r3, r2
 8004fb2:	009b      	lsls	r3, r3, #2
 8004fb4:	461a      	mov	r2, r3
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004fba:	4a18      	ldr	r2, [pc, #96]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004fbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004fbe:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004fc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004fc2:	f003 0301 	and.w	r3, r3, #1
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d04b      	beq.n	8005062 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fca:	f7fd fa37 	bl	800243c <HAL_GetTick>
 8004fce:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fd0:	e00a      	b.n	8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fd2:	f7fd fa33 	bl	800243c <HAL_GetTick>
 8004fd6:	4602      	mov	r2, r0
 8004fd8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004fda:	1ad3      	subs	r3, r2, r3
 8004fdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d901      	bls.n	8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004fe4:	2303      	movs	r3, #3
 8004fe6:	e113      	b.n	8005210 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8004fe8:	2302      	movs	r3, #2
 8004fea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fee:	fa93 f3a3 	rbit	r3, r3
 8004ff2:	627b      	str	r3, [r7, #36]	; 0x24
 8004ff4:	2302      	movs	r3, #2
 8004ff6:	623b      	str	r3, [r7, #32]
 8004ff8:	6a3b      	ldr	r3, [r7, #32]
 8004ffa:	fa93 f3a3 	rbit	r3, r3
 8004ffe:	61fb      	str	r3, [r7, #28]
  return result;
 8005000:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005002:	fab3 f383 	clz	r3, r3
 8005006:	b2db      	uxtb	r3, r3
 8005008:	095b      	lsrs	r3, r3, #5
 800500a:	b2db      	uxtb	r3, r3
 800500c:	f043 0302 	orr.w	r3, r3, #2
 8005010:	b2db      	uxtb	r3, r3
 8005012:	2b02      	cmp	r3, #2
 8005014:	d108      	bne.n	8005028 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8005016:	4b01      	ldr	r3, [pc, #4]	; (800501c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005018:	6a1b      	ldr	r3, [r3, #32]
 800501a:	e00d      	b.n	8005038 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 800501c:	40021000 	.word	0x40021000
 8005020:	40007000 	.word	0x40007000
 8005024:	10908100 	.word	0x10908100
 8005028:	2302      	movs	r3, #2
 800502a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800502c:	69bb      	ldr	r3, [r7, #24]
 800502e:	fa93 f3a3 	rbit	r3, r3
 8005032:	617b      	str	r3, [r7, #20]
 8005034:	4b78      	ldr	r3, [pc, #480]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005038:	2202      	movs	r2, #2
 800503a:	613a      	str	r2, [r7, #16]
 800503c:	693a      	ldr	r2, [r7, #16]
 800503e:	fa92 f2a2 	rbit	r2, r2
 8005042:	60fa      	str	r2, [r7, #12]
  return result;
 8005044:	68fa      	ldr	r2, [r7, #12]
 8005046:	fab2 f282 	clz	r2, r2
 800504a:	b2d2      	uxtb	r2, r2
 800504c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005050:	b2d2      	uxtb	r2, r2
 8005052:	f002 021f 	and.w	r2, r2, #31
 8005056:	2101      	movs	r1, #1
 8005058:	fa01 f202 	lsl.w	r2, r1, r2
 800505c:	4013      	ands	r3, r2
 800505e:	2b00      	cmp	r3, #0
 8005060:	d0b7      	beq.n	8004fd2 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8005062:	4b6d      	ldr	r3, [pc, #436]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005064:	6a1b      	ldr	r3, [r3, #32]
 8005066:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	685b      	ldr	r3, [r3, #4]
 800506e:	496a      	ldr	r1, [pc, #424]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005070:	4313      	orrs	r3, r2
 8005072:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005074:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005078:	2b01      	cmp	r3, #1
 800507a:	d105      	bne.n	8005088 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800507c:	4b66      	ldr	r3, [pc, #408]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800507e:	69db      	ldr	r3, [r3, #28]
 8005080:	4a65      	ldr	r2, [pc, #404]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005082:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005086:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f003 0301 	and.w	r3, r3, #1
 8005090:	2b00      	cmp	r3, #0
 8005092:	d008      	beq.n	80050a6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005094:	4b60      	ldr	r3, [pc, #384]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005098:	f023 0203 	bic.w	r2, r3, #3
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	689b      	ldr	r3, [r3, #8]
 80050a0:	495d      	ldr	r1, [pc, #372]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80050a2:	4313      	orrs	r3, r2
 80050a4:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f003 0302 	and.w	r3, r3, #2
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d008      	beq.n	80050c4 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80050b2:	4b59      	ldr	r3, [pc, #356]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80050b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050b6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	68db      	ldr	r3, [r3, #12]
 80050be:	4956      	ldr	r1, [pc, #344]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80050c0:	4313      	orrs	r3, r2
 80050c2:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f003 0304 	and.w	r3, r3, #4
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d008      	beq.n	80050e2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80050d0:	4b51      	ldr	r3, [pc, #324]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80050d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050d4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	691b      	ldr	r3, [r3, #16]
 80050dc:	494e      	ldr	r1, [pc, #312]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80050de:	4313      	orrs	r3, r2
 80050e0:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f003 0320 	and.w	r3, r3, #32
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d008      	beq.n	8005100 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80050ee:	4b4a      	ldr	r3, [pc, #296]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80050f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050f2:	f023 0210 	bic.w	r2, r3, #16
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	69db      	ldr	r3, [r3, #28]
 80050fa:	4947      	ldr	r1, [pc, #284]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80050fc:	4313      	orrs	r3, r2
 80050fe:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005108:	2b00      	cmp	r3, #0
 800510a:	d008      	beq.n	800511e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 800510c:	4b42      	ldr	r3, [pc, #264]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800510e:	685b      	ldr	r3, [r3, #4]
 8005110:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005118:	493f      	ldr	r1, [pc, #252]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800511a:	4313      	orrs	r3, r2
 800511c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005126:	2b00      	cmp	r3, #0
 8005128:	d008      	beq.n	800513c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800512a:	4b3b      	ldr	r3, [pc, #236]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800512c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800512e:	f023 0220 	bic.w	r2, r3, #32
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6a1b      	ldr	r3, [r3, #32]
 8005136:	4938      	ldr	r1, [pc, #224]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005138:	4313      	orrs	r3, r2
 800513a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f003 0308 	and.w	r3, r3, #8
 8005144:	2b00      	cmp	r3, #0
 8005146:	d008      	beq.n	800515a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005148:	4b33      	ldr	r3, [pc, #204]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800514a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800514c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	695b      	ldr	r3, [r3, #20]
 8005154:	4930      	ldr	r1, [pc, #192]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005156:	4313      	orrs	r3, r2
 8005158:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f003 0310 	and.w	r3, r3, #16
 8005162:	2b00      	cmp	r3, #0
 8005164:	d008      	beq.n	8005178 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005166:	4b2c      	ldr	r3, [pc, #176]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800516a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	699b      	ldr	r3, [r3, #24]
 8005172:	4929      	ldr	r1, [pc, #164]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005174:	4313      	orrs	r3, r2
 8005176:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005180:	2b00      	cmp	r3, #0
 8005182:	d008      	beq.n	8005196 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005184:	4b24      	ldr	r3, [pc, #144]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005186:	685b      	ldr	r3, [r3, #4]
 8005188:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005190:	4921      	ldr	r1, [pc, #132]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005192:	4313      	orrs	r3, r2
 8005194:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d008      	beq.n	80051b4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80051a2:	4b1d      	ldr	r3, [pc, #116]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80051a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051a6:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ae:	491a      	ldr	r1, [pc, #104]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80051b0:	4313      	orrs	r3, r2
 80051b2:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d008      	beq.n	80051d2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80051c0:	4b15      	ldr	r3, [pc, #84]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80051c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051c4:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051cc:	4912      	ldr	r1, [pc, #72]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80051ce:	4313      	orrs	r3, r2
 80051d0:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d008      	beq.n	80051f0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80051de:	4b0e      	ldr	r3, [pc, #56]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80051e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051e2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051ea:	490b      	ldr	r1, [pc, #44]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80051ec:	4313      	orrs	r3, r2
 80051ee:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d008      	beq.n	800520e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80051fc:	4b06      	ldr	r3, [pc, #24]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80051fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005200:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005208:	4903      	ldr	r1, [pc, #12]	; (8005218 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800520a:	4313      	orrs	r3, r2
 800520c:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800520e:	2300      	movs	r3, #0
}
 8005210:	4618      	mov	r0, r3
 8005212:	3748      	adds	r7, #72	; 0x48
 8005214:	46bd      	mov	sp, r7
 8005216:	bd80      	pop	{r7, pc}
 8005218:	40021000 	.word	0x40021000

0800521c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800521c:	b580      	push	{r7, lr}
 800521e:	b084      	sub	sp, #16
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d101      	bne.n	800522e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800522a:	2301      	movs	r3, #1
 800522c:	e09d      	b.n	800536a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005232:	2b00      	cmp	r3, #0
 8005234:	d108      	bne.n	8005248 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	685b      	ldr	r3, [r3, #4]
 800523a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800523e:	d009      	beq.n	8005254 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2200      	movs	r2, #0
 8005244:	61da      	str	r2, [r3, #28]
 8005246:	e005      	b.n	8005254 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2200      	movs	r2, #0
 800524c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2200      	movs	r2, #0
 8005252:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2200      	movs	r2, #0
 8005258:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005260:	b2db      	uxtb	r3, r3
 8005262:	2b00      	cmp	r3, #0
 8005264:	d106      	bne.n	8005274 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2200      	movs	r2, #0
 800526a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800526e:	6878      	ldr	r0, [r7, #4]
 8005270:	f7fb ff54 	bl	800111c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2202      	movs	r2, #2
 8005278:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	681a      	ldr	r2, [r3, #0]
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800528a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	68db      	ldr	r3, [r3, #12]
 8005290:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005294:	d902      	bls.n	800529c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005296:	2300      	movs	r3, #0
 8005298:	60fb      	str	r3, [r7, #12]
 800529a:	e002      	b.n	80052a2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800529c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80052a0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	68db      	ldr	r3, [r3, #12]
 80052a6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80052aa:	d007      	beq.n	80052bc <HAL_SPI_Init+0xa0>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	68db      	ldr	r3, [r3, #12]
 80052b0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80052b4:	d002      	beq.n	80052bc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2200      	movs	r2, #0
 80052ba:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	685b      	ldr	r3, [r3, #4]
 80052c0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	689b      	ldr	r3, [r3, #8]
 80052c8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80052cc:	431a      	orrs	r2, r3
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	691b      	ldr	r3, [r3, #16]
 80052d2:	f003 0302 	and.w	r3, r3, #2
 80052d6:	431a      	orrs	r2, r3
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	695b      	ldr	r3, [r3, #20]
 80052dc:	f003 0301 	and.w	r3, r3, #1
 80052e0:	431a      	orrs	r2, r3
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	699b      	ldr	r3, [r3, #24]
 80052e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80052ea:	431a      	orrs	r2, r3
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	69db      	ldr	r3, [r3, #28]
 80052f0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80052f4:	431a      	orrs	r2, r3
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6a1b      	ldr	r3, [r3, #32]
 80052fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052fe:	ea42 0103 	orr.w	r1, r2, r3
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005306:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	430a      	orrs	r2, r1
 8005310:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	699b      	ldr	r3, [r3, #24]
 8005316:	0c1b      	lsrs	r3, r3, #16
 8005318:	f003 0204 	and.w	r2, r3, #4
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005320:	f003 0310 	and.w	r3, r3, #16
 8005324:	431a      	orrs	r2, r3
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800532a:	f003 0308 	and.w	r3, r3, #8
 800532e:	431a      	orrs	r2, r3
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	68db      	ldr	r3, [r3, #12]
 8005334:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005338:	ea42 0103 	orr.w	r1, r2, r3
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	430a      	orrs	r2, r1
 8005348:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	69da      	ldr	r2, [r3, #28]
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005358:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2200      	movs	r2, #0
 800535e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2201      	movs	r2, #1
 8005364:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005368:	2300      	movs	r3, #0
}
 800536a:	4618      	mov	r0, r3
 800536c:	3710      	adds	r7, #16
 800536e:	46bd      	mov	sp, r7
 8005370:	bd80      	pop	{r7, pc}

08005372 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8005372:	b580      	push	{r7, lr}
 8005374:	b082      	sub	sp, #8
 8005376:	af00      	add	r7, sp, #0
 8005378:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d101      	bne.n	8005384 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8005380:	2301      	movs	r3, #1
 8005382:	e01a      	b.n	80053ba <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2202      	movs	r2, #2
 8005388:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	681a      	ldr	r2, [r3, #0]
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800539a:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 800539c:	6878      	ldr	r0, [r7, #4]
 800539e:	f7fb feff 	bl	80011a0 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2200      	movs	r2, #0
 80053a6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_RESET;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2200      	movs	r2, #0
 80053ac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2200      	movs	r2, #0
 80053b4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  return HAL_OK;
 80053b8:	2300      	movs	r3, #0
}
 80053ba:	4618      	mov	r0, r3
 80053bc:	3708      	adds	r7, #8
 80053be:	46bd      	mov	sp, r7
 80053c0:	bd80      	pop	{r7, pc}

080053c2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80053c2:	b580      	push	{r7, lr}
 80053c4:	b08a      	sub	sp, #40	; 0x28
 80053c6:	af00      	add	r7, sp, #0
 80053c8:	60f8      	str	r0, [r7, #12]
 80053ca:	60b9      	str	r1, [r7, #8]
 80053cc:	607a      	str	r2, [r7, #4]
 80053ce:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80053d0:	2301      	movs	r3, #1
 80053d2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80053d4:	2300      	movs	r3, #0
 80053d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80053e0:	2b01      	cmp	r3, #1
 80053e2:	d101      	bne.n	80053e8 <HAL_SPI_TransmitReceive+0x26>
 80053e4:	2302      	movs	r3, #2
 80053e6:	e20a      	b.n	80057fe <HAL_SPI_TransmitReceive+0x43c>
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	2201      	movs	r2, #1
 80053ec:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80053f0:	f7fd f824 	bl	800243c <HAL_GetTick>
 80053f4:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80053fc:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	685b      	ldr	r3, [r3, #4]
 8005402:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8005404:	887b      	ldrh	r3, [r7, #2]
 8005406:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8005408:	887b      	ldrh	r3, [r7, #2]
 800540a:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800540c:	7efb      	ldrb	r3, [r7, #27]
 800540e:	2b01      	cmp	r3, #1
 8005410:	d00e      	beq.n	8005430 <HAL_SPI_TransmitReceive+0x6e>
 8005412:	697b      	ldr	r3, [r7, #20]
 8005414:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005418:	d106      	bne.n	8005428 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	689b      	ldr	r3, [r3, #8]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d102      	bne.n	8005428 <HAL_SPI_TransmitReceive+0x66>
 8005422:	7efb      	ldrb	r3, [r7, #27]
 8005424:	2b04      	cmp	r3, #4
 8005426:	d003      	beq.n	8005430 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8005428:	2302      	movs	r3, #2
 800542a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800542e:	e1e0      	b.n	80057f2 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005430:	68bb      	ldr	r3, [r7, #8]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d005      	beq.n	8005442 <HAL_SPI_TransmitReceive+0x80>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d002      	beq.n	8005442 <HAL_SPI_TransmitReceive+0x80>
 800543c:	887b      	ldrh	r3, [r7, #2]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d103      	bne.n	800544a <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8005442:	2301      	movs	r3, #1
 8005444:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005448:	e1d3      	b.n	80057f2 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005450:	b2db      	uxtb	r3, r3
 8005452:	2b04      	cmp	r3, #4
 8005454:	d003      	beq.n	800545e <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	2205      	movs	r2, #5
 800545a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	2200      	movs	r2, #0
 8005462:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	687a      	ldr	r2, [r7, #4]
 8005468:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	887a      	ldrh	r2, [r7, #2]
 800546e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	887a      	ldrh	r2, [r7, #2]
 8005476:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	68ba      	ldr	r2, [r7, #8]
 800547e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	887a      	ldrh	r2, [r7, #2]
 8005484:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	887a      	ldrh	r2, [r7, #2]
 800548a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	2200      	movs	r2, #0
 8005490:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	2200      	movs	r2, #0
 8005496:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	68db      	ldr	r3, [r3, #12]
 800549c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80054a0:	d802      	bhi.n	80054a8 <HAL_SPI_TransmitReceive+0xe6>
 80054a2:	8a3b      	ldrh	r3, [r7, #16]
 80054a4:	2b01      	cmp	r3, #1
 80054a6:	d908      	bls.n	80054ba <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	685a      	ldr	r2, [r3, #4]
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80054b6:	605a      	str	r2, [r3, #4]
 80054b8:	e007      	b.n	80054ca <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	685a      	ldr	r2, [r3, #4]
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80054c8:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054d4:	2b40      	cmp	r3, #64	; 0x40
 80054d6:	d007      	beq.n	80054e8 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	681a      	ldr	r2, [r3, #0]
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80054e6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	68db      	ldr	r3, [r3, #12]
 80054ec:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80054f0:	f240 8081 	bls.w	80055f6 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	685b      	ldr	r3, [r3, #4]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d002      	beq.n	8005502 <HAL_SPI_TransmitReceive+0x140>
 80054fc:	8a7b      	ldrh	r3, [r7, #18]
 80054fe:	2b01      	cmp	r3, #1
 8005500:	d16d      	bne.n	80055de <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005506:	881a      	ldrh	r2, [r3, #0]
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005512:	1c9a      	adds	r2, r3, #2
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800551c:	b29b      	uxth	r3, r3
 800551e:	3b01      	subs	r3, #1
 8005520:	b29a      	uxth	r2, r3
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005526:	e05a      	b.n	80055de <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	689b      	ldr	r3, [r3, #8]
 800552e:	f003 0302 	and.w	r3, r3, #2
 8005532:	2b02      	cmp	r3, #2
 8005534:	d11b      	bne.n	800556e <HAL_SPI_TransmitReceive+0x1ac>
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800553a:	b29b      	uxth	r3, r3
 800553c:	2b00      	cmp	r3, #0
 800553e:	d016      	beq.n	800556e <HAL_SPI_TransmitReceive+0x1ac>
 8005540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005542:	2b01      	cmp	r3, #1
 8005544:	d113      	bne.n	800556e <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800554a:	881a      	ldrh	r2, [r3, #0]
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005556:	1c9a      	adds	r2, r3, #2
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005560:	b29b      	uxth	r3, r3
 8005562:	3b01      	subs	r3, #1
 8005564:	b29a      	uxth	r2, r3
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800556a:	2300      	movs	r3, #0
 800556c:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	689b      	ldr	r3, [r3, #8]
 8005574:	f003 0301 	and.w	r3, r3, #1
 8005578:	2b01      	cmp	r3, #1
 800557a:	d11c      	bne.n	80055b6 <HAL_SPI_TransmitReceive+0x1f4>
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005582:	b29b      	uxth	r3, r3
 8005584:	2b00      	cmp	r3, #0
 8005586:	d016      	beq.n	80055b6 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	68da      	ldr	r2, [r3, #12]
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005592:	b292      	uxth	r2, r2
 8005594:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800559a:	1c9a      	adds	r2, r3, #2
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80055a6:	b29b      	uxth	r3, r3
 80055a8:	3b01      	subs	r3, #1
 80055aa:	b29a      	uxth	r2, r3
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80055b2:	2301      	movs	r3, #1
 80055b4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80055b6:	f7fc ff41 	bl	800243c <HAL_GetTick>
 80055ba:	4602      	mov	r2, r0
 80055bc:	69fb      	ldr	r3, [r7, #28]
 80055be:	1ad3      	subs	r3, r2, r3
 80055c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055c2:	429a      	cmp	r2, r3
 80055c4:	d80b      	bhi.n	80055de <HAL_SPI_TransmitReceive+0x21c>
 80055c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055cc:	d007      	beq.n	80055de <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 80055ce:	2303      	movs	r3, #3
 80055d0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	2201      	movs	r2, #1
 80055d8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 80055dc:	e109      	b.n	80057f2 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055e2:	b29b      	uxth	r3, r3
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d19f      	bne.n	8005528 <HAL_SPI_TransmitReceive+0x166>
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80055ee:	b29b      	uxth	r3, r3
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d199      	bne.n	8005528 <HAL_SPI_TransmitReceive+0x166>
 80055f4:	e0e3      	b.n	80057be <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	685b      	ldr	r3, [r3, #4]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d003      	beq.n	8005606 <HAL_SPI_TransmitReceive+0x244>
 80055fe:	8a7b      	ldrh	r3, [r7, #18]
 8005600:	2b01      	cmp	r3, #1
 8005602:	f040 80cf 	bne.w	80057a4 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800560a:	b29b      	uxth	r3, r3
 800560c:	2b01      	cmp	r3, #1
 800560e:	d912      	bls.n	8005636 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005614:	881a      	ldrh	r2, [r3, #0]
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005620:	1c9a      	adds	r2, r3, #2
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800562a:	b29b      	uxth	r3, r3
 800562c:	3b02      	subs	r3, #2
 800562e:	b29a      	uxth	r2, r3
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005634:	e0b6      	b.n	80057a4 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	330c      	adds	r3, #12
 8005640:	7812      	ldrb	r2, [r2, #0]
 8005642:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005648:	1c5a      	adds	r2, r3, #1
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005652:	b29b      	uxth	r3, r3
 8005654:	3b01      	subs	r3, #1
 8005656:	b29a      	uxth	r2, r3
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800565c:	e0a2      	b.n	80057a4 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	689b      	ldr	r3, [r3, #8]
 8005664:	f003 0302 	and.w	r3, r3, #2
 8005668:	2b02      	cmp	r3, #2
 800566a:	d134      	bne.n	80056d6 <HAL_SPI_TransmitReceive+0x314>
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005670:	b29b      	uxth	r3, r3
 8005672:	2b00      	cmp	r3, #0
 8005674:	d02f      	beq.n	80056d6 <HAL_SPI_TransmitReceive+0x314>
 8005676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005678:	2b01      	cmp	r3, #1
 800567a:	d12c      	bne.n	80056d6 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005680:	b29b      	uxth	r3, r3
 8005682:	2b01      	cmp	r3, #1
 8005684:	d912      	bls.n	80056ac <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800568a:	881a      	ldrh	r2, [r3, #0]
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005696:	1c9a      	adds	r2, r3, #2
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056a0:	b29b      	uxth	r3, r3
 80056a2:	3b02      	subs	r3, #2
 80056a4:	b29a      	uxth	r2, r3
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80056aa:	e012      	b.n	80056d2 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	330c      	adds	r3, #12
 80056b6:	7812      	ldrb	r2, [r2, #0]
 80056b8:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056be:	1c5a      	adds	r2, r3, #1
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056c8:	b29b      	uxth	r3, r3
 80056ca:	3b01      	subs	r3, #1
 80056cc:	b29a      	uxth	r2, r3
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80056d2:	2300      	movs	r3, #0
 80056d4:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	689b      	ldr	r3, [r3, #8]
 80056dc:	f003 0301 	and.w	r3, r3, #1
 80056e0:	2b01      	cmp	r3, #1
 80056e2:	d148      	bne.n	8005776 <HAL_SPI_TransmitReceive+0x3b4>
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80056ea:	b29b      	uxth	r3, r3
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d042      	beq.n	8005776 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80056f6:	b29b      	uxth	r3, r3
 80056f8:	2b01      	cmp	r3, #1
 80056fa:	d923      	bls.n	8005744 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	68da      	ldr	r2, [r3, #12]
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005706:	b292      	uxth	r2, r2
 8005708:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800570e:	1c9a      	adds	r2, r3, #2
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800571a:	b29b      	uxth	r3, r3
 800571c:	3b02      	subs	r3, #2
 800571e:	b29a      	uxth	r2, r3
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800572c:	b29b      	uxth	r3, r3
 800572e:	2b01      	cmp	r3, #1
 8005730:	d81f      	bhi.n	8005772 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	685a      	ldr	r2, [r3, #4]
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005740:	605a      	str	r2, [r3, #4]
 8005742:	e016      	b.n	8005772 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f103 020c 	add.w	r2, r3, #12
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005750:	7812      	ldrb	r2, [r2, #0]
 8005752:	b2d2      	uxtb	r2, r2
 8005754:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800575a:	1c5a      	adds	r2, r3, #1
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005766:	b29b      	uxth	r3, r3
 8005768:	3b01      	subs	r3, #1
 800576a:	b29a      	uxth	r2, r3
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005772:	2301      	movs	r3, #1
 8005774:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005776:	f7fc fe61 	bl	800243c <HAL_GetTick>
 800577a:	4602      	mov	r2, r0
 800577c:	69fb      	ldr	r3, [r7, #28]
 800577e:	1ad3      	subs	r3, r2, r3
 8005780:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005782:	429a      	cmp	r2, r3
 8005784:	d803      	bhi.n	800578e <HAL_SPI_TransmitReceive+0x3cc>
 8005786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005788:	f1b3 3fff 	cmp.w	r3, #4294967295
 800578c:	d102      	bne.n	8005794 <HAL_SPI_TransmitReceive+0x3d2>
 800578e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005790:	2b00      	cmp	r3, #0
 8005792:	d107      	bne.n	80057a4 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8005794:	2303      	movs	r3, #3
 8005796:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	2201      	movs	r2, #1
 800579e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 80057a2:	e026      	b.n	80057f2 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057a8:	b29b      	uxth	r3, r3
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	f47f af57 	bne.w	800565e <HAL_SPI_TransmitReceive+0x29c>
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80057b6:	b29b      	uxth	r3, r3
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	f47f af50 	bne.w	800565e <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80057be:	69fa      	ldr	r2, [r7, #28]
 80057c0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80057c2:	68f8      	ldr	r0, [r7, #12]
 80057c4:	f000 f94c 	bl	8005a60 <SPI_EndRxTxTransaction>
 80057c8:	4603      	mov	r3, r0
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d005      	beq.n	80057da <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 80057ce:	2301      	movs	r3, #1
 80057d0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	2220      	movs	r2, #32
 80057d8:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d003      	beq.n	80057ea <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 80057e2:	2301      	movs	r3, #1
 80057e4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80057e8:	e003      	b.n	80057f2 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	2201      	movs	r2, #1
 80057ee:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	2200      	movs	r2, #0
 80057f6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80057fa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80057fe:	4618      	mov	r0, r3
 8005800:	3728      	adds	r7, #40	; 0x28
 8005802:	46bd      	mov	sp, r7
 8005804:	bd80      	pop	{r7, pc}

08005806 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8005806:	b480      	push	{r7}
 8005808:	b083      	sub	sp, #12
 800580a:	af00      	add	r7, sp, #0
 800580c:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005814:	b2db      	uxtb	r3, r3
}
 8005816:	4618      	mov	r0, r3
 8005818:	370c      	adds	r7, #12
 800581a:	46bd      	mov	sp, r7
 800581c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005820:	4770      	bx	lr
	...

08005824 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005824:	b580      	push	{r7, lr}
 8005826:	b088      	sub	sp, #32
 8005828:	af00      	add	r7, sp, #0
 800582a:	60f8      	str	r0, [r7, #12]
 800582c:	60b9      	str	r1, [r7, #8]
 800582e:	603b      	str	r3, [r7, #0]
 8005830:	4613      	mov	r3, r2
 8005832:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005834:	f7fc fe02 	bl	800243c <HAL_GetTick>
 8005838:	4602      	mov	r2, r0
 800583a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800583c:	1a9b      	subs	r3, r3, r2
 800583e:	683a      	ldr	r2, [r7, #0]
 8005840:	4413      	add	r3, r2
 8005842:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005844:	f7fc fdfa 	bl	800243c <HAL_GetTick>
 8005848:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800584a:	4b39      	ldr	r3, [pc, #228]	; (8005930 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	015b      	lsls	r3, r3, #5
 8005850:	0d1b      	lsrs	r3, r3, #20
 8005852:	69fa      	ldr	r2, [r7, #28]
 8005854:	fb02 f303 	mul.w	r3, r2, r3
 8005858:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800585a:	e054      	b.n	8005906 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005862:	d050      	beq.n	8005906 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005864:	f7fc fdea 	bl	800243c <HAL_GetTick>
 8005868:	4602      	mov	r2, r0
 800586a:	69bb      	ldr	r3, [r7, #24]
 800586c:	1ad3      	subs	r3, r2, r3
 800586e:	69fa      	ldr	r2, [r7, #28]
 8005870:	429a      	cmp	r2, r3
 8005872:	d902      	bls.n	800587a <SPI_WaitFlagStateUntilTimeout+0x56>
 8005874:	69fb      	ldr	r3, [r7, #28]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d13d      	bne.n	80058f6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	685a      	ldr	r2, [r3, #4]
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005888:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	685b      	ldr	r3, [r3, #4]
 800588e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005892:	d111      	bne.n	80058b8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	689b      	ldr	r3, [r3, #8]
 8005898:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800589c:	d004      	beq.n	80058a8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	689b      	ldr	r3, [r3, #8]
 80058a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058a6:	d107      	bne.n	80058b8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	681a      	ldr	r2, [r3, #0]
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80058b6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80058c0:	d10f      	bne.n	80058e2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	681a      	ldr	r2, [r3, #0]
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80058d0:	601a      	str	r2, [r3, #0]
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	681a      	ldr	r2, [r3, #0]
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80058e0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	2201      	movs	r2, #1
 80058e6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	2200      	movs	r2, #0
 80058ee:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80058f2:	2303      	movs	r3, #3
 80058f4:	e017      	b.n	8005926 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80058f6:	697b      	ldr	r3, [r7, #20]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d101      	bne.n	8005900 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80058fc:	2300      	movs	r3, #0
 80058fe:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005900:	697b      	ldr	r3, [r7, #20]
 8005902:	3b01      	subs	r3, #1
 8005904:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	689a      	ldr	r2, [r3, #8]
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	4013      	ands	r3, r2
 8005910:	68ba      	ldr	r2, [r7, #8]
 8005912:	429a      	cmp	r2, r3
 8005914:	bf0c      	ite	eq
 8005916:	2301      	moveq	r3, #1
 8005918:	2300      	movne	r3, #0
 800591a:	b2db      	uxtb	r3, r3
 800591c:	461a      	mov	r2, r3
 800591e:	79fb      	ldrb	r3, [r7, #7]
 8005920:	429a      	cmp	r2, r3
 8005922:	d19b      	bne.n	800585c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005924:	2300      	movs	r3, #0
}
 8005926:	4618      	mov	r0, r3
 8005928:	3720      	adds	r7, #32
 800592a:	46bd      	mov	sp, r7
 800592c:	bd80      	pop	{r7, pc}
 800592e:	bf00      	nop
 8005930:	20000000 	.word	0x20000000

08005934 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005934:	b580      	push	{r7, lr}
 8005936:	b08a      	sub	sp, #40	; 0x28
 8005938:	af00      	add	r7, sp, #0
 800593a:	60f8      	str	r0, [r7, #12]
 800593c:	60b9      	str	r1, [r7, #8]
 800593e:	607a      	str	r2, [r7, #4]
 8005940:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005942:	2300      	movs	r3, #0
 8005944:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005946:	f7fc fd79 	bl	800243c <HAL_GetTick>
 800594a:	4602      	mov	r2, r0
 800594c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800594e:	1a9b      	subs	r3, r3, r2
 8005950:	683a      	ldr	r2, [r7, #0]
 8005952:	4413      	add	r3, r2
 8005954:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8005956:	f7fc fd71 	bl	800243c <HAL_GetTick>
 800595a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	330c      	adds	r3, #12
 8005962:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005964:	4b3d      	ldr	r3, [pc, #244]	; (8005a5c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005966:	681a      	ldr	r2, [r3, #0]
 8005968:	4613      	mov	r3, r2
 800596a:	009b      	lsls	r3, r3, #2
 800596c:	4413      	add	r3, r2
 800596e:	00da      	lsls	r2, r3, #3
 8005970:	1ad3      	subs	r3, r2, r3
 8005972:	0d1b      	lsrs	r3, r3, #20
 8005974:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005976:	fb02 f303 	mul.w	r3, r2, r3
 800597a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800597c:	e060      	b.n	8005a40 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800597e:	68bb      	ldr	r3, [r7, #8]
 8005980:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005984:	d107      	bne.n	8005996 <SPI_WaitFifoStateUntilTimeout+0x62>
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d104      	bne.n	8005996 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800598c:	69fb      	ldr	r3, [r7, #28]
 800598e:	781b      	ldrb	r3, [r3, #0]
 8005990:	b2db      	uxtb	r3, r3
 8005992:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005994:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	f1b3 3fff 	cmp.w	r3, #4294967295
 800599c:	d050      	beq.n	8005a40 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800599e:	f7fc fd4d 	bl	800243c <HAL_GetTick>
 80059a2:	4602      	mov	r2, r0
 80059a4:	6a3b      	ldr	r3, [r7, #32]
 80059a6:	1ad3      	subs	r3, r2, r3
 80059a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059aa:	429a      	cmp	r2, r3
 80059ac:	d902      	bls.n	80059b4 <SPI_WaitFifoStateUntilTimeout+0x80>
 80059ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d13d      	bne.n	8005a30 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	685a      	ldr	r2, [r3, #4]
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80059c2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	685b      	ldr	r3, [r3, #4]
 80059c8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80059cc:	d111      	bne.n	80059f2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	689b      	ldr	r3, [r3, #8]
 80059d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80059d6:	d004      	beq.n	80059e2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	689b      	ldr	r3, [r3, #8]
 80059dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059e0:	d107      	bne.n	80059f2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	681a      	ldr	r2, [r3, #0]
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80059f0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80059fa:	d10f      	bne.n	8005a1c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	681a      	ldr	r2, [r3, #0]
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005a0a:	601a      	str	r2, [r3, #0]
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	681a      	ldr	r2, [r3, #0]
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005a1a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	2201      	movs	r2, #1
 8005a20:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	2200      	movs	r2, #0
 8005a28:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005a2c:	2303      	movs	r3, #3
 8005a2e:	e010      	b.n	8005a52 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005a30:	69bb      	ldr	r3, [r7, #24]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d101      	bne.n	8005a3a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8005a36:	2300      	movs	r3, #0
 8005a38:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8005a3a:	69bb      	ldr	r3, [r7, #24]
 8005a3c:	3b01      	subs	r3, #1
 8005a3e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	689a      	ldr	r2, [r3, #8]
 8005a46:	68bb      	ldr	r3, [r7, #8]
 8005a48:	4013      	ands	r3, r2
 8005a4a:	687a      	ldr	r2, [r7, #4]
 8005a4c:	429a      	cmp	r2, r3
 8005a4e:	d196      	bne.n	800597e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005a50:	2300      	movs	r3, #0
}
 8005a52:	4618      	mov	r0, r3
 8005a54:	3728      	adds	r7, #40	; 0x28
 8005a56:	46bd      	mov	sp, r7
 8005a58:	bd80      	pop	{r7, pc}
 8005a5a:	bf00      	nop
 8005a5c:	20000000 	.word	0x20000000

08005a60 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b086      	sub	sp, #24
 8005a64:	af02      	add	r7, sp, #8
 8005a66:	60f8      	str	r0, [r7, #12]
 8005a68:	60b9      	str	r1, [r7, #8]
 8005a6a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	9300      	str	r3, [sp, #0]
 8005a70:	68bb      	ldr	r3, [r7, #8]
 8005a72:	2200      	movs	r2, #0
 8005a74:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005a78:	68f8      	ldr	r0, [r7, #12]
 8005a7a:	f7ff ff5b 	bl	8005934 <SPI_WaitFifoStateUntilTimeout>
 8005a7e:	4603      	mov	r3, r0
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d007      	beq.n	8005a94 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a88:	f043 0220 	orr.w	r2, r3, #32
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005a90:	2303      	movs	r3, #3
 8005a92:	e027      	b.n	8005ae4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	9300      	str	r3, [sp, #0]
 8005a98:	68bb      	ldr	r3, [r7, #8]
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	2180      	movs	r1, #128	; 0x80
 8005a9e:	68f8      	ldr	r0, [r7, #12]
 8005aa0:	f7ff fec0 	bl	8005824 <SPI_WaitFlagStateUntilTimeout>
 8005aa4:	4603      	mov	r3, r0
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d007      	beq.n	8005aba <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005aae:	f043 0220 	orr.w	r2, r3, #32
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005ab6:	2303      	movs	r3, #3
 8005ab8:	e014      	b.n	8005ae4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	9300      	str	r3, [sp, #0]
 8005abe:	68bb      	ldr	r3, [r7, #8]
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005ac6:	68f8      	ldr	r0, [r7, #12]
 8005ac8:	f7ff ff34 	bl	8005934 <SPI_WaitFifoStateUntilTimeout>
 8005acc:	4603      	mov	r3, r0
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d007      	beq.n	8005ae2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ad6:	f043 0220 	orr.w	r2, r3, #32
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005ade:	2303      	movs	r3, #3
 8005ae0:	e000      	b.n	8005ae4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005ae2:	2300      	movs	r3, #0
}
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	3710      	adds	r7, #16
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	bd80      	pop	{r7, pc}

08005aec <HAL_USART_Init>:
  *         parameters in the USART_InitTypeDef and initialize the associated handle.
  * @param  husart USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b082      	sub	sp, #8
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d101      	bne.n	8005afe <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 8005afa:	2301      	movs	r3, #1
 8005afc:	e03c      	b.n	8005b78 <HAL_USART_Init+0x8c>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8005b04:	b2db      	uxtb	r3, r3
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d106      	bne.n	8005b18 <HAL_USART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 8005b12:	6878      	ldr	r0, [r7, #4]
 8005b14:	f000 f834 	bl	8005b80 <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2202      	movs	r2, #2
 8005b1c:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  /* Disable the Peripheral */
  __HAL_USART_DISABLE(husart);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	681a      	ldr	r2, [r3, #0]
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f022 0201 	bic.w	r2, r2, #1
 8005b2e:	601a      	str	r2, [r3, #0]

  /* Set the Usart Communication parameters */
  if (USART_SetConfig(husart) == HAL_ERROR)
 8005b30:	6878      	ldr	r0, [r7, #4]
 8005b32:	f000 f865 	bl	8005c00 <USART_SetConfig>
 8005b36:	4603      	mov	r3, r0
 8005b38:	2b01      	cmp	r3, #1
 8005b3a:	d101      	bne.n	8005b40 <HAL_USART_Init+0x54>
  {
    return HAL_ERROR;
 8005b3c:	2301      	movs	r3, #1
 8005b3e:	e01b      	b.n	8005b78 <HAL_USART_Init+0x8c>

  /* In Synchronous mode, the following bits must be kept cleared:
  - LINEN bit in the USART_CR2 register
  - HDSEL, SCEN and IREN bits in the USART_CR3 register.
  */
  husart->Instance->CR2 &= ~USART_CR2_LINEN;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	685a      	ldr	r2, [r3, #4]
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005b4e:	605a      	str	r2, [r3, #4]
  husart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	689a      	ldr	r2, [r3, #8]
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005b5e:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	681a      	ldr	r2, [r3, #0]
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f042 0201 	orr.w	r2, r2, #1
 8005b6e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving husart->State to Ready */
  return (USART_CheckIdleState(husart));
 8005b70:	6878      	ldr	r0, [r7, #4]
 8005b72:	f000 f98f 	bl	8005e94 <USART_CheckIdleState>
 8005b76:	4603      	mov	r3, r0
}
 8005b78:	4618      	mov	r0, r3
 8005b7a:	3708      	adds	r7, #8
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	bd80      	pop	{r7, pc}

08005b80 <HAL_USART_MspInit>:
  * @brief Initialize the USART MSP.
  * @param husart USART handle.
  * @retval None
  */
__weak void HAL_USART_MspInit(USART_HandleTypeDef *husart)
{
 8005b80:	b480      	push	{r7}
 8005b82:	b083      	sub	sp, #12
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
  UNUSED(husart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_USART_MspInit can be implemented in the user file
   */
}
 8005b88:	bf00      	nop
 8005b8a:	370c      	adds	r7, #12
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b92:	4770      	bx	lr

08005b94 <USART_WaitOnFlagUntilTimeout>:
  * @param  Timeout timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_WaitOnFlagUntilTimeout(USART_HandleTypeDef *husart, uint32_t Flag, FlagStatus Status,
                                                      uint32_t Tickstart, uint32_t Timeout)
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b084      	sub	sp, #16
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	60f8      	str	r0, [r7, #12]
 8005b9c:	60b9      	str	r1, [r7, #8]
 8005b9e:	603b      	str	r3, [r7, #0]
 8005ba0:	4613      	mov	r3, r2
 8005ba2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8005ba4:	e018      	b.n	8005bd8 <USART_WaitOnFlagUntilTimeout+0x44>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ba6:	69bb      	ldr	r3, [r7, #24]
 8005ba8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bac:	d014      	beq.n	8005bd8 <USART_WaitOnFlagUntilTimeout+0x44>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005bae:	f7fc fc45 	bl	800243c <HAL_GetTick>
 8005bb2:	4602      	mov	r2, r0
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	1ad3      	subs	r3, r2, r3
 8005bb8:	69ba      	ldr	r2, [r7, #24]
 8005bba:	429a      	cmp	r2, r3
 8005bbc:	d302      	bcc.n	8005bc4 <USART_WaitOnFlagUntilTimeout+0x30>
 8005bbe:	69bb      	ldr	r3, [r7, #24]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d109      	bne.n	8005bd8 <USART_WaitOnFlagUntilTimeout+0x44>
      {
        husart->State = HAL_USART_STATE_READY;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	2201      	movs	r2, #1
 8005bc8:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

        /* Process Unlocked */
        __HAL_UNLOCK(husart);
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	2200      	movs	r2, #0
 8005bd0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

        return HAL_TIMEOUT;
 8005bd4:	2303      	movs	r3, #3
 8005bd6:	e00f      	b.n	8005bf8 <USART_WaitOnFlagUntilTimeout+0x64>
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	69da      	ldr	r2, [r3, #28]
 8005bde:	68bb      	ldr	r3, [r7, #8]
 8005be0:	4013      	ands	r3, r2
 8005be2:	68ba      	ldr	r2, [r7, #8]
 8005be4:	429a      	cmp	r2, r3
 8005be6:	bf0c      	ite	eq
 8005be8:	2301      	moveq	r3, #1
 8005bea:	2300      	movne	r3, #0
 8005bec:	b2db      	uxtb	r3, r3
 8005bee:	461a      	mov	r2, r3
 8005bf0:	79fb      	ldrb	r3, [r7, #7]
 8005bf2:	429a      	cmp	r2, r3
 8005bf4:	d0d7      	beq.n	8005ba6 <USART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005bf6:	2300      	movs	r3, #0
}
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	3710      	adds	r7, #16
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	bd80      	pop	{r7, pc}

08005c00 <USART_SetConfig>:
  * @brief Configure the USART peripheral.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_SetConfig(USART_HandleTypeDef *husart)
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b088      	sub	sp, #32
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  USART_ClockSourceTypeDef clocksource;
  HAL_StatusTypeDef ret                = HAL_OK;
 8005c08:	2300      	movs	r3, #0
 8005c0a:	77bb      	strb	r3, [r7, #30]
  uint16_t brrtemp;
  uint32_t usartdiv                    = 0x00000000;
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	61bb      	str	r3, [r7, #24]
  *  the USART Word Length, Parity and Mode:
  *  set the M bits according to husart->Init.WordLength value
  *  set PCE and PS bits according to husart->Init.Parity value
  *  set TE and RE bits according to husart->Init.Mode value
  *  force OVER8 to 1 to allow to reach the maximum speed (Fclock/8) */
  tmpreg = (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	689a      	ldr	r2, [r3, #8]
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	691b      	ldr	r3, [r3, #16]
 8005c18:	431a      	orrs	r2, r3
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	695b      	ldr	r3, [r3, #20]
 8005c1e:	4313      	orrs	r3, r2
 8005c20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c24:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005c30:	f023 030c 	bic.w	r3, r3, #12
 8005c34:	687a      	ldr	r2, [r7, #4]
 8005c36:	6812      	ldr	r2, [r2, #0]
 8005c38:	6979      	ldr	r1, [r7, #20]
 8005c3a:	430b      	orrs	r3, r1
 8005c3c:	6013      	str	r3, [r2, #0]
  /* Clear and configure the USART Clock, CPOL, CPHA, LBCL and STOP bits:
   * set CPOL bit according to husart->Init.CLKPolarity value
   * set CPHA bit according to husart->Init.CLKPhase value
   * set LBCL bit according to husart->Init.CLKLastBit value (used in SPI master mode only)
   * set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg = (uint32_t)(USART_CLOCK_ENABLE);
 8005c3e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005c42:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.CLKLastBit;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	6a1b      	ldr	r3, [r3, #32]
 8005c48:	697a      	ldr	r2, [r7, #20]
 8005c4a:	4313      	orrs	r3, r2
 8005c4c:	617b      	str	r3, [r7, #20]
  tmpreg |= ((uint32_t)husart->Init.CLKPolarity | (uint32_t)husart->Init.CLKPhase);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	699a      	ldr	r2, [r3, #24]
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	69db      	ldr	r3, [r3, #28]
 8005c56:	4313      	orrs	r3, r2
 8005c58:	697a      	ldr	r2, [r7, #20]
 8005c5a:	4313      	orrs	r3, r2
 8005c5c:	617b      	str	r3, [r7, #20]
  tmpreg |= (uint32_t)husart->Init.StopBits;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	68db      	ldr	r3, [r3, #12]
 8005c62:	697a      	ldr	r2, [r7, #20]
 8005c64:	4313      	orrs	r3, r2
 8005c66:	617b      	str	r3, [r7, #20]
  MODIFY_REG(husart->Instance->CR2, USART_CR2_FIELDS, tmpreg);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	685b      	ldr	r3, [r3, #4]
 8005c6e:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	697a      	ldr	r2, [r7, #20]
 8005c78:	430a      	orrs	r2, r1
 8005c7a:	605a      	str	r2, [r3, #4]


  /*-------------------------- USART BRR Configuration -----------------------*/
  /* BRR is filled-up according to OVER8 bit setting which is forced to 1     */
  USART_GETCLOCKSOURCE(husart, clocksource);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	4a80      	ldr	r2, [pc, #512]	; (8005e84 <USART_SetConfig+0x284>)
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d11f      	bne.n	8005cc6 <USART_SetConfig+0xc6>
 8005c86:	4b80      	ldr	r3, [pc, #512]	; (8005e88 <USART_SetConfig+0x288>)
 8005c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c8a:	f003 0303 	and.w	r3, r3, #3
 8005c8e:	2b03      	cmp	r3, #3
 8005c90:	d816      	bhi.n	8005cc0 <USART_SetConfig+0xc0>
 8005c92:	a201      	add	r2, pc, #4	; (adr r2, 8005c98 <USART_SetConfig+0x98>)
 8005c94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c98:	08005ca9 	.word	0x08005ca9
 8005c9c:	08005cb5 	.word	0x08005cb5
 8005ca0:	08005cbb 	.word	0x08005cbb
 8005ca4:	08005caf 	.word	0x08005caf
 8005ca8:	2301      	movs	r3, #1
 8005caa:	77fb      	strb	r3, [r7, #31]
 8005cac:	e061      	b.n	8005d72 <USART_SetConfig+0x172>
 8005cae:	2302      	movs	r3, #2
 8005cb0:	77fb      	strb	r3, [r7, #31]
 8005cb2:	e05e      	b.n	8005d72 <USART_SetConfig+0x172>
 8005cb4:	2304      	movs	r3, #4
 8005cb6:	77fb      	strb	r3, [r7, #31]
 8005cb8:	e05b      	b.n	8005d72 <USART_SetConfig+0x172>
 8005cba:	2308      	movs	r3, #8
 8005cbc:	77fb      	strb	r3, [r7, #31]
 8005cbe:	e058      	b.n	8005d72 <USART_SetConfig+0x172>
 8005cc0:	2310      	movs	r3, #16
 8005cc2:	77fb      	strb	r3, [r7, #31]
 8005cc4:	e055      	b.n	8005d72 <USART_SetConfig+0x172>
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	4a70      	ldr	r2, [pc, #448]	; (8005e8c <USART_SetConfig+0x28c>)
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d124      	bne.n	8005d1a <USART_SetConfig+0x11a>
 8005cd0:	4b6d      	ldr	r3, [pc, #436]	; (8005e88 <USART_SetConfig+0x288>)
 8005cd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cd4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005cd8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005cdc:	d011      	beq.n	8005d02 <USART_SetConfig+0x102>
 8005cde:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005ce2:	d817      	bhi.n	8005d14 <USART_SetConfig+0x114>
 8005ce4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005ce8:	d011      	beq.n	8005d0e <USART_SetConfig+0x10e>
 8005cea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005cee:	d811      	bhi.n	8005d14 <USART_SetConfig+0x114>
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d003      	beq.n	8005cfc <USART_SetConfig+0xfc>
 8005cf4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005cf8:	d006      	beq.n	8005d08 <USART_SetConfig+0x108>
 8005cfa:	e00b      	b.n	8005d14 <USART_SetConfig+0x114>
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	77fb      	strb	r3, [r7, #31]
 8005d00:	e037      	b.n	8005d72 <USART_SetConfig+0x172>
 8005d02:	2302      	movs	r3, #2
 8005d04:	77fb      	strb	r3, [r7, #31]
 8005d06:	e034      	b.n	8005d72 <USART_SetConfig+0x172>
 8005d08:	2304      	movs	r3, #4
 8005d0a:	77fb      	strb	r3, [r7, #31]
 8005d0c:	e031      	b.n	8005d72 <USART_SetConfig+0x172>
 8005d0e:	2308      	movs	r3, #8
 8005d10:	77fb      	strb	r3, [r7, #31]
 8005d12:	e02e      	b.n	8005d72 <USART_SetConfig+0x172>
 8005d14:	2310      	movs	r3, #16
 8005d16:	77fb      	strb	r3, [r7, #31]
 8005d18:	e02b      	b.n	8005d72 <USART_SetConfig+0x172>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	4a5c      	ldr	r2, [pc, #368]	; (8005e90 <USART_SetConfig+0x290>)
 8005d20:	4293      	cmp	r3, r2
 8005d22:	d124      	bne.n	8005d6e <USART_SetConfig+0x16e>
 8005d24:	4b58      	ldr	r3, [pc, #352]	; (8005e88 <USART_SetConfig+0x288>)
 8005d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d28:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8005d2c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005d30:	d011      	beq.n	8005d56 <USART_SetConfig+0x156>
 8005d32:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005d36:	d817      	bhi.n	8005d68 <USART_SetConfig+0x168>
 8005d38:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005d3c:	d011      	beq.n	8005d62 <USART_SetConfig+0x162>
 8005d3e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005d42:	d811      	bhi.n	8005d68 <USART_SetConfig+0x168>
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d003      	beq.n	8005d50 <USART_SetConfig+0x150>
 8005d48:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005d4c:	d006      	beq.n	8005d5c <USART_SetConfig+0x15c>
 8005d4e:	e00b      	b.n	8005d68 <USART_SetConfig+0x168>
 8005d50:	2300      	movs	r3, #0
 8005d52:	77fb      	strb	r3, [r7, #31]
 8005d54:	e00d      	b.n	8005d72 <USART_SetConfig+0x172>
 8005d56:	2302      	movs	r3, #2
 8005d58:	77fb      	strb	r3, [r7, #31]
 8005d5a:	e00a      	b.n	8005d72 <USART_SetConfig+0x172>
 8005d5c:	2304      	movs	r3, #4
 8005d5e:	77fb      	strb	r3, [r7, #31]
 8005d60:	e007      	b.n	8005d72 <USART_SetConfig+0x172>
 8005d62:	2308      	movs	r3, #8
 8005d64:	77fb      	strb	r3, [r7, #31]
 8005d66:	e004      	b.n	8005d72 <USART_SetConfig+0x172>
 8005d68:	2310      	movs	r3, #16
 8005d6a:	77fb      	strb	r3, [r7, #31]
 8005d6c:	e001      	b.n	8005d72 <USART_SetConfig+0x172>
 8005d6e:	2310      	movs	r3, #16
 8005d70:	77fb      	strb	r3, [r7, #31]

  switch (clocksource)
 8005d72:	7ffb      	ldrb	r3, [r7, #31]
 8005d74:	2b08      	cmp	r3, #8
 8005d76:	d85a      	bhi.n	8005e2e <USART_SetConfig+0x22e>
 8005d78:	a201      	add	r2, pc, #4	; (adr r2, 8005d80 <USART_SetConfig+0x180>)
 8005d7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d7e:	bf00      	nop
 8005d80:	08005da5 	.word	0x08005da5
 8005d84:	08005dc3 	.word	0x08005dc3
 8005d88:	08005de1 	.word	0x08005de1
 8005d8c:	08005e2f 	.word	0x08005e2f
 8005d90:	08005dfb 	.word	0x08005dfb
 8005d94:	08005e2f 	.word	0x08005e2f
 8005d98:	08005e2f 	.word	0x08005e2f
 8005d9c:	08005e2f 	.word	0x08005e2f
 8005da0:	08005e19 	.word	0x08005e19
  {
    case USART_CLOCKSOURCE_PCLK1:
      pclk = HAL_RCC_GetPCLK1Freq();
 8005da4:	f7ff f846 	bl	8004e34 <HAL_RCC_GetPCLK1Freq>
 8005da8:	6138      	str	r0, [r7, #16]
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate));
 8005daa:	693b      	ldr	r3, [r7, #16]
 8005dac:	005a      	lsls	r2, r3, #1
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	685b      	ldr	r3, [r3, #4]
 8005db2:	085b      	lsrs	r3, r3, #1
 8005db4:	441a      	add	r2, r3
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	685b      	ldr	r3, [r3, #4]
 8005dba:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dbe:	61bb      	str	r3, [r7, #24]
      break;
 8005dc0:	e038      	b.n	8005e34 <USART_SetConfig+0x234>
    case USART_CLOCKSOURCE_PCLK2:
      pclk = HAL_RCC_GetPCLK2Freq();
 8005dc2:	f7ff f859 	bl	8004e78 <HAL_RCC_GetPCLK2Freq>
 8005dc6:	6138      	str	r0, [r7, #16]
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate));
 8005dc8:	693b      	ldr	r3, [r7, #16]
 8005dca:	005a      	lsls	r2, r3, #1
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	685b      	ldr	r3, [r3, #4]
 8005dd0:	085b      	lsrs	r3, r3, #1
 8005dd2:	441a      	add	r2, r3
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	685b      	ldr	r3, [r3, #4]
 8005dd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ddc:	61bb      	str	r3, [r7, #24]
      break;
 8005dde:	e029      	b.n	8005e34 <USART_SetConfig+0x234>
    case USART_CLOCKSOURCE_HSI:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate));
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	685b      	ldr	r3, [r3, #4]
 8005de4:	085b      	lsrs	r3, r3, #1
 8005de6:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8005dea:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8005dee:	687a      	ldr	r2, [r7, #4]
 8005df0:	6852      	ldr	r2, [r2, #4]
 8005df2:	fbb3 f3f2 	udiv	r3, r3, r2
 8005df6:	61bb      	str	r3, [r7, #24]
      break;
 8005df8:	e01c      	b.n	8005e34 <USART_SetConfig+0x234>
    case USART_CLOCKSOURCE_SYSCLK:
      pclk = HAL_RCC_GetSysClockFreq();
 8005dfa:	f7fe ffa5 	bl	8004d48 <HAL_RCC_GetSysClockFreq>
 8005dfe:	6138      	str	r0, [r7, #16]
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(pclk, husart->Init.BaudRate));
 8005e00:	693b      	ldr	r3, [r7, #16]
 8005e02:	005a      	lsls	r2, r3, #1
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	685b      	ldr	r3, [r3, #4]
 8005e08:	085b      	lsrs	r3, r3, #1
 8005e0a:	441a      	add	r2, r3
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	685b      	ldr	r3, [r3, #4]
 8005e10:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e14:	61bb      	str	r3, [r7, #24]
      break;
 8005e16:	e00d      	b.n	8005e34 <USART_SetConfig+0x234>
    case USART_CLOCKSOURCE_LSE:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(LSE_VALUE, husart->Init.BaudRate));
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	685b      	ldr	r3, [r3, #4]
 8005e1c:	085b      	lsrs	r3, r3, #1
 8005e1e:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	685b      	ldr	r3, [r3, #4]
 8005e26:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e2a:	61bb      	str	r3, [r7, #24]
      break;
 8005e2c:	e002      	b.n	8005e34 <USART_SetConfig+0x234>
    default:
      ret = HAL_ERROR;
 8005e2e:	2301      	movs	r3, #1
 8005e30:	77bb      	strb	r3, [r7, #30]
      break;
 8005e32:	bf00      	nop
  }

  /* USARTDIV must be greater than or equal to 0d16 and smaller than or equal to ffff */
  if ((usartdiv >= USART_BRR_MIN) && (usartdiv <= USART_BRR_MAX))
 8005e34:	69bb      	ldr	r3, [r7, #24]
 8005e36:	2b0f      	cmp	r3, #15
 8005e38:	d916      	bls.n	8005e68 <USART_SetConfig+0x268>
 8005e3a:	69bb      	ldr	r3, [r7, #24]
 8005e3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e40:	d212      	bcs.n	8005e68 <USART_SetConfig+0x268>
  {
    brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005e42:	69bb      	ldr	r3, [r7, #24]
 8005e44:	b29b      	uxth	r3, r3
 8005e46:	f023 030f 	bic.w	r3, r3, #15
 8005e4a:	81fb      	strh	r3, [r7, #14]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005e4c:	69bb      	ldr	r3, [r7, #24]
 8005e4e:	085b      	lsrs	r3, r3, #1
 8005e50:	b29b      	uxth	r3, r3
 8005e52:	f003 0307 	and.w	r3, r3, #7
 8005e56:	b29a      	uxth	r2, r3
 8005e58:	89fb      	ldrh	r3, [r7, #14]
 8005e5a:	4313      	orrs	r3, r2
 8005e5c:	81fb      	strh	r3, [r7, #14]
    husart->Instance->BRR = brrtemp;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	89fa      	ldrh	r2, [r7, #14]
 8005e64:	60da      	str	r2, [r3, #12]
 8005e66:	e001      	b.n	8005e6c <USART_SetConfig+0x26c>
  }
  else
  {
    ret = HAL_ERROR;
 8005e68:	2301      	movs	r3, #1
 8005e6a:	77bb      	strb	r3, [r7, #30]
  }


  /* Clear ISR function pointers */
  husart->RxISR   = NULL;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2200      	movs	r2, #0
 8005e70:	639a      	str	r2, [r3, #56]	; 0x38
  husart->TxISR   = NULL;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2200      	movs	r2, #0
 8005e76:	63da      	str	r2, [r3, #60]	; 0x3c

  return ret;
 8005e78:	7fbb      	ldrb	r3, [r7, #30]
}
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	3720      	adds	r7, #32
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	bd80      	pop	{r7, pc}
 8005e82:	bf00      	nop
 8005e84:	40013800 	.word	0x40013800
 8005e88:	40021000 	.word	0x40021000
 8005e8c:	40004400 	.word	0x40004400
 8005e90:	40004800 	.word	0x40004800

08005e94 <USART_CheckIdleState>:
  * @brief Check the USART Idle State.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_CheckIdleState(USART_HandleTypeDef *husart)
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b086      	sub	sp, #24
 8005e98:	af02      	add	r7, sp, #8
 8005e9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the USART ErrorCode */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8005ea2:	f7fc facb 	bl	800243c <HAL_GetTick>
 8005ea6:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((husart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f003 0308 	and.w	r3, r3, #8
 8005eb2:	2b08      	cmp	r3, #8
 8005eb4:	d10e      	bne.n	8005ed4 <USART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_TEACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 8005eb6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005eba:	9300      	str	r3, [sp, #0]
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005ec4:	6878      	ldr	r0, [r7, #4]
 8005ec6:	f7ff fe65 	bl	8005b94 <USART_WaitOnFlagUntilTimeout>
 8005eca:	4603      	mov	r3, r0
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d001      	beq.n	8005ed4 <USART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005ed0:	2303      	movs	r3, #3
 8005ed2:	e01e      	b.n	8005f12 <USART_CheckIdleState+0x7e>
    }
  }
  /* Check if the Receiver is enabled */
  if ((husart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f003 0304 	and.w	r3, r3, #4
 8005ede:	2b04      	cmp	r3, #4
 8005ee0:	d10e      	bne.n	8005f00 <USART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_REACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 8005ee2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005ee6:	9300      	str	r3, [sp, #0]
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	2200      	movs	r2, #0
 8005eec:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005ef0:	6878      	ldr	r0, [r7, #4]
 8005ef2:	f7ff fe4f 	bl	8005b94 <USART_WaitOnFlagUntilTimeout>
 8005ef6:	4603      	mov	r3, r0
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d001      	beq.n	8005f00 <USART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005efc:	2303      	movs	r3, #3
 8005efe:	e008      	b.n	8005f12 <USART_CheckIdleState+0x7e>
    }
  }

  /* Initialize the USART state*/
  husart->State = HAL_USART_STATE_READY;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2201      	movs	r2, #1
 8005f04:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  return HAL_OK;
 8005f10:	2300      	movs	r3, #0
}
 8005f12:	4618      	mov	r0, r3
 8005f14:	3710      	adds	r7, #16
 8005f16:	46bd      	mov	sp, r7
 8005f18:	bd80      	pop	{r7, pc}

08005f1a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005f1a:	b480      	push	{r7}
 8005f1c:	b085      	sub	sp, #20
 8005f1e:	af00      	add	r7, sp, #0
 8005f20:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005f22:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8005f26:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005f2e:	b29a      	uxth	r2, r3
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	b29b      	uxth	r3, r3
 8005f34:	43db      	mvns	r3, r3
 8005f36:	b29b      	uxth	r3, r3
 8005f38:	4013      	ands	r3, r2
 8005f3a:	b29a      	uxth	r2, r3
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005f42:	2300      	movs	r3, #0
}
 8005f44:	4618      	mov	r0, r3
 8005f46:	3714      	adds	r7, #20
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4e:	4770      	bx	lr

08005f50 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005f50:	b084      	sub	sp, #16
 8005f52:	b480      	push	{r7}
 8005f54:	b083      	sub	sp, #12
 8005f56:	af00      	add	r7, sp, #0
 8005f58:	6078      	str	r0, [r7, #4]
 8005f5a:	f107 0014 	add.w	r0, r7, #20
 8005f5e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2201      	movs	r2, #1
 8005f66:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	2200      	movs	r2, #0
 8005f76:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8005f82:	2300      	movs	r3, #0
}
 8005f84:	4618      	mov	r0, r3
 8005f86:	370c      	adds	r7, #12
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8e:	b004      	add	sp, #16
 8005f90:	4770      	bx	lr
	...

08005f94 <__errno>:
 8005f94:	4b01      	ldr	r3, [pc, #4]	; (8005f9c <__errno+0x8>)
 8005f96:	6818      	ldr	r0, [r3, #0]
 8005f98:	4770      	bx	lr
 8005f9a:	bf00      	nop
 8005f9c:	2000007c 	.word	0x2000007c

08005fa0 <__libc_init_array>:
 8005fa0:	b570      	push	{r4, r5, r6, lr}
 8005fa2:	4d0d      	ldr	r5, [pc, #52]	; (8005fd8 <__libc_init_array+0x38>)
 8005fa4:	4c0d      	ldr	r4, [pc, #52]	; (8005fdc <__libc_init_array+0x3c>)
 8005fa6:	1b64      	subs	r4, r4, r5
 8005fa8:	10a4      	asrs	r4, r4, #2
 8005faa:	2600      	movs	r6, #0
 8005fac:	42a6      	cmp	r6, r4
 8005fae:	d109      	bne.n	8005fc4 <__libc_init_array+0x24>
 8005fb0:	4d0b      	ldr	r5, [pc, #44]	; (8005fe0 <__libc_init_array+0x40>)
 8005fb2:	4c0c      	ldr	r4, [pc, #48]	; (8005fe4 <__libc_init_array+0x44>)
 8005fb4:	f002 fd38 	bl	8008a28 <_init>
 8005fb8:	1b64      	subs	r4, r4, r5
 8005fba:	10a4      	asrs	r4, r4, #2
 8005fbc:	2600      	movs	r6, #0
 8005fbe:	42a6      	cmp	r6, r4
 8005fc0:	d105      	bne.n	8005fce <__libc_init_array+0x2e>
 8005fc2:	bd70      	pop	{r4, r5, r6, pc}
 8005fc4:	f855 3b04 	ldr.w	r3, [r5], #4
 8005fc8:	4798      	blx	r3
 8005fca:	3601      	adds	r6, #1
 8005fcc:	e7ee      	b.n	8005fac <__libc_init_array+0xc>
 8005fce:	f855 3b04 	ldr.w	r3, [r5], #4
 8005fd2:	4798      	blx	r3
 8005fd4:	3601      	adds	r6, #1
 8005fd6:	e7f2      	b.n	8005fbe <__libc_init_array+0x1e>
 8005fd8:	08008e54 	.word	0x08008e54
 8005fdc:	08008e54 	.word	0x08008e54
 8005fe0:	08008e54 	.word	0x08008e54
 8005fe4:	08008e58 	.word	0x08008e58

08005fe8 <memset>:
 8005fe8:	4402      	add	r2, r0
 8005fea:	4603      	mov	r3, r0
 8005fec:	4293      	cmp	r3, r2
 8005fee:	d100      	bne.n	8005ff2 <memset+0xa>
 8005ff0:	4770      	bx	lr
 8005ff2:	f803 1b01 	strb.w	r1, [r3], #1
 8005ff6:	e7f9      	b.n	8005fec <memset+0x4>

08005ff8 <__cvt>:
 8005ff8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005ffc:	ec55 4b10 	vmov	r4, r5, d0
 8006000:	2d00      	cmp	r5, #0
 8006002:	460e      	mov	r6, r1
 8006004:	4619      	mov	r1, r3
 8006006:	462b      	mov	r3, r5
 8006008:	bfbb      	ittet	lt
 800600a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800600e:	461d      	movlt	r5, r3
 8006010:	2300      	movge	r3, #0
 8006012:	232d      	movlt	r3, #45	; 0x2d
 8006014:	700b      	strb	r3, [r1, #0]
 8006016:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006018:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800601c:	4691      	mov	r9, r2
 800601e:	f023 0820 	bic.w	r8, r3, #32
 8006022:	bfbc      	itt	lt
 8006024:	4622      	movlt	r2, r4
 8006026:	4614      	movlt	r4, r2
 8006028:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800602c:	d005      	beq.n	800603a <__cvt+0x42>
 800602e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006032:	d100      	bne.n	8006036 <__cvt+0x3e>
 8006034:	3601      	adds	r6, #1
 8006036:	2102      	movs	r1, #2
 8006038:	e000      	b.n	800603c <__cvt+0x44>
 800603a:	2103      	movs	r1, #3
 800603c:	ab03      	add	r3, sp, #12
 800603e:	9301      	str	r3, [sp, #4]
 8006040:	ab02      	add	r3, sp, #8
 8006042:	9300      	str	r3, [sp, #0]
 8006044:	ec45 4b10 	vmov	d0, r4, r5
 8006048:	4653      	mov	r3, sl
 800604a:	4632      	mov	r2, r6
 800604c:	f000 fccc 	bl	80069e8 <_dtoa_r>
 8006050:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006054:	4607      	mov	r7, r0
 8006056:	d102      	bne.n	800605e <__cvt+0x66>
 8006058:	f019 0f01 	tst.w	r9, #1
 800605c:	d022      	beq.n	80060a4 <__cvt+0xac>
 800605e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006062:	eb07 0906 	add.w	r9, r7, r6
 8006066:	d110      	bne.n	800608a <__cvt+0x92>
 8006068:	783b      	ldrb	r3, [r7, #0]
 800606a:	2b30      	cmp	r3, #48	; 0x30
 800606c:	d10a      	bne.n	8006084 <__cvt+0x8c>
 800606e:	2200      	movs	r2, #0
 8006070:	2300      	movs	r3, #0
 8006072:	4620      	mov	r0, r4
 8006074:	4629      	mov	r1, r5
 8006076:	f7fa fd27 	bl	8000ac8 <__aeabi_dcmpeq>
 800607a:	b918      	cbnz	r0, 8006084 <__cvt+0x8c>
 800607c:	f1c6 0601 	rsb	r6, r6, #1
 8006080:	f8ca 6000 	str.w	r6, [sl]
 8006084:	f8da 3000 	ldr.w	r3, [sl]
 8006088:	4499      	add	r9, r3
 800608a:	2200      	movs	r2, #0
 800608c:	2300      	movs	r3, #0
 800608e:	4620      	mov	r0, r4
 8006090:	4629      	mov	r1, r5
 8006092:	f7fa fd19 	bl	8000ac8 <__aeabi_dcmpeq>
 8006096:	b108      	cbz	r0, 800609c <__cvt+0xa4>
 8006098:	f8cd 900c 	str.w	r9, [sp, #12]
 800609c:	2230      	movs	r2, #48	; 0x30
 800609e:	9b03      	ldr	r3, [sp, #12]
 80060a0:	454b      	cmp	r3, r9
 80060a2:	d307      	bcc.n	80060b4 <__cvt+0xbc>
 80060a4:	9b03      	ldr	r3, [sp, #12]
 80060a6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80060a8:	1bdb      	subs	r3, r3, r7
 80060aa:	4638      	mov	r0, r7
 80060ac:	6013      	str	r3, [r2, #0]
 80060ae:	b004      	add	sp, #16
 80060b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060b4:	1c59      	adds	r1, r3, #1
 80060b6:	9103      	str	r1, [sp, #12]
 80060b8:	701a      	strb	r2, [r3, #0]
 80060ba:	e7f0      	b.n	800609e <__cvt+0xa6>

080060bc <__exponent>:
 80060bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80060be:	4603      	mov	r3, r0
 80060c0:	2900      	cmp	r1, #0
 80060c2:	bfb8      	it	lt
 80060c4:	4249      	neglt	r1, r1
 80060c6:	f803 2b02 	strb.w	r2, [r3], #2
 80060ca:	bfb4      	ite	lt
 80060cc:	222d      	movlt	r2, #45	; 0x2d
 80060ce:	222b      	movge	r2, #43	; 0x2b
 80060d0:	2909      	cmp	r1, #9
 80060d2:	7042      	strb	r2, [r0, #1]
 80060d4:	dd2a      	ble.n	800612c <__exponent+0x70>
 80060d6:	f10d 0407 	add.w	r4, sp, #7
 80060da:	46a4      	mov	ip, r4
 80060dc:	270a      	movs	r7, #10
 80060de:	46a6      	mov	lr, r4
 80060e0:	460a      	mov	r2, r1
 80060e2:	fb91 f6f7 	sdiv	r6, r1, r7
 80060e6:	fb07 1516 	mls	r5, r7, r6, r1
 80060ea:	3530      	adds	r5, #48	; 0x30
 80060ec:	2a63      	cmp	r2, #99	; 0x63
 80060ee:	f104 34ff 	add.w	r4, r4, #4294967295
 80060f2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80060f6:	4631      	mov	r1, r6
 80060f8:	dcf1      	bgt.n	80060de <__exponent+0x22>
 80060fa:	3130      	adds	r1, #48	; 0x30
 80060fc:	f1ae 0502 	sub.w	r5, lr, #2
 8006100:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006104:	1c44      	adds	r4, r0, #1
 8006106:	4629      	mov	r1, r5
 8006108:	4561      	cmp	r1, ip
 800610a:	d30a      	bcc.n	8006122 <__exponent+0x66>
 800610c:	f10d 0209 	add.w	r2, sp, #9
 8006110:	eba2 020e 	sub.w	r2, r2, lr
 8006114:	4565      	cmp	r5, ip
 8006116:	bf88      	it	hi
 8006118:	2200      	movhi	r2, #0
 800611a:	4413      	add	r3, r2
 800611c:	1a18      	subs	r0, r3, r0
 800611e:	b003      	add	sp, #12
 8006120:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006122:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006126:	f804 2f01 	strb.w	r2, [r4, #1]!
 800612a:	e7ed      	b.n	8006108 <__exponent+0x4c>
 800612c:	2330      	movs	r3, #48	; 0x30
 800612e:	3130      	adds	r1, #48	; 0x30
 8006130:	7083      	strb	r3, [r0, #2]
 8006132:	70c1      	strb	r1, [r0, #3]
 8006134:	1d03      	adds	r3, r0, #4
 8006136:	e7f1      	b.n	800611c <__exponent+0x60>

08006138 <_printf_float>:
 8006138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800613c:	ed2d 8b02 	vpush	{d8}
 8006140:	b08d      	sub	sp, #52	; 0x34
 8006142:	460c      	mov	r4, r1
 8006144:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006148:	4616      	mov	r6, r2
 800614a:	461f      	mov	r7, r3
 800614c:	4605      	mov	r5, r0
 800614e:	f001 fa39 	bl	80075c4 <_localeconv_r>
 8006152:	f8d0 a000 	ldr.w	sl, [r0]
 8006156:	4650      	mov	r0, sl
 8006158:	f7fa f83a 	bl	80001d0 <strlen>
 800615c:	2300      	movs	r3, #0
 800615e:	930a      	str	r3, [sp, #40]	; 0x28
 8006160:	6823      	ldr	r3, [r4, #0]
 8006162:	9305      	str	r3, [sp, #20]
 8006164:	f8d8 3000 	ldr.w	r3, [r8]
 8006168:	f894 b018 	ldrb.w	fp, [r4, #24]
 800616c:	3307      	adds	r3, #7
 800616e:	f023 0307 	bic.w	r3, r3, #7
 8006172:	f103 0208 	add.w	r2, r3, #8
 8006176:	f8c8 2000 	str.w	r2, [r8]
 800617a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800617e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006182:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006186:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800618a:	9307      	str	r3, [sp, #28]
 800618c:	f8cd 8018 	str.w	r8, [sp, #24]
 8006190:	ee08 0a10 	vmov	s16, r0
 8006194:	4b9f      	ldr	r3, [pc, #636]	; (8006414 <_printf_float+0x2dc>)
 8006196:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800619a:	f04f 32ff 	mov.w	r2, #4294967295
 800619e:	f7fa fcc5 	bl	8000b2c <__aeabi_dcmpun>
 80061a2:	bb88      	cbnz	r0, 8006208 <_printf_float+0xd0>
 80061a4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80061a8:	4b9a      	ldr	r3, [pc, #616]	; (8006414 <_printf_float+0x2dc>)
 80061aa:	f04f 32ff 	mov.w	r2, #4294967295
 80061ae:	f7fa fc9f 	bl	8000af0 <__aeabi_dcmple>
 80061b2:	bb48      	cbnz	r0, 8006208 <_printf_float+0xd0>
 80061b4:	2200      	movs	r2, #0
 80061b6:	2300      	movs	r3, #0
 80061b8:	4640      	mov	r0, r8
 80061ba:	4649      	mov	r1, r9
 80061bc:	f7fa fc8e 	bl	8000adc <__aeabi_dcmplt>
 80061c0:	b110      	cbz	r0, 80061c8 <_printf_float+0x90>
 80061c2:	232d      	movs	r3, #45	; 0x2d
 80061c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80061c8:	4b93      	ldr	r3, [pc, #588]	; (8006418 <_printf_float+0x2e0>)
 80061ca:	4894      	ldr	r0, [pc, #592]	; (800641c <_printf_float+0x2e4>)
 80061cc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80061d0:	bf94      	ite	ls
 80061d2:	4698      	movls	r8, r3
 80061d4:	4680      	movhi	r8, r0
 80061d6:	2303      	movs	r3, #3
 80061d8:	6123      	str	r3, [r4, #16]
 80061da:	9b05      	ldr	r3, [sp, #20]
 80061dc:	f023 0204 	bic.w	r2, r3, #4
 80061e0:	6022      	str	r2, [r4, #0]
 80061e2:	f04f 0900 	mov.w	r9, #0
 80061e6:	9700      	str	r7, [sp, #0]
 80061e8:	4633      	mov	r3, r6
 80061ea:	aa0b      	add	r2, sp, #44	; 0x2c
 80061ec:	4621      	mov	r1, r4
 80061ee:	4628      	mov	r0, r5
 80061f0:	f000 f9d8 	bl	80065a4 <_printf_common>
 80061f4:	3001      	adds	r0, #1
 80061f6:	f040 8090 	bne.w	800631a <_printf_float+0x1e2>
 80061fa:	f04f 30ff 	mov.w	r0, #4294967295
 80061fe:	b00d      	add	sp, #52	; 0x34
 8006200:	ecbd 8b02 	vpop	{d8}
 8006204:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006208:	4642      	mov	r2, r8
 800620a:	464b      	mov	r3, r9
 800620c:	4640      	mov	r0, r8
 800620e:	4649      	mov	r1, r9
 8006210:	f7fa fc8c 	bl	8000b2c <__aeabi_dcmpun>
 8006214:	b140      	cbz	r0, 8006228 <_printf_float+0xf0>
 8006216:	464b      	mov	r3, r9
 8006218:	2b00      	cmp	r3, #0
 800621a:	bfbc      	itt	lt
 800621c:	232d      	movlt	r3, #45	; 0x2d
 800621e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006222:	487f      	ldr	r0, [pc, #508]	; (8006420 <_printf_float+0x2e8>)
 8006224:	4b7f      	ldr	r3, [pc, #508]	; (8006424 <_printf_float+0x2ec>)
 8006226:	e7d1      	b.n	80061cc <_printf_float+0x94>
 8006228:	6863      	ldr	r3, [r4, #4]
 800622a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800622e:	9206      	str	r2, [sp, #24]
 8006230:	1c5a      	adds	r2, r3, #1
 8006232:	d13f      	bne.n	80062b4 <_printf_float+0x17c>
 8006234:	2306      	movs	r3, #6
 8006236:	6063      	str	r3, [r4, #4]
 8006238:	9b05      	ldr	r3, [sp, #20]
 800623a:	6861      	ldr	r1, [r4, #4]
 800623c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006240:	2300      	movs	r3, #0
 8006242:	9303      	str	r3, [sp, #12]
 8006244:	ab0a      	add	r3, sp, #40	; 0x28
 8006246:	e9cd b301 	strd	fp, r3, [sp, #4]
 800624a:	ab09      	add	r3, sp, #36	; 0x24
 800624c:	ec49 8b10 	vmov	d0, r8, r9
 8006250:	9300      	str	r3, [sp, #0]
 8006252:	6022      	str	r2, [r4, #0]
 8006254:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006258:	4628      	mov	r0, r5
 800625a:	f7ff fecd 	bl	8005ff8 <__cvt>
 800625e:	9b06      	ldr	r3, [sp, #24]
 8006260:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006262:	2b47      	cmp	r3, #71	; 0x47
 8006264:	4680      	mov	r8, r0
 8006266:	d108      	bne.n	800627a <_printf_float+0x142>
 8006268:	1cc8      	adds	r0, r1, #3
 800626a:	db02      	blt.n	8006272 <_printf_float+0x13a>
 800626c:	6863      	ldr	r3, [r4, #4]
 800626e:	4299      	cmp	r1, r3
 8006270:	dd41      	ble.n	80062f6 <_printf_float+0x1be>
 8006272:	f1ab 0b02 	sub.w	fp, fp, #2
 8006276:	fa5f fb8b 	uxtb.w	fp, fp
 800627a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800627e:	d820      	bhi.n	80062c2 <_printf_float+0x18a>
 8006280:	3901      	subs	r1, #1
 8006282:	465a      	mov	r2, fp
 8006284:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006288:	9109      	str	r1, [sp, #36]	; 0x24
 800628a:	f7ff ff17 	bl	80060bc <__exponent>
 800628e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006290:	1813      	adds	r3, r2, r0
 8006292:	2a01      	cmp	r2, #1
 8006294:	4681      	mov	r9, r0
 8006296:	6123      	str	r3, [r4, #16]
 8006298:	dc02      	bgt.n	80062a0 <_printf_float+0x168>
 800629a:	6822      	ldr	r2, [r4, #0]
 800629c:	07d2      	lsls	r2, r2, #31
 800629e:	d501      	bpl.n	80062a4 <_printf_float+0x16c>
 80062a0:	3301      	adds	r3, #1
 80062a2:	6123      	str	r3, [r4, #16]
 80062a4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d09c      	beq.n	80061e6 <_printf_float+0xae>
 80062ac:	232d      	movs	r3, #45	; 0x2d
 80062ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80062b2:	e798      	b.n	80061e6 <_printf_float+0xae>
 80062b4:	9a06      	ldr	r2, [sp, #24]
 80062b6:	2a47      	cmp	r2, #71	; 0x47
 80062b8:	d1be      	bne.n	8006238 <_printf_float+0x100>
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d1bc      	bne.n	8006238 <_printf_float+0x100>
 80062be:	2301      	movs	r3, #1
 80062c0:	e7b9      	b.n	8006236 <_printf_float+0xfe>
 80062c2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80062c6:	d118      	bne.n	80062fa <_printf_float+0x1c2>
 80062c8:	2900      	cmp	r1, #0
 80062ca:	6863      	ldr	r3, [r4, #4]
 80062cc:	dd0b      	ble.n	80062e6 <_printf_float+0x1ae>
 80062ce:	6121      	str	r1, [r4, #16]
 80062d0:	b913      	cbnz	r3, 80062d8 <_printf_float+0x1a0>
 80062d2:	6822      	ldr	r2, [r4, #0]
 80062d4:	07d0      	lsls	r0, r2, #31
 80062d6:	d502      	bpl.n	80062de <_printf_float+0x1a6>
 80062d8:	3301      	adds	r3, #1
 80062da:	440b      	add	r3, r1
 80062dc:	6123      	str	r3, [r4, #16]
 80062de:	65a1      	str	r1, [r4, #88]	; 0x58
 80062e0:	f04f 0900 	mov.w	r9, #0
 80062e4:	e7de      	b.n	80062a4 <_printf_float+0x16c>
 80062e6:	b913      	cbnz	r3, 80062ee <_printf_float+0x1b6>
 80062e8:	6822      	ldr	r2, [r4, #0]
 80062ea:	07d2      	lsls	r2, r2, #31
 80062ec:	d501      	bpl.n	80062f2 <_printf_float+0x1ba>
 80062ee:	3302      	adds	r3, #2
 80062f0:	e7f4      	b.n	80062dc <_printf_float+0x1a4>
 80062f2:	2301      	movs	r3, #1
 80062f4:	e7f2      	b.n	80062dc <_printf_float+0x1a4>
 80062f6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80062fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80062fc:	4299      	cmp	r1, r3
 80062fe:	db05      	blt.n	800630c <_printf_float+0x1d4>
 8006300:	6823      	ldr	r3, [r4, #0]
 8006302:	6121      	str	r1, [r4, #16]
 8006304:	07d8      	lsls	r0, r3, #31
 8006306:	d5ea      	bpl.n	80062de <_printf_float+0x1a6>
 8006308:	1c4b      	adds	r3, r1, #1
 800630a:	e7e7      	b.n	80062dc <_printf_float+0x1a4>
 800630c:	2900      	cmp	r1, #0
 800630e:	bfd4      	ite	le
 8006310:	f1c1 0202 	rsble	r2, r1, #2
 8006314:	2201      	movgt	r2, #1
 8006316:	4413      	add	r3, r2
 8006318:	e7e0      	b.n	80062dc <_printf_float+0x1a4>
 800631a:	6823      	ldr	r3, [r4, #0]
 800631c:	055a      	lsls	r2, r3, #21
 800631e:	d407      	bmi.n	8006330 <_printf_float+0x1f8>
 8006320:	6923      	ldr	r3, [r4, #16]
 8006322:	4642      	mov	r2, r8
 8006324:	4631      	mov	r1, r6
 8006326:	4628      	mov	r0, r5
 8006328:	47b8      	blx	r7
 800632a:	3001      	adds	r0, #1
 800632c:	d12c      	bne.n	8006388 <_printf_float+0x250>
 800632e:	e764      	b.n	80061fa <_printf_float+0xc2>
 8006330:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006334:	f240 80e0 	bls.w	80064f8 <_printf_float+0x3c0>
 8006338:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800633c:	2200      	movs	r2, #0
 800633e:	2300      	movs	r3, #0
 8006340:	f7fa fbc2 	bl	8000ac8 <__aeabi_dcmpeq>
 8006344:	2800      	cmp	r0, #0
 8006346:	d034      	beq.n	80063b2 <_printf_float+0x27a>
 8006348:	4a37      	ldr	r2, [pc, #220]	; (8006428 <_printf_float+0x2f0>)
 800634a:	2301      	movs	r3, #1
 800634c:	4631      	mov	r1, r6
 800634e:	4628      	mov	r0, r5
 8006350:	47b8      	blx	r7
 8006352:	3001      	adds	r0, #1
 8006354:	f43f af51 	beq.w	80061fa <_printf_float+0xc2>
 8006358:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800635c:	429a      	cmp	r2, r3
 800635e:	db02      	blt.n	8006366 <_printf_float+0x22e>
 8006360:	6823      	ldr	r3, [r4, #0]
 8006362:	07d8      	lsls	r0, r3, #31
 8006364:	d510      	bpl.n	8006388 <_printf_float+0x250>
 8006366:	ee18 3a10 	vmov	r3, s16
 800636a:	4652      	mov	r2, sl
 800636c:	4631      	mov	r1, r6
 800636e:	4628      	mov	r0, r5
 8006370:	47b8      	blx	r7
 8006372:	3001      	adds	r0, #1
 8006374:	f43f af41 	beq.w	80061fa <_printf_float+0xc2>
 8006378:	f04f 0800 	mov.w	r8, #0
 800637c:	f104 091a 	add.w	r9, r4, #26
 8006380:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006382:	3b01      	subs	r3, #1
 8006384:	4543      	cmp	r3, r8
 8006386:	dc09      	bgt.n	800639c <_printf_float+0x264>
 8006388:	6823      	ldr	r3, [r4, #0]
 800638a:	079b      	lsls	r3, r3, #30
 800638c:	f100 8105 	bmi.w	800659a <_printf_float+0x462>
 8006390:	68e0      	ldr	r0, [r4, #12]
 8006392:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006394:	4298      	cmp	r0, r3
 8006396:	bfb8      	it	lt
 8006398:	4618      	movlt	r0, r3
 800639a:	e730      	b.n	80061fe <_printf_float+0xc6>
 800639c:	2301      	movs	r3, #1
 800639e:	464a      	mov	r2, r9
 80063a0:	4631      	mov	r1, r6
 80063a2:	4628      	mov	r0, r5
 80063a4:	47b8      	blx	r7
 80063a6:	3001      	adds	r0, #1
 80063a8:	f43f af27 	beq.w	80061fa <_printf_float+0xc2>
 80063ac:	f108 0801 	add.w	r8, r8, #1
 80063b0:	e7e6      	b.n	8006380 <_printf_float+0x248>
 80063b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	dc39      	bgt.n	800642c <_printf_float+0x2f4>
 80063b8:	4a1b      	ldr	r2, [pc, #108]	; (8006428 <_printf_float+0x2f0>)
 80063ba:	2301      	movs	r3, #1
 80063bc:	4631      	mov	r1, r6
 80063be:	4628      	mov	r0, r5
 80063c0:	47b8      	blx	r7
 80063c2:	3001      	adds	r0, #1
 80063c4:	f43f af19 	beq.w	80061fa <_printf_float+0xc2>
 80063c8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80063cc:	4313      	orrs	r3, r2
 80063ce:	d102      	bne.n	80063d6 <_printf_float+0x29e>
 80063d0:	6823      	ldr	r3, [r4, #0]
 80063d2:	07d9      	lsls	r1, r3, #31
 80063d4:	d5d8      	bpl.n	8006388 <_printf_float+0x250>
 80063d6:	ee18 3a10 	vmov	r3, s16
 80063da:	4652      	mov	r2, sl
 80063dc:	4631      	mov	r1, r6
 80063de:	4628      	mov	r0, r5
 80063e0:	47b8      	blx	r7
 80063e2:	3001      	adds	r0, #1
 80063e4:	f43f af09 	beq.w	80061fa <_printf_float+0xc2>
 80063e8:	f04f 0900 	mov.w	r9, #0
 80063ec:	f104 0a1a 	add.w	sl, r4, #26
 80063f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063f2:	425b      	negs	r3, r3
 80063f4:	454b      	cmp	r3, r9
 80063f6:	dc01      	bgt.n	80063fc <_printf_float+0x2c4>
 80063f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80063fa:	e792      	b.n	8006322 <_printf_float+0x1ea>
 80063fc:	2301      	movs	r3, #1
 80063fe:	4652      	mov	r2, sl
 8006400:	4631      	mov	r1, r6
 8006402:	4628      	mov	r0, r5
 8006404:	47b8      	blx	r7
 8006406:	3001      	adds	r0, #1
 8006408:	f43f aef7 	beq.w	80061fa <_printf_float+0xc2>
 800640c:	f109 0901 	add.w	r9, r9, #1
 8006410:	e7ee      	b.n	80063f0 <_printf_float+0x2b8>
 8006412:	bf00      	nop
 8006414:	7fefffff 	.word	0x7fefffff
 8006418:	08008a7c 	.word	0x08008a7c
 800641c:	08008a80 	.word	0x08008a80
 8006420:	08008a88 	.word	0x08008a88
 8006424:	08008a84 	.word	0x08008a84
 8006428:	08008a8c 	.word	0x08008a8c
 800642c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800642e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006430:	429a      	cmp	r2, r3
 8006432:	bfa8      	it	ge
 8006434:	461a      	movge	r2, r3
 8006436:	2a00      	cmp	r2, #0
 8006438:	4691      	mov	r9, r2
 800643a:	dc37      	bgt.n	80064ac <_printf_float+0x374>
 800643c:	f04f 0b00 	mov.w	fp, #0
 8006440:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006444:	f104 021a 	add.w	r2, r4, #26
 8006448:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800644a:	9305      	str	r3, [sp, #20]
 800644c:	eba3 0309 	sub.w	r3, r3, r9
 8006450:	455b      	cmp	r3, fp
 8006452:	dc33      	bgt.n	80064bc <_printf_float+0x384>
 8006454:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006458:	429a      	cmp	r2, r3
 800645a:	db3b      	blt.n	80064d4 <_printf_float+0x39c>
 800645c:	6823      	ldr	r3, [r4, #0]
 800645e:	07da      	lsls	r2, r3, #31
 8006460:	d438      	bmi.n	80064d4 <_printf_float+0x39c>
 8006462:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006464:	9a05      	ldr	r2, [sp, #20]
 8006466:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006468:	1a9a      	subs	r2, r3, r2
 800646a:	eba3 0901 	sub.w	r9, r3, r1
 800646e:	4591      	cmp	r9, r2
 8006470:	bfa8      	it	ge
 8006472:	4691      	movge	r9, r2
 8006474:	f1b9 0f00 	cmp.w	r9, #0
 8006478:	dc35      	bgt.n	80064e6 <_printf_float+0x3ae>
 800647a:	f04f 0800 	mov.w	r8, #0
 800647e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006482:	f104 0a1a 	add.w	sl, r4, #26
 8006486:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800648a:	1a9b      	subs	r3, r3, r2
 800648c:	eba3 0309 	sub.w	r3, r3, r9
 8006490:	4543      	cmp	r3, r8
 8006492:	f77f af79 	ble.w	8006388 <_printf_float+0x250>
 8006496:	2301      	movs	r3, #1
 8006498:	4652      	mov	r2, sl
 800649a:	4631      	mov	r1, r6
 800649c:	4628      	mov	r0, r5
 800649e:	47b8      	blx	r7
 80064a0:	3001      	adds	r0, #1
 80064a2:	f43f aeaa 	beq.w	80061fa <_printf_float+0xc2>
 80064a6:	f108 0801 	add.w	r8, r8, #1
 80064aa:	e7ec      	b.n	8006486 <_printf_float+0x34e>
 80064ac:	4613      	mov	r3, r2
 80064ae:	4631      	mov	r1, r6
 80064b0:	4642      	mov	r2, r8
 80064b2:	4628      	mov	r0, r5
 80064b4:	47b8      	blx	r7
 80064b6:	3001      	adds	r0, #1
 80064b8:	d1c0      	bne.n	800643c <_printf_float+0x304>
 80064ba:	e69e      	b.n	80061fa <_printf_float+0xc2>
 80064bc:	2301      	movs	r3, #1
 80064be:	4631      	mov	r1, r6
 80064c0:	4628      	mov	r0, r5
 80064c2:	9205      	str	r2, [sp, #20]
 80064c4:	47b8      	blx	r7
 80064c6:	3001      	adds	r0, #1
 80064c8:	f43f ae97 	beq.w	80061fa <_printf_float+0xc2>
 80064cc:	9a05      	ldr	r2, [sp, #20]
 80064ce:	f10b 0b01 	add.w	fp, fp, #1
 80064d2:	e7b9      	b.n	8006448 <_printf_float+0x310>
 80064d4:	ee18 3a10 	vmov	r3, s16
 80064d8:	4652      	mov	r2, sl
 80064da:	4631      	mov	r1, r6
 80064dc:	4628      	mov	r0, r5
 80064de:	47b8      	blx	r7
 80064e0:	3001      	adds	r0, #1
 80064e2:	d1be      	bne.n	8006462 <_printf_float+0x32a>
 80064e4:	e689      	b.n	80061fa <_printf_float+0xc2>
 80064e6:	9a05      	ldr	r2, [sp, #20]
 80064e8:	464b      	mov	r3, r9
 80064ea:	4442      	add	r2, r8
 80064ec:	4631      	mov	r1, r6
 80064ee:	4628      	mov	r0, r5
 80064f0:	47b8      	blx	r7
 80064f2:	3001      	adds	r0, #1
 80064f4:	d1c1      	bne.n	800647a <_printf_float+0x342>
 80064f6:	e680      	b.n	80061fa <_printf_float+0xc2>
 80064f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80064fa:	2a01      	cmp	r2, #1
 80064fc:	dc01      	bgt.n	8006502 <_printf_float+0x3ca>
 80064fe:	07db      	lsls	r3, r3, #31
 8006500:	d538      	bpl.n	8006574 <_printf_float+0x43c>
 8006502:	2301      	movs	r3, #1
 8006504:	4642      	mov	r2, r8
 8006506:	4631      	mov	r1, r6
 8006508:	4628      	mov	r0, r5
 800650a:	47b8      	blx	r7
 800650c:	3001      	adds	r0, #1
 800650e:	f43f ae74 	beq.w	80061fa <_printf_float+0xc2>
 8006512:	ee18 3a10 	vmov	r3, s16
 8006516:	4652      	mov	r2, sl
 8006518:	4631      	mov	r1, r6
 800651a:	4628      	mov	r0, r5
 800651c:	47b8      	blx	r7
 800651e:	3001      	adds	r0, #1
 8006520:	f43f ae6b 	beq.w	80061fa <_printf_float+0xc2>
 8006524:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006528:	2200      	movs	r2, #0
 800652a:	2300      	movs	r3, #0
 800652c:	f7fa facc 	bl	8000ac8 <__aeabi_dcmpeq>
 8006530:	b9d8      	cbnz	r0, 800656a <_printf_float+0x432>
 8006532:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006534:	f108 0201 	add.w	r2, r8, #1
 8006538:	3b01      	subs	r3, #1
 800653a:	4631      	mov	r1, r6
 800653c:	4628      	mov	r0, r5
 800653e:	47b8      	blx	r7
 8006540:	3001      	adds	r0, #1
 8006542:	d10e      	bne.n	8006562 <_printf_float+0x42a>
 8006544:	e659      	b.n	80061fa <_printf_float+0xc2>
 8006546:	2301      	movs	r3, #1
 8006548:	4652      	mov	r2, sl
 800654a:	4631      	mov	r1, r6
 800654c:	4628      	mov	r0, r5
 800654e:	47b8      	blx	r7
 8006550:	3001      	adds	r0, #1
 8006552:	f43f ae52 	beq.w	80061fa <_printf_float+0xc2>
 8006556:	f108 0801 	add.w	r8, r8, #1
 800655a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800655c:	3b01      	subs	r3, #1
 800655e:	4543      	cmp	r3, r8
 8006560:	dcf1      	bgt.n	8006546 <_printf_float+0x40e>
 8006562:	464b      	mov	r3, r9
 8006564:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006568:	e6dc      	b.n	8006324 <_printf_float+0x1ec>
 800656a:	f04f 0800 	mov.w	r8, #0
 800656e:	f104 0a1a 	add.w	sl, r4, #26
 8006572:	e7f2      	b.n	800655a <_printf_float+0x422>
 8006574:	2301      	movs	r3, #1
 8006576:	4642      	mov	r2, r8
 8006578:	e7df      	b.n	800653a <_printf_float+0x402>
 800657a:	2301      	movs	r3, #1
 800657c:	464a      	mov	r2, r9
 800657e:	4631      	mov	r1, r6
 8006580:	4628      	mov	r0, r5
 8006582:	47b8      	blx	r7
 8006584:	3001      	adds	r0, #1
 8006586:	f43f ae38 	beq.w	80061fa <_printf_float+0xc2>
 800658a:	f108 0801 	add.w	r8, r8, #1
 800658e:	68e3      	ldr	r3, [r4, #12]
 8006590:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006592:	1a5b      	subs	r3, r3, r1
 8006594:	4543      	cmp	r3, r8
 8006596:	dcf0      	bgt.n	800657a <_printf_float+0x442>
 8006598:	e6fa      	b.n	8006390 <_printf_float+0x258>
 800659a:	f04f 0800 	mov.w	r8, #0
 800659e:	f104 0919 	add.w	r9, r4, #25
 80065a2:	e7f4      	b.n	800658e <_printf_float+0x456>

080065a4 <_printf_common>:
 80065a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80065a8:	4616      	mov	r6, r2
 80065aa:	4699      	mov	r9, r3
 80065ac:	688a      	ldr	r2, [r1, #8]
 80065ae:	690b      	ldr	r3, [r1, #16]
 80065b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80065b4:	4293      	cmp	r3, r2
 80065b6:	bfb8      	it	lt
 80065b8:	4613      	movlt	r3, r2
 80065ba:	6033      	str	r3, [r6, #0]
 80065bc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80065c0:	4607      	mov	r7, r0
 80065c2:	460c      	mov	r4, r1
 80065c4:	b10a      	cbz	r2, 80065ca <_printf_common+0x26>
 80065c6:	3301      	adds	r3, #1
 80065c8:	6033      	str	r3, [r6, #0]
 80065ca:	6823      	ldr	r3, [r4, #0]
 80065cc:	0699      	lsls	r1, r3, #26
 80065ce:	bf42      	ittt	mi
 80065d0:	6833      	ldrmi	r3, [r6, #0]
 80065d2:	3302      	addmi	r3, #2
 80065d4:	6033      	strmi	r3, [r6, #0]
 80065d6:	6825      	ldr	r5, [r4, #0]
 80065d8:	f015 0506 	ands.w	r5, r5, #6
 80065dc:	d106      	bne.n	80065ec <_printf_common+0x48>
 80065de:	f104 0a19 	add.w	sl, r4, #25
 80065e2:	68e3      	ldr	r3, [r4, #12]
 80065e4:	6832      	ldr	r2, [r6, #0]
 80065e6:	1a9b      	subs	r3, r3, r2
 80065e8:	42ab      	cmp	r3, r5
 80065ea:	dc26      	bgt.n	800663a <_printf_common+0x96>
 80065ec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80065f0:	1e13      	subs	r3, r2, #0
 80065f2:	6822      	ldr	r2, [r4, #0]
 80065f4:	bf18      	it	ne
 80065f6:	2301      	movne	r3, #1
 80065f8:	0692      	lsls	r2, r2, #26
 80065fa:	d42b      	bmi.n	8006654 <_printf_common+0xb0>
 80065fc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006600:	4649      	mov	r1, r9
 8006602:	4638      	mov	r0, r7
 8006604:	47c0      	blx	r8
 8006606:	3001      	adds	r0, #1
 8006608:	d01e      	beq.n	8006648 <_printf_common+0xa4>
 800660a:	6823      	ldr	r3, [r4, #0]
 800660c:	68e5      	ldr	r5, [r4, #12]
 800660e:	6832      	ldr	r2, [r6, #0]
 8006610:	f003 0306 	and.w	r3, r3, #6
 8006614:	2b04      	cmp	r3, #4
 8006616:	bf08      	it	eq
 8006618:	1aad      	subeq	r5, r5, r2
 800661a:	68a3      	ldr	r3, [r4, #8]
 800661c:	6922      	ldr	r2, [r4, #16]
 800661e:	bf0c      	ite	eq
 8006620:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006624:	2500      	movne	r5, #0
 8006626:	4293      	cmp	r3, r2
 8006628:	bfc4      	itt	gt
 800662a:	1a9b      	subgt	r3, r3, r2
 800662c:	18ed      	addgt	r5, r5, r3
 800662e:	2600      	movs	r6, #0
 8006630:	341a      	adds	r4, #26
 8006632:	42b5      	cmp	r5, r6
 8006634:	d11a      	bne.n	800666c <_printf_common+0xc8>
 8006636:	2000      	movs	r0, #0
 8006638:	e008      	b.n	800664c <_printf_common+0xa8>
 800663a:	2301      	movs	r3, #1
 800663c:	4652      	mov	r2, sl
 800663e:	4649      	mov	r1, r9
 8006640:	4638      	mov	r0, r7
 8006642:	47c0      	blx	r8
 8006644:	3001      	adds	r0, #1
 8006646:	d103      	bne.n	8006650 <_printf_common+0xac>
 8006648:	f04f 30ff 	mov.w	r0, #4294967295
 800664c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006650:	3501      	adds	r5, #1
 8006652:	e7c6      	b.n	80065e2 <_printf_common+0x3e>
 8006654:	18e1      	adds	r1, r4, r3
 8006656:	1c5a      	adds	r2, r3, #1
 8006658:	2030      	movs	r0, #48	; 0x30
 800665a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800665e:	4422      	add	r2, r4
 8006660:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006664:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006668:	3302      	adds	r3, #2
 800666a:	e7c7      	b.n	80065fc <_printf_common+0x58>
 800666c:	2301      	movs	r3, #1
 800666e:	4622      	mov	r2, r4
 8006670:	4649      	mov	r1, r9
 8006672:	4638      	mov	r0, r7
 8006674:	47c0      	blx	r8
 8006676:	3001      	adds	r0, #1
 8006678:	d0e6      	beq.n	8006648 <_printf_common+0xa4>
 800667a:	3601      	adds	r6, #1
 800667c:	e7d9      	b.n	8006632 <_printf_common+0x8e>
	...

08006680 <_printf_i>:
 8006680:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006684:	7e0f      	ldrb	r7, [r1, #24]
 8006686:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006688:	2f78      	cmp	r7, #120	; 0x78
 800668a:	4691      	mov	r9, r2
 800668c:	4680      	mov	r8, r0
 800668e:	460c      	mov	r4, r1
 8006690:	469a      	mov	sl, r3
 8006692:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006696:	d807      	bhi.n	80066a8 <_printf_i+0x28>
 8006698:	2f62      	cmp	r7, #98	; 0x62
 800669a:	d80a      	bhi.n	80066b2 <_printf_i+0x32>
 800669c:	2f00      	cmp	r7, #0
 800669e:	f000 80d8 	beq.w	8006852 <_printf_i+0x1d2>
 80066a2:	2f58      	cmp	r7, #88	; 0x58
 80066a4:	f000 80a3 	beq.w	80067ee <_printf_i+0x16e>
 80066a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80066ac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80066b0:	e03a      	b.n	8006728 <_printf_i+0xa8>
 80066b2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80066b6:	2b15      	cmp	r3, #21
 80066b8:	d8f6      	bhi.n	80066a8 <_printf_i+0x28>
 80066ba:	a101      	add	r1, pc, #4	; (adr r1, 80066c0 <_printf_i+0x40>)
 80066bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80066c0:	08006719 	.word	0x08006719
 80066c4:	0800672d 	.word	0x0800672d
 80066c8:	080066a9 	.word	0x080066a9
 80066cc:	080066a9 	.word	0x080066a9
 80066d0:	080066a9 	.word	0x080066a9
 80066d4:	080066a9 	.word	0x080066a9
 80066d8:	0800672d 	.word	0x0800672d
 80066dc:	080066a9 	.word	0x080066a9
 80066e0:	080066a9 	.word	0x080066a9
 80066e4:	080066a9 	.word	0x080066a9
 80066e8:	080066a9 	.word	0x080066a9
 80066ec:	08006839 	.word	0x08006839
 80066f0:	0800675d 	.word	0x0800675d
 80066f4:	0800681b 	.word	0x0800681b
 80066f8:	080066a9 	.word	0x080066a9
 80066fc:	080066a9 	.word	0x080066a9
 8006700:	0800685b 	.word	0x0800685b
 8006704:	080066a9 	.word	0x080066a9
 8006708:	0800675d 	.word	0x0800675d
 800670c:	080066a9 	.word	0x080066a9
 8006710:	080066a9 	.word	0x080066a9
 8006714:	08006823 	.word	0x08006823
 8006718:	682b      	ldr	r3, [r5, #0]
 800671a:	1d1a      	adds	r2, r3, #4
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	602a      	str	r2, [r5, #0]
 8006720:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006724:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006728:	2301      	movs	r3, #1
 800672a:	e0a3      	b.n	8006874 <_printf_i+0x1f4>
 800672c:	6820      	ldr	r0, [r4, #0]
 800672e:	6829      	ldr	r1, [r5, #0]
 8006730:	0606      	lsls	r6, r0, #24
 8006732:	f101 0304 	add.w	r3, r1, #4
 8006736:	d50a      	bpl.n	800674e <_printf_i+0xce>
 8006738:	680e      	ldr	r6, [r1, #0]
 800673a:	602b      	str	r3, [r5, #0]
 800673c:	2e00      	cmp	r6, #0
 800673e:	da03      	bge.n	8006748 <_printf_i+0xc8>
 8006740:	232d      	movs	r3, #45	; 0x2d
 8006742:	4276      	negs	r6, r6
 8006744:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006748:	485e      	ldr	r0, [pc, #376]	; (80068c4 <_printf_i+0x244>)
 800674a:	230a      	movs	r3, #10
 800674c:	e019      	b.n	8006782 <_printf_i+0x102>
 800674e:	680e      	ldr	r6, [r1, #0]
 8006750:	602b      	str	r3, [r5, #0]
 8006752:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006756:	bf18      	it	ne
 8006758:	b236      	sxthne	r6, r6
 800675a:	e7ef      	b.n	800673c <_printf_i+0xbc>
 800675c:	682b      	ldr	r3, [r5, #0]
 800675e:	6820      	ldr	r0, [r4, #0]
 8006760:	1d19      	adds	r1, r3, #4
 8006762:	6029      	str	r1, [r5, #0]
 8006764:	0601      	lsls	r1, r0, #24
 8006766:	d501      	bpl.n	800676c <_printf_i+0xec>
 8006768:	681e      	ldr	r6, [r3, #0]
 800676a:	e002      	b.n	8006772 <_printf_i+0xf2>
 800676c:	0646      	lsls	r6, r0, #25
 800676e:	d5fb      	bpl.n	8006768 <_printf_i+0xe8>
 8006770:	881e      	ldrh	r6, [r3, #0]
 8006772:	4854      	ldr	r0, [pc, #336]	; (80068c4 <_printf_i+0x244>)
 8006774:	2f6f      	cmp	r7, #111	; 0x6f
 8006776:	bf0c      	ite	eq
 8006778:	2308      	moveq	r3, #8
 800677a:	230a      	movne	r3, #10
 800677c:	2100      	movs	r1, #0
 800677e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006782:	6865      	ldr	r5, [r4, #4]
 8006784:	60a5      	str	r5, [r4, #8]
 8006786:	2d00      	cmp	r5, #0
 8006788:	bfa2      	ittt	ge
 800678a:	6821      	ldrge	r1, [r4, #0]
 800678c:	f021 0104 	bicge.w	r1, r1, #4
 8006790:	6021      	strge	r1, [r4, #0]
 8006792:	b90e      	cbnz	r6, 8006798 <_printf_i+0x118>
 8006794:	2d00      	cmp	r5, #0
 8006796:	d04d      	beq.n	8006834 <_printf_i+0x1b4>
 8006798:	4615      	mov	r5, r2
 800679a:	fbb6 f1f3 	udiv	r1, r6, r3
 800679e:	fb03 6711 	mls	r7, r3, r1, r6
 80067a2:	5dc7      	ldrb	r7, [r0, r7]
 80067a4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80067a8:	4637      	mov	r7, r6
 80067aa:	42bb      	cmp	r3, r7
 80067ac:	460e      	mov	r6, r1
 80067ae:	d9f4      	bls.n	800679a <_printf_i+0x11a>
 80067b0:	2b08      	cmp	r3, #8
 80067b2:	d10b      	bne.n	80067cc <_printf_i+0x14c>
 80067b4:	6823      	ldr	r3, [r4, #0]
 80067b6:	07de      	lsls	r6, r3, #31
 80067b8:	d508      	bpl.n	80067cc <_printf_i+0x14c>
 80067ba:	6923      	ldr	r3, [r4, #16]
 80067bc:	6861      	ldr	r1, [r4, #4]
 80067be:	4299      	cmp	r1, r3
 80067c0:	bfde      	ittt	le
 80067c2:	2330      	movle	r3, #48	; 0x30
 80067c4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80067c8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80067cc:	1b52      	subs	r2, r2, r5
 80067ce:	6122      	str	r2, [r4, #16]
 80067d0:	f8cd a000 	str.w	sl, [sp]
 80067d4:	464b      	mov	r3, r9
 80067d6:	aa03      	add	r2, sp, #12
 80067d8:	4621      	mov	r1, r4
 80067da:	4640      	mov	r0, r8
 80067dc:	f7ff fee2 	bl	80065a4 <_printf_common>
 80067e0:	3001      	adds	r0, #1
 80067e2:	d14c      	bne.n	800687e <_printf_i+0x1fe>
 80067e4:	f04f 30ff 	mov.w	r0, #4294967295
 80067e8:	b004      	add	sp, #16
 80067ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067ee:	4835      	ldr	r0, [pc, #212]	; (80068c4 <_printf_i+0x244>)
 80067f0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80067f4:	6829      	ldr	r1, [r5, #0]
 80067f6:	6823      	ldr	r3, [r4, #0]
 80067f8:	f851 6b04 	ldr.w	r6, [r1], #4
 80067fc:	6029      	str	r1, [r5, #0]
 80067fe:	061d      	lsls	r5, r3, #24
 8006800:	d514      	bpl.n	800682c <_printf_i+0x1ac>
 8006802:	07df      	lsls	r7, r3, #31
 8006804:	bf44      	itt	mi
 8006806:	f043 0320 	orrmi.w	r3, r3, #32
 800680a:	6023      	strmi	r3, [r4, #0]
 800680c:	b91e      	cbnz	r6, 8006816 <_printf_i+0x196>
 800680e:	6823      	ldr	r3, [r4, #0]
 8006810:	f023 0320 	bic.w	r3, r3, #32
 8006814:	6023      	str	r3, [r4, #0]
 8006816:	2310      	movs	r3, #16
 8006818:	e7b0      	b.n	800677c <_printf_i+0xfc>
 800681a:	6823      	ldr	r3, [r4, #0]
 800681c:	f043 0320 	orr.w	r3, r3, #32
 8006820:	6023      	str	r3, [r4, #0]
 8006822:	2378      	movs	r3, #120	; 0x78
 8006824:	4828      	ldr	r0, [pc, #160]	; (80068c8 <_printf_i+0x248>)
 8006826:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800682a:	e7e3      	b.n	80067f4 <_printf_i+0x174>
 800682c:	0659      	lsls	r1, r3, #25
 800682e:	bf48      	it	mi
 8006830:	b2b6      	uxthmi	r6, r6
 8006832:	e7e6      	b.n	8006802 <_printf_i+0x182>
 8006834:	4615      	mov	r5, r2
 8006836:	e7bb      	b.n	80067b0 <_printf_i+0x130>
 8006838:	682b      	ldr	r3, [r5, #0]
 800683a:	6826      	ldr	r6, [r4, #0]
 800683c:	6961      	ldr	r1, [r4, #20]
 800683e:	1d18      	adds	r0, r3, #4
 8006840:	6028      	str	r0, [r5, #0]
 8006842:	0635      	lsls	r5, r6, #24
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	d501      	bpl.n	800684c <_printf_i+0x1cc>
 8006848:	6019      	str	r1, [r3, #0]
 800684a:	e002      	b.n	8006852 <_printf_i+0x1d2>
 800684c:	0670      	lsls	r0, r6, #25
 800684e:	d5fb      	bpl.n	8006848 <_printf_i+0x1c8>
 8006850:	8019      	strh	r1, [r3, #0]
 8006852:	2300      	movs	r3, #0
 8006854:	6123      	str	r3, [r4, #16]
 8006856:	4615      	mov	r5, r2
 8006858:	e7ba      	b.n	80067d0 <_printf_i+0x150>
 800685a:	682b      	ldr	r3, [r5, #0]
 800685c:	1d1a      	adds	r2, r3, #4
 800685e:	602a      	str	r2, [r5, #0]
 8006860:	681d      	ldr	r5, [r3, #0]
 8006862:	6862      	ldr	r2, [r4, #4]
 8006864:	2100      	movs	r1, #0
 8006866:	4628      	mov	r0, r5
 8006868:	f7f9 fcba 	bl	80001e0 <memchr>
 800686c:	b108      	cbz	r0, 8006872 <_printf_i+0x1f2>
 800686e:	1b40      	subs	r0, r0, r5
 8006870:	6060      	str	r0, [r4, #4]
 8006872:	6863      	ldr	r3, [r4, #4]
 8006874:	6123      	str	r3, [r4, #16]
 8006876:	2300      	movs	r3, #0
 8006878:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800687c:	e7a8      	b.n	80067d0 <_printf_i+0x150>
 800687e:	6923      	ldr	r3, [r4, #16]
 8006880:	462a      	mov	r2, r5
 8006882:	4649      	mov	r1, r9
 8006884:	4640      	mov	r0, r8
 8006886:	47d0      	blx	sl
 8006888:	3001      	adds	r0, #1
 800688a:	d0ab      	beq.n	80067e4 <_printf_i+0x164>
 800688c:	6823      	ldr	r3, [r4, #0]
 800688e:	079b      	lsls	r3, r3, #30
 8006890:	d413      	bmi.n	80068ba <_printf_i+0x23a>
 8006892:	68e0      	ldr	r0, [r4, #12]
 8006894:	9b03      	ldr	r3, [sp, #12]
 8006896:	4298      	cmp	r0, r3
 8006898:	bfb8      	it	lt
 800689a:	4618      	movlt	r0, r3
 800689c:	e7a4      	b.n	80067e8 <_printf_i+0x168>
 800689e:	2301      	movs	r3, #1
 80068a0:	4632      	mov	r2, r6
 80068a2:	4649      	mov	r1, r9
 80068a4:	4640      	mov	r0, r8
 80068a6:	47d0      	blx	sl
 80068a8:	3001      	adds	r0, #1
 80068aa:	d09b      	beq.n	80067e4 <_printf_i+0x164>
 80068ac:	3501      	adds	r5, #1
 80068ae:	68e3      	ldr	r3, [r4, #12]
 80068b0:	9903      	ldr	r1, [sp, #12]
 80068b2:	1a5b      	subs	r3, r3, r1
 80068b4:	42ab      	cmp	r3, r5
 80068b6:	dcf2      	bgt.n	800689e <_printf_i+0x21e>
 80068b8:	e7eb      	b.n	8006892 <_printf_i+0x212>
 80068ba:	2500      	movs	r5, #0
 80068bc:	f104 0619 	add.w	r6, r4, #25
 80068c0:	e7f5      	b.n	80068ae <_printf_i+0x22e>
 80068c2:	bf00      	nop
 80068c4:	08008a8e 	.word	0x08008a8e
 80068c8:	08008a9f 	.word	0x08008a9f

080068cc <quorem>:
 80068cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068d0:	6903      	ldr	r3, [r0, #16]
 80068d2:	690c      	ldr	r4, [r1, #16]
 80068d4:	42a3      	cmp	r3, r4
 80068d6:	4607      	mov	r7, r0
 80068d8:	f2c0 8081 	blt.w	80069de <quorem+0x112>
 80068dc:	3c01      	subs	r4, #1
 80068de:	f101 0814 	add.w	r8, r1, #20
 80068e2:	f100 0514 	add.w	r5, r0, #20
 80068e6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80068ea:	9301      	str	r3, [sp, #4]
 80068ec:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80068f0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80068f4:	3301      	adds	r3, #1
 80068f6:	429a      	cmp	r2, r3
 80068f8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80068fc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006900:	fbb2 f6f3 	udiv	r6, r2, r3
 8006904:	d331      	bcc.n	800696a <quorem+0x9e>
 8006906:	f04f 0e00 	mov.w	lr, #0
 800690a:	4640      	mov	r0, r8
 800690c:	46ac      	mov	ip, r5
 800690e:	46f2      	mov	sl, lr
 8006910:	f850 2b04 	ldr.w	r2, [r0], #4
 8006914:	b293      	uxth	r3, r2
 8006916:	fb06 e303 	mla	r3, r6, r3, lr
 800691a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800691e:	b29b      	uxth	r3, r3
 8006920:	ebaa 0303 	sub.w	r3, sl, r3
 8006924:	f8dc a000 	ldr.w	sl, [ip]
 8006928:	0c12      	lsrs	r2, r2, #16
 800692a:	fa13 f38a 	uxtah	r3, r3, sl
 800692e:	fb06 e202 	mla	r2, r6, r2, lr
 8006932:	9300      	str	r3, [sp, #0]
 8006934:	9b00      	ldr	r3, [sp, #0]
 8006936:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800693a:	b292      	uxth	r2, r2
 800693c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006940:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006944:	f8bd 3000 	ldrh.w	r3, [sp]
 8006948:	4581      	cmp	r9, r0
 800694a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800694e:	f84c 3b04 	str.w	r3, [ip], #4
 8006952:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006956:	d2db      	bcs.n	8006910 <quorem+0x44>
 8006958:	f855 300b 	ldr.w	r3, [r5, fp]
 800695c:	b92b      	cbnz	r3, 800696a <quorem+0x9e>
 800695e:	9b01      	ldr	r3, [sp, #4]
 8006960:	3b04      	subs	r3, #4
 8006962:	429d      	cmp	r5, r3
 8006964:	461a      	mov	r2, r3
 8006966:	d32e      	bcc.n	80069c6 <quorem+0xfa>
 8006968:	613c      	str	r4, [r7, #16]
 800696a:	4638      	mov	r0, r7
 800696c:	f001 f8c6 	bl	8007afc <__mcmp>
 8006970:	2800      	cmp	r0, #0
 8006972:	db24      	blt.n	80069be <quorem+0xf2>
 8006974:	3601      	adds	r6, #1
 8006976:	4628      	mov	r0, r5
 8006978:	f04f 0c00 	mov.w	ip, #0
 800697c:	f858 2b04 	ldr.w	r2, [r8], #4
 8006980:	f8d0 e000 	ldr.w	lr, [r0]
 8006984:	b293      	uxth	r3, r2
 8006986:	ebac 0303 	sub.w	r3, ip, r3
 800698a:	0c12      	lsrs	r2, r2, #16
 800698c:	fa13 f38e 	uxtah	r3, r3, lr
 8006990:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006994:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006998:	b29b      	uxth	r3, r3
 800699a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800699e:	45c1      	cmp	r9, r8
 80069a0:	f840 3b04 	str.w	r3, [r0], #4
 80069a4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80069a8:	d2e8      	bcs.n	800697c <quorem+0xb0>
 80069aa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80069ae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80069b2:	b922      	cbnz	r2, 80069be <quorem+0xf2>
 80069b4:	3b04      	subs	r3, #4
 80069b6:	429d      	cmp	r5, r3
 80069b8:	461a      	mov	r2, r3
 80069ba:	d30a      	bcc.n	80069d2 <quorem+0x106>
 80069bc:	613c      	str	r4, [r7, #16]
 80069be:	4630      	mov	r0, r6
 80069c0:	b003      	add	sp, #12
 80069c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069c6:	6812      	ldr	r2, [r2, #0]
 80069c8:	3b04      	subs	r3, #4
 80069ca:	2a00      	cmp	r2, #0
 80069cc:	d1cc      	bne.n	8006968 <quorem+0x9c>
 80069ce:	3c01      	subs	r4, #1
 80069d0:	e7c7      	b.n	8006962 <quorem+0x96>
 80069d2:	6812      	ldr	r2, [r2, #0]
 80069d4:	3b04      	subs	r3, #4
 80069d6:	2a00      	cmp	r2, #0
 80069d8:	d1f0      	bne.n	80069bc <quorem+0xf0>
 80069da:	3c01      	subs	r4, #1
 80069dc:	e7eb      	b.n	80069b6 <quorem+0xea>
 80069de:	2000      	movs	r0, #0
 80069e0:	e7ee      	b.n	80069c0 <quorem+0xf4>
 80069e2:	0000      	movs	r0, r0
 80069e4:	0000      	movs	r0, r0
	...

080069e8 <_dtoa_r>:
 80069e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069ec:	ed2d 8b04 	vpush	{d8-d9}
 80069f0:	ec57 6b10 	vmov	r6, r7, d0
 80069f4:	b093      	sub	sp, #76	; 0x4c
 80069f6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80069f8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80069fc:	9106      	str	r1, [sp, #24]
 80069fe:	ee10 aa10 	vmov	sl, s0
 8006a02:	4604      	mov	r4, r0
 8006a04:	9209      	str	r2, [sp, #36]	; 0x24
 8006a06:	930c      	str	r3, [sp, #48]	; 0x30
 8006a08:	46bb      	mov	fp, r7
 8006a0a:	b975      	cbnz	r5, 8006a2a <_dtoa_r+0x42>
 8006a0c:	2010      	movs	r0, #16
 8006a0e:	f000 fddd 	bl	80075cc <malloc>
 8006a12:	4602      	mov	r2, r0
 8006a14:	6260      	str	r0, [r4, #36]	; 0x24
 8006a16:	b920      	cbnz	r0, 8006a22 <_dtoa_r+0x3a>
 8006a18:	4ba7      	ldr	r3, [pc, #668]	; (8006cb8 <_dtoa_r+0x2d0>)
 8006a1a:	21ea      	movs	r1, #234	; 0xea
 8006a1c:	48a7      	ldr	r0, [pc, #668]	; (8006cbc <_dtoa_r+0x2d4>)
 8006a1e:	f001 fa75 	bl	8007f0c <__assert_func>
 8006a22:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006a26:	6005      	str	r5, [r0, #0]
 8006a28:	60c5      	str	r5, [r0, #12]
 8006a2a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006a2c:	6819      	ldr	r1, [r3, #0]
 8006a2e:	b151      	cbz	r1, 8006a46 <_dtoa_r+0x5e>
 8006a30:	685a      	ldr	r2, [r3, #4]
 8006a32:	604a      	str	r2, [r1, #4]
 8006a34:	2301      	movs	r3, #1
 8006a36:	4093      	lsls	r3, r2
 8006a38:	608b      	str	r3, [r1, #8]
 8006a3a:	4620      	mov	r0, r4
 8006a3c:	f000 fe1c 	bl	8007678 <_Bfree>
 8006a40:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006a42:	2200      	movs	r2, #0
 8006a44:	601a      	str	r2, [r3, #0]
 8006a46:	1e3b      	subs	r3, r7, #0
 8006a48:	bfaa      	itet	ge
 8006a4a:	2300      	movge	r3, #0
 8006a4c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8006a50:	f8c8 3000 	strge.w	r3, [r8]
 8006a54:	4b9a      	ldr	r3, [pc, #616]	; (8006cc0 <_dtoa_r+0x2d8>)
 8006a56:	bfbc      	itt	lt
 8006a58:	2201      	movlt	r2, #1
 8006a5a:	f8c8 2000 	strlt.w	r2, [r8]
 8006a5e:	ea33 030b 	bics.w	r3, r3, fp
 8006a62:	d11b      	bne.n	8006a9c <_dtoa_r+0xb4>
 8006a64:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006a66:	f242 730f 	movw	r3, #9999	; 0x270f
 8006a6a:	6013      	str	r3, [r2, #0]
 8006a6c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006a70:	4333      	orrs	r3, r6
 8006a72:	f000 8592 	beq.w	800759a <_dtoa_r+0xbb2>
 8006a76:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006a78:	b963      	cbnz	r3, 8006a94 <_dtoa_r+0xac>
 8006a7a:	4b92      	ldr	r3, [pc, #584]	; (8006cc4 <_dtoa_r+0x2dc>)
 8006a7c:	e022      	b.n	8006ac4 <_dtoa_r+0xdc>
 8006a7e:	4b92      	ldr	r3, [pc, #584]	; (8006cc8 <_dtoa_r+0x2e0>)
 8006a80:	9301      	str	r3, [sp, #4]
 8006a82:	3308      	adds	r3, #8
 8006a84:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006a86:	6013      	str	r3, [r2, #0]
 8006a88:	9801      	ldr	r0, [sp, #4]
 8006a8a:	b013      	add	sp, #76	; 0x4c
 8006a8c:	ecbd 8b04 	vpop	{d8-d9}
 8006a90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a94:	4b8b      	ldr	r3, [pc, #556]	; (8006cc4 <_dtoa_r+0x2dc>)
 8006a96:	9301      	str	r3, [sp, #4]
 8006a98:	3303      	adds	r3, #3
 8006a9a:	e7f3      	b.n	8006a84 <_dtoa_r+0x9c>
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	4650      	mov	r0, sl
 8006aa2:	4659      	mov	r1, fp
 8006aa4:	f7fa f810 	bl	8000ac8 <__aeabi_dcmpeq>
 8006aa8:	ec4b ab19 	vmov	d9, sl, fp
 8006aac:	4680      	mov	r8, r0
 8006aae:	b158      	cbz	r0, 8006ac8 <_dtoa_r+0xe0>
 8006ab0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006ab2:	2301      	movs	r3, #1
 8006ab4:	6013      	str	r3, [r2, #0]
 8006ab6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	f000 856b 	beq.w	8007594 <_dtoa_r+0xbac>
 8006abe:	4883      	ldr	r0, [pc, #524]	; (8006ccc <_dtoa_r+0x2e4>)
 8006ac0:	6018      	str	r0, [r3, #0]
 8006ac2:	1e43      	subs	r3, r0, #1
 8006ac4:	9301      	str	r3, [sp, #4]
 8006ac6:	e7df      	b.n	8006a88 <_dtoa_r+0xa0>
 8006ac8:	ec4b ab10 	vmov	d0, sl, fp
 8006acc:	aa10      	add	r2, sp, #64	; 0x40
 8006ace:	a911      	add	r1, sp, #68	; 0x44
 8006ad0:	4620      	mov	r0, r4
 8006ad2:	f001 f8b9 	bl	8007c48 <__d2b>
 8006ad6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8006ada:	ee08 0a10 	vmov	s16, r0
 8006ade:	2d00      	cmp	r5, #0
 8006ae0:	f000 8084 	beq.w	8006bec <_dtoa_r+0x204>
 8006ae4:	ee19 3a90 	vmov	r3, s19
 8006ae8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006aec:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8006af0:	4656      	mov	r6, sl
 8006af2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8006af6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006afa:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8006afe:	4b74      	ldr	r3, [pc, #464]	; (8006cd0 <_dtoa_r+0x2e8>)
 8006b00:	2200      	movs	r2, #0
 8006b02:	4630      	mov	r0, r6
 8006b04:	4639      	mov	r1, r7
 8006b06:	f7f9 fbbf 	bl	8000288 <__aeabi_dsub>
 8006b0a:	a365      	add	r3, pc, #404	; (adr r3, 8006ca0 <_dtoa_r+0x2b8>)
 8006b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b10:	f7f9 fd72 	bl	80005f8 <__aeabi_dmul>
 8006b14:	a364      	add	r3, pc, #400	; (adr r3, 8006ca8 <_dtoa_r+0x2c0>)
 8006b16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b1a:	f7f9 fbb7 	bl	800028c <__adddf3>
 8006b1e:	4606      	mov	r6, r0
 8006b20:	4628      	mov	r0, r5
 8006b22:	460f      	mov	r7, r1
 8006b24:	f7f9 fcfe 	bl	8000524 <__aeabi_i2d>
 8006b28:	a361      	add	r3, pc, #388	; (adr r3, 8006cb0 <_dtoa_r+0x2c8>)
 8006b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b2e:	f7f9 fd63 	bl	80005f8 <__aeabi_dmul>
 8006b32:	4602      	mov	r2, r0
 8006b34:	460b      	mov	r3, r1
 8006b36:	4630      	mov	r0, r6
 8006b38:	4639      	mov	r1, r7
 8006b3a:	f7f9 fba7 	bl	800028c <__adddf3>
 8006b3e:	4606      	mov	r6, r0
 8006b40:	460f      	mov	r7, r1
 8006b42:	f7fa f809 	bl	8000b58 <__aeabi_d2iz>
 8006b46:	2200      	movs	r2, #0
 8006b48:	9000      	str	r0, [sp, #0]
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	4630      	mov	r0, r6
 8006b4e:	4639      	mov	r1, r7
 8006b50:	f7f9 ffc4 	bl	8000adc <__aeabi_dcmplt>
 8006b54:	b150      	cbz	r0, 8006b6c <_dtoa_r+0x184>
 8006b56:	9800      	ldr	r0, [sp, #0]
 8006b58:	f7f9 fce4 	bl	8000524 <__aeabi_i2d>
 8006b5c:	4632      	mov	r2, r6
 8006b5e:	463b      	mov	r3, r7
 8006b60:	f7f9 ffb2 	bl	8000ac8 <__aeabi_dcmpeq>
 8006b64:	b910      	cbnz	r0, 8006b6c <_dtoa_r+0x184>
 8006b66:	9b00      	ldr	r3, [sp, #0]
 8006b68:	3b01      	subs	r3, #1
 8006b6a:	9300      	str	r3, [sp, #0]
 8006b6c:	9b00      	ldr	r3, [sp, #0]
 8006b6e:	2b16      	cmp	r3, #22
 8006b70:	d85a      	bhi.n	8006c28 <_dtoa_r+0x240>
 8006b72:	9a00      	ldr	r2, [sp, #0]
 8006b74:	4b57      	ldr	r3, [pc, #348]	; (8006cd4 <_dtoa_r+0x2ec>)
 8006b76:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b7e:	ec51 0b19 	vmov	r0, r1, d9
 8006b82:	f7f9 ffab 	bl	8000adc <__aeabi_dcmplt>
 8006b86:	2800      	cmp	r0, #0
 8006b88:	d050      	beq.n	8006c2c <_dtoa_r+0x244>
 8006b8a:	9b00      	ldr	r3, [sp, #0]
 8006b8c:	3b01      	subs	r3, #1
 8006b8e:	9300      	str	r3, [sp, #0]
 8006b90:	2300      	movs	r3, #0
 8006b92:	930b      	str	r3, [sp, #44]	; 0x2c
 8006b94:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006b96:	1b5d      	subs	r5, r3, r5
 8006b98:	1e6b      	subs	r3, r5, #1
 8006b9a:	9305      	str	r3, [sp, #20]
 8006b9c:	bf45      	ittet	mi
 8006b9e:	f1c5 0301 	rsbmi	r3, r5, #1
 8006ba2:	9304      	strmi	r3, [sp, #16]
 8006ba4:	2300      	movpl	r3, #0
 8006ba6:	2300      	movmi	r3, #0
 8006ba8:	bf4c      	ite	mi
 8006baa:	9305      	strmi	r3, [sp, #20]
 8006bac:	9304      	strpl	r3, [sp, #16]
 8006bae:	9b00      	ldr	r3, [sp, #0]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	db3d      	blt.n	8006c30 <_dtoa_r+0x248>
 8006bb4:	9b05      	ldr	r3, [sp, #20]
 8006bb6:	9a00      	ldr	r2, [sp, #0]
 8006bb8:	920a      	str	r2, [sp, #40]	; 0x28
 8006bba:	4413      	add	r3, r2
 8006bbc:	9305      	str	r3, [sp, #20]
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	9307      	str	r3, [sp, #28]
 8006bc2:	9b06      	ldr	r3, [sp, #24]
 8006bc4:	2b09      	cmp	r3, #9
 8006bc6:	f200 8089 	bhi.w	8006cdc <_dtoa_r+0x2f4>
 8006bca:	2b05      	cmp	r3, #5
 8006bcc:	bfc4      	itt	gt
 8006bce:	3b04      	subgt	r3, #4
 8006bd0:	9306      	strgt	r3, [sp, #24]
 8006bd2:	9b06      	ldr	r3, [sp, #24]
 8006bd4:	f1a3 0302 	sub.w	r3, r3, #2
 8006bd8:	bfcc      	ite	gt
 8006bda:	2500      	movgt	r5, #0
 8006bdc:	2501      	movle	r5, #1
 8006bde:	2b03      	cmp	r3, #3
 8006be0:	f200 8087 	bhi.w	8006cf2 <_dtoa_r+0x30a>
 8006be4:	e8df f003 	tbb	[pc, r3]
 8006be8:	59383a2d 	.word	0x59383a2d
 8006bec:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006bf0:	441d      	add	r5, r3
 8006bf2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006bf6:	2b20      	cmp	r3, #32
 8006bf8:	bfc1      	itttt	gt
 8006bfa:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006bfe:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8006c02:	fa0b f303 	lslgt.w	r3, fp, r3
 8006c06:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006c0a:	bfda      	itte	le
 8006c0c:	f1c3 0320 	rsble	r3, r3, #32
 8006c10:	fa06 f003 	lslle.w	r0, r6, r3
 8006c14:	4318      	orrgt	r0, r3
 8006c16:	f7f9 fc75 	bl	8000504 <__aeabi_ui2d>
 8006c1a:	2301      	movs	r3, #1
 8006c1c:	4606      	mov	r6, r0
 8006c1e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8006c22:	3d01      	subs	r5, #1
 8006c24:	930e      	str	r3, [sp, #56]	; 0x38
 8006c26:	e76a      	b.n	8006afe <_dtoa_r+0x116>
 8006c28:	2301      	movs	r3, #1
 8006c2a:	e7b2      	b.n	8006b92 <_dtoa_r+0x1aa>
 8006c2c:	900b      	str	r0, [sp, #44]	; 0x2c
 8006c2e:	e7b1      	b.n	8006b94 <_dtoa_r+0x1ac>
 8006c30:	9b04      	ldr	r3, [sp, #16]
 8006c32:	9a00      	ldr	r2, [sp, #0]
 8006c34:	1a9b      	subs	r3, r3, r2
 8006c36:	9304      	str	r3, [sp, #16]
 8006c38:	4253      	negs	r3, r2
 8006c3a:	9307      	str	r3, [sp, #28]
 8006c3c:	2300      	movs	r3, #0
 8006c3e:	930a      	str	r3, [sp, #40]	; 0x28
 8006c40:	e7bf      	b.n	8006bc2 <_dtoa_r+0x1da>
 8006c42:	2300      	movs	r3, #0
 8006c44:	9308      	str	r3, [sp, #32]
 8006c46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	dc55      	bgt.n	8006cf8 <_dtoa_r+0x310>
 8006c4c:	2301      	movs	r3, #1
 8006c4e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006c52:	461a      	mov	r2, r3
 8006c54:	9209      	str	r2, [sp, #36]	; 0x24
 8006c56:	e00c      	b.n	8006c72 <_dtoa_r+0x28a>
 8006c58:	2301      	movs	r3, #1
 8006c5a:	e7f3      	b.n	8006c44 <_dtoa_r+0x25c>
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006c60:	9308      	str	r3, [sp, #32]
 8006c62:	9b00      	ldr	r3, [sp, #0]
 8006c64:	4413      	add	r3, r2
 8006c66:	9302      	str	r3, [sp, #8]
 8006c68:	3301      	adds	r3, #1
 8006c6a:	2b01      	cmp	r3, #1
 8006c6c:	9303      	str	r3, [sp, #12]
 8006c6e:	bfb8      	it	lt
 8006c70:	2301      	movlt	r3, #1
 8006c72:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006c74:	2200      	movs	r2, #0
 8006c76:	6042      	str	r2, [r0, #4]
 8006c78:	2204      	movs	r2, #4
 8006c7a:	f102 0614 	add.w	r6, r2, #20
 8006c7e:	429e      	cmp	r6, r3
 8006c80:	6841      	ldr	r1, [r0, #4]
 8006c82:	d93d      	bls.n	8006d00 <_dtoa_r+0x318>
 8006c84:	4620      	mov	r0, r4
 8006c86:	f000 fcb7 	bl	80075f8 <_Balloc>
 8006c8a:	9001      	str	r0, [sp, #4]
 8006c8c:	2800      	cmp	r0, #0
 8006c8e:	d13b      	bne.n	8006d08 <_dtoa_r+0x320>
 8006c90:	4b11      	ldr	r3, [pc, #68]	; (8006cd8 <_dtoa_r+0x2f0>)
 8006c92:	4602      	mov	r2, r0
 8006c94:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006c98:	e6c0      	b.n	8006a1c <_dtoa_r+0x34>
 8006c9a:	2301      	movs	r3, #1
 8006c9c:	e7df      	b.n	8006c5e <_dtoa_r+0x276>
 8006c9e:	bf00      	nop
 8006ca0:	636f4361 	.word	0x636f4361
 8006ca4:	3fd287a7 	.word	0x3fd287a7
 8006ca8:	8b60c8b3 	.word	0x8b60c8b3
 8006cac:	3fc68a28 	.word	0x3fc68a28
 8006cb0:	509f79fb 	.word	0x509f79fb
 8006cb4:	3fd34413 	.word	0x3fd34413
 8006cb8:	08008abd 	.word	0x08008abd
 8006cbc:	08008ad4 	.word	0x08008ad4
 8006cc0:	7ff00000 	.word	0x7ff00000
 8006cc4:	08008ab9 	.word	0x08008ab9
 8006cc8:	08008ab0 	.word	0x08008ab0
 8006ccc:	08008a8d 	.word	0x08008a8d
 8006cd0:	3ff80000 	.word	0x3ff80000
 8006cd4:	08008bc8 	.word	0x08008bc8
 8006cd8:	08008b2f 	.word	0x08008b2f
 8006cdc:	2501      	movs	r5, #1
 8006cde:	2300      	movs	r3, #0
 8006ce0:	9306      	str	r3, [sp, #24]
 8006ce2:	9508      	str	r5, [sp, #32]
 8006ce4:	f04f 33ff 	mov.w	r3, #4294967295
 8006ce8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006cec:	2200      	movs	r2, #0
 8006cee:	2312      	movs	r3, #18
 8006cf0:	e7b0      	b.n	8006c54 <_dtoa_r+0x26c>
 8006cf2:	2301      	movs	r3, #1
 8006cf4:	9308      	str	r3, [sp, #32]
 8006cf6:	e7f5      	b.n	8006ce4 <_dtoa_r+0x2fc>
 8006cf8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006cfa:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006cfe:	e7b8      	b.n	8006c72 <_dtoa_r+0x28a>
 8006d00:	3101      	adds	r1, #1
 8006d02:	6041      	str	r1, [r0, #4]
 8006d04:	0052      	lsls	r2, r2, #1
 8006d06:	e7b8      	b.n	8006c7a <_dtoa_r+0x292>
 8006d08:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006d0a:	9a01      	ldr	r2, [sp, #4]
 8006d0c:	601a      	str	r2, [r3, #0]
 8006d0e:	9b03      	ldr	r3, [sp, #12]
 8006d10:	2b0e      	cmp	r3, #14
 8006d12:	f200 809d 	bhi.w	8006e50 <_dtoa_r+0x468>
 8006d16:	2d00      	cmp	r5, #0
 8006d18:	f000 809a 	beq.w	8006e50 <_dtoa_r+0x468>
 8006d1c:	9b00      	ldr	r3, [sp, #0]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	dd32      	ble.n	8006d88 <_dtoa_r+0x3a0>
 8006d22:	4ab7      	ldr	r2, [pc, #732]	; (8007000 <_dtoa_r+0x618>)
 8006d24:	f003 030f 	and.w	r3, r3, #15
 8006d28:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006d2c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006d30:	9b00      	ldr	r3, [sp, #0]
 8006d32:	05d8      	lsls	r0, r3, #23
 8006d34:	ea4f 1723 	mov.w	r7, r3, asr #4
 8006d38:	d516      	bpl.n	8006d68 <_dtoa_r+0x380>
 8006d3a:	4bb2      	ldr	r3, [pc, #712]	; (8007004 <_dtoa_r+0x61c>)
 8006d3c:	ec51 0b19 	vmov	r0, r1, d9
 8006d40:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006d44:	f7f9 fd82 	bl	800084c <__aeabi_ddiv>
 8006d48:	f007 070f 	and.w	r7, r7, #15
 8006d4c:	4682      	mov	sl, r0
 8006d4e:	468b      	mov	fp, r1
 8006d50:	2503      	movs	r5, #3
 8006d52:	4eac      	ldr	r6, [pc, #688]	; (8007004 <_dtoa_r+0x61c>)
 8006d54:	b957      	cbnz	r7, 8006d6c <_dtoa_r+0x384>
 8006d56:	4642      	mov	r2, r8
 8006d58:	464b      	mov	r3, r9
 8006d5a:	4650      	mov	r0, sl
 8006d5c:	4659      	mov	r1, fp
 8006d5e:	f7f9 fd75 	bl	800084c <__aeabi_ddiv>
 8006d62:	4682      	mov	sl, r0
 8006d64:	468b      	mov	fp, r1
 8006d66:	e028      	b.n	8006dba <_dtoa_r+0x3d2>
 8006d68:	2502      	movs	r5, #2
 8006d6a:	e7f2      	b.n	8006d52 <_dtoa_r+0x36a>
 8006d6c:	07f9      	lsls	r1, r7, #31
 8006d6e:	d508      	bpl.n	8006d82 <_dtoa_r+0x39a>
 8006d70:	4640      	mov	r0, r8
 8006d72:	4649      	mov	r1, r9
 8006d74:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006d78:	f7f9 fc3e 	bl	80005f8 <__aeabi_dmul>
 8006d7c:	3501      	adds	r5, #1
 8006d7e:	4680      	mov	r8, r0
 8006d80:	4689      	mov	r9, r1
 8006d82:	107f      	asrs	r7, r7, #1
 8006d84:	3608      	adds	r6, #8
 8006d86:	e7e5      	b.n	8006d54 <_dtoa_r+0x36c>
 8006d88:	f000 809b 	beq.w	8006ec2 <_dtoa_r+0x4da>
 8006d8c:	9b00      	ldr	r3, [sp, #0]
 8006d8e:	4f9d      	ldr	r7, [pc, #628]	; (8007004 <_dtoa_r+0x61c>)
 8006d90:	425e      	negs	r6, r3
 8006d92:	4b9b      	ldr	r3, [pc, #620]	; (8007000 <_dtoa_r+0x618>)
 8006d94:	f006 020f 	and.w	r2, r6, #15
 8006d98:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006d9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006da0:	ec51 0b19 	vmov	r0, r1, d9
 8006da4:	f7f9 fc28 	bl	80005f8 <__aeabi_dmul>
 8006da8:	1136      	asrs	r6, r6, #4
 8006daa:	4682      	mov	sl, r0
 8006dac:	468b      	mov	fp, r1
 8006dae:	2300      	movs	r3, #0
 8006db0:	2502      	movs	r5, #2
 8006db2:	2e00      	cmp	r6, #0
 8006db4:	d17a      	bne.n	8006eac <_dtoa_r+0x4c4>
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d1d3      	bne.n	8006d62 <_dtoa_r+0x37a>
 8006dba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	f000 8082 	beq.w	8006ec6 <_dtoa_r+0x4de>
 8006dc2:	4b91      	ldr	r3, [pc, #580]	; (8007008 <_dtoa_r+0x620>)
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	4650      	mov	r0, sl
 8006dc8:	4659      	mov	r1, fp
 8006dca:	f7f9 fe87 	bl	8000adc <__aeabi_dcmplt>
 8006dce:	2800      	cmp	r0, #0
 8006dd0:	d079      	beq.n	8006ec6 <_dtoa_r+0x4de>
 8006dd2:	9b03      	ldr	r3, [sp, #12]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d076      	beq.n	8006ec6 <_dtoa_r+0x4de>
 8006dd8:	9b02      	ldr	r3, [sp, #8]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	dd36      	ble.n	8006e4c <_dtoa_r+0x464>
 8006dde:	9b00      	ldr	r3, [sp, #0]
 8006de0:	4650      	mov	r0, sl
 8006de2:	4659      	mov	r1, fp
 8006de4:	1e5f      	subs	r7, r3, #1
 8006de6:	2200      	movs	r2, #0
 8006de8:	4b88      	ldr	r3, [pc, #544]	; (800700c <_dtoa_r+0x624>)
 8006dea:	f7f9 fc05 	bl	80005f8 <__aeabi_dmul>
 8006dee:	9e02      	ldr	r6, [sp, #8]
 8006df0:	4682      	mov	sl, r0
 8006df2:	468b      	mov	fp, r1
 8006df4:	3501      	adds	r5, #1
 8006df6:	4628      	mov	r0, r5
 8006df8:	f7f9 fb94 	bl	8000524 <__aeabi_i2d>
 8006dfc:	4652      	mov	r2, sl
 8006dfe:	465b      	mov	r3, fp
 8006e00:	f7f9 fbfa 	bl	80005f8 <__aeabi_dmul>
 8006e04:	4b82      	ldr	r3, [pc, #520]	; (8007010 <_dtoa_r+0x628>)
 8006e06:	2200      	movs	r2, #0
 8006e08:	f7f9 fa40 	bl	800028c <__adddf3>
 8006e0c:	46d0      	mov	r8, sl
 8006e0e:	46d9      	mov	r9, fp
 8006e10:	4682      	mov	sl, r0
 8006e12:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8006e16:	2e00      	cmp	r6, #0
 8006e18:	d158      	bne.n	8006ecc <_dtoa_r+0x4e4>
 8006e1a:	4b7e      	ldr	r3, [pc, #504]	; (8007014 <_dtoa_r+0x62c>)
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	4640      	mov	r0, r8
 8006e20:	4649      	mov	r1, r9
 8006e22:	f7f9 fa31 	bl	8000288 <__aeabi_dsub>
 8006e26:	4652      	mov	r2, sl
 8006e28:	465b      	mov	r3, fp
 8006e2a:	4680      	mov	r8, r0
 8006e2c:	4689      	mov	r9, r1
 8006e2e:	f7f9 fe73 	bl	8000b18 <__aeabi_dcmpgt>
 8006e32:	2800      	cmp	r0, #0
 8006e34:	f040 8295 	bne.w	8007362 <_dtoa_r+0x97a>
 8006e38:	4652      	mov	r2, sl
 8006e3a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8006e3e:	4640      	mov	r0, r8
 8006e40:	4649      	mov	r1, r9
 8006e42:	f7f9 fe4b 	bl	8000adc <__aeabi_dcmplt>
 8006e46:	2800      	cmp	r0, #0
 8006e48:	f040 8289 	bne.w	800735e <_dtoa_r+0x976>
 8006e4c:	ec5b ab19 	vmov	sl, fp, d9
 8006e50:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	f2c0 8148 	blt.w	80070e8 <_dtoa_r+0x700>
 8006e58:	9a00      	ldr	r2, [sp, #0]
 8006e5a:	2a0e      	cmp	r2, #14
 8006e5c:	f300 8144 	bgt.w	80070e8 <_dtoa_r+0x700>
 8006e60:	4b67      	ldr	r3, [pc, #412]	; (8007000 <_dtoa_r+0x618>)
 8006e62:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006e66:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006e6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	f280 80d5 	bge.w	800701c <_dtoa_r+0x634>
 8006e72:	9b03      	ldr	r3, [sp, #12]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	f300 80d1 	bgt.w	800701c <_dtoa_r+0x634>
 8006e7a:	f040 826f 	bne.w	800735c <_dtoa_r+0x974>
 8006e7e:	4b65      	ldr	r3, [pc, #404]	; (8007014 <_dtoa_r+0x62c>)
 8006e80:	2200      	movs	r2, #0
 8006e82:	4640      	mov	r0, r8
 8006e84:	4649      	mov	r1, r9
 8006e86:	f7f9 fbb7 	bl	80005f8 <__aeabi_dmul>
 8006e8a:	4652      	mov	r2, sl
 8006e8c:	465b      	mov	r3, fp
 8006e8e:	f7f9 fe39 	bl	8000b04 <__aeabi_dcmpge>
 8006e92:	9e03      	ldr	r6, [sp, #12]
 8006e94:	4637      	mov	r7, r6
 8006e96:	2800      	cmp	r0, #0
 8006e98:	f040 8245 	bne.w	8007326 <_dtoa_r+0x93e>
 8006e9c:	9d01      	ldr	r5, [sp, #4]
 8006e9e:	2331      	movs	r3, #49	; 0x31
 8006ea0:	f805 3b01 	strb.w	r3, [r5], #1
 8006ea4:	9b00      	ldr	r3, [sp, #0]
 8006ea6:	3301      	adds	r3, #1
 8006ea8:	9300      	str	r3, [sp, #0]
 8006eaa:	e240      	b.n	800732e <_dtoa_r+0x946>
 8006eac:	07f2      	lsls	r2, r6, #31
 8006eae:	d505      	bpl.n	8006ebc <_dtoa_r+0x4d4>
 8006eb0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006eb4:	f7f9 fba0 	bl	80005f8 <__aeabi_dmul>
 8006eb8:	3501      	adds	r5, #1
 8006eba:	2301      	movs	r3, #1
 8006ebc:	1076      	asrs	r6, r6, #1
 8006ebe:	3708      	adds	r7, #8
 8006ec0:	e777      	b.n	8006db2 <_dtoa_r+0x3ca>
 8006ec2:	2502      	movs	r5, #2
 8006ec4:	e779      	b.n	8006dba <_dtoa_r+0x3d2>
 8006ec6:	9f00      	ldr	r7, [sp, #0]
 8006ec8:	9e03      	ldr	r6, [sp, #12]
 8006eca:	e794      	b.n	8006df6 <_dtoa_r+0x40e>
 8006ecc:	9901      	ldr	r1, [sp, #4]
 8006ece:	4b4c      	ldr	r3, [pc, #304]	; (8007000 <_dtoa_r+0x618>)
 8006ed0:	4431      	add	r1, r6
 8006ed2:	910d      	str	r1, [sp, #52]	; 0x34
 8006ed4:	9908      	ldr	r1, [sp, #32]
 8006ed6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006eda:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006ede:	2900      	cmp	r1, #0
 8006ee0:	d043      	beq.n	8006f6a <_dtoa_r+0x582>
 8006ee2:	494d      	ldr	r1, [pc, #308]	; (8007018 <_dtoa_r+0x630>)
 8006ee4:	2000      	movs	r0, #0
 8006ee6:	f7f9 fcb1 	bl	800084c <__aeabi_ddiv>
 8006eea:	4652      	mov	r2, sl
 8006eec:	465b      	mov	r3, fp
 8006eee:	f7f9 f9cb 	bl	8000288 <__aeabi_dsub>
 8006ef2:	9d01      	ldr	r5, [sp, #4]
 8006ef4:	4682      	mov	sl, r0
 8006ef6:	468b      	mov	fp, r1
 8006ef8:	4649      	mov	r1, r9
 8006efa:	4640      	mov	r0, r8
 8006efc:	f7f9 fe2c 	bl	8000b58 <__aeabi_d2iz>
 8006f00:	4606      	mov	r6, r0
 8006f02:	f7f9 fb0f 	bl	8000524 <__aeabi_i2d>
 8006f06:	4602      	mov	r2, r0
 8006f08:	460b      	mov	r3, r1
 8006f0a:	4640      	mov	r0, r8
 8006f0c:	4649      	mov	r1, r9
 8006f0e:	f7f9 f9bb 	bl	8000288 <__aeabi_dsub>
 8006f12:	3630      	adds	r6, #48	; 0x30
 8006f14:	f805 6b01 	strb.w	r6, [r5], #1
 8006f18:	4652      	mov	r2, sl
 8006f1a:	465b      	mov	r3, fp
 8006f1c:	4680      	mov	r8, r0
 8006f1e:	4689      	mov	r9, r1
 8006f20:	f7f9 fddc 	bl	8000adc <__aeabi_dcmplt>
 8006f24:	2800      	cmp	r0, #0
 8006f26:	d163      	bne.n	8006ff0 <_dtoa_r+0x608>
 8006f28:	4642      	mov	r2, r8
 8006f2a:	464b      	mov	r3, r9
 8006f2c:	4936      	ldr	r1, [pc, #216]	; (8007008 <_dtoa_r+0x620>)
 8006f2e:	2000      	movs	r0, #0
 8006f30:	f7f9 f9aa 	bl	8000288 <__aeabi_dsub>
 8006f34:	4652      	mov	r2, sl
 8006f36:	465b      	mov	r3, fp
 8006f38:	f7f9 fdd0 	bl	8000adc <__aeabi_dcmplt>
 8006f3c:	2800      	cmp	r0, #0
 8006f3e:	f040 80b5 	bne.w	80070ac <_dtoa_r+0x6c4>
 8006f42:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006f44:	429d      	cmp	r5, r3
 8006f46:	d081      	beq.n	8006e4c <_dtoa_r+0x464>
 8006f48:	4b30      	ldr	r3, [pc, #192]	; (800700c <_dtoa_r+0x624>)
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	4650      	mov	r0, sl
 8006f4e:	4659      	mov	r1, fp
 8006f50:	f7f9 fb52 	bl	80005f8 <__aeabi_dmul>
 8006f54:	4b2d      	ldr	r3, [pc, #180]	; (800700c <_dtoa_r+0x624>)
 8006f56:	4682      	mov	sl, r0
 8006f58:	468b      	mov	fp, r1
 8006f5a:	4640      	mov	r0, r8
 8006f5c:	4649      	mov	r1, r9
 8006f5e:	2200      	movs	r2, #0
 8006f60:	f7f9 fb4a 	bl	80005f8 <__aeabi_dmul>
 8006f64:	4680      	mov	r8, r0
 8006f66:	4689      	mov	r9, r1
 8006f68:	e7c6      	b.n	8006ef8 <_dtoa_r+0x510>
 8006f6a:	4650      	mov	r0, sl
 8006f6c:	4659      	mov	r1, fp
 8006f6e:	f7f9 fb43 	bl	80005f8 <__aeabi_dmul>
 8006f72:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006f74:	9d01      	ldr	r5, [sp, #4]
 8006f76:	930f      	str	r3, [sp, #60]	; 0x3c
 8006f78:	4682      	mov	sl, r0
 8006f7a:	468b      	mov	fp, r1
 8006f7c:	4649      	mov	r1, r9
 8006f7e:	4640      	mov	r0, r8
 8006f80:	f7f9 fdea 	bl	8000b58 <__aeabi_d2iz>
 8006f84:	4606      	mov	r6, r0
 8006f86:	f7f9 facd 	bl	8000524 <__aeabi_i2d>
 8006f8a:	3630      	adds	r6, #48	; 0x30
 8006f8c:	4602      	mov	r2, r0
 8006f8e:	460b      	mov	r3, r1
 8006f90:	4640      	mov	r0, r8
 8006f92:	4649      	mov	r1, r9
 8006f94:	f7f9 f978 	bl	8000288 <__aeabi_dsub>
 8006f98:	f805 6b01 	strb.w	r6, [r5], #1
 8006f9c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006f9e:	429d      	cmp	r5, r3
 8006fa0:	4680      	mov	r8, r0
 8006fa2:	4689      	mov	r9, r1
 8006fa4:	f04f 0200 	mov.w	r2, #0
 8006fa8:	d124      	bne.n	8006ff4 <_dtoa_r+0x60c>
 8006faa:	4b1b      	ldr	r3, [pc, #108]	; (8007018 <_dtoa_r+0x630>)
 8006fac:	4650      	mov	r0, sl
 8006fae:	4659      	mov	r1, fp
 8006fb0:	f7f9 f96c 	bl	800028c <__adddf3>
 8006fb4:	4602      	mov	r2, r0
 8006fb6:	460b      	mov	r3, r1
 8006fb8:	4640      	mov	r0, r8
 8006fba:	4649      	mov	r1, r9
 8006fbc:	f7f9 fdac 	bl	8000b18 <__aeabi_dcmpgt>
 8006fc0:	2800      	cmp	r0, #0
 8006fc2:	d173      	bne.n	80070ac <_dtoa_r+0x6c4>
 8006fc4:	4652      	mov	r2, sl
 8006fc6:	465b      	mov	r3, fp
 8006fc8:	4913      	ldr	r1, [pc, #76]	; (8007018 <_dtoa_r+0x630>)
 8006fca:	2000      	movs	r0, #0
 8006fcc:	f7f9 f95c 	bl	8000288 <__aeabi_dsub>
 8006fd0:	4602      	mov	r2, r0
 8006fd2:	460b      	mov	r3, r1
 8006fd4:	4640      	mov	r0, r8
 8006fd6:	4649      	mov	r1, r9
 8006fd8:	f7f9 fd80 	bl	8000adc <__aeabi_dcmplt>
 8006fdc:	2800      	cmp	r0, #0
 8006fde:	f43f af35 	beq.w	8006e4c <_dtoa_r+0x464>
 8006fe2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006fe4:	1e6b      	subs	r3, r5, #1
 8006fe6:	930f      	str	r3, [sp, #60]	; 0x3c
 8006fe8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006fec:	2b30      	cmp	r3, #48	; 0x30
 8006fee:	d0f8      	beq.n	8006fe2 <_dtoa_r+0x5fa>
 8006ff0:	9700      	str	r7, [sp, #0]
 8006ff2:	e049      	b.n	8007088 <_dtoa_r+0x6a0>
 8006ff4:	4b05      	ldr	r3, [pc, #20]	; (800700c <_dtoa_r+0x624>)
 8006ff6:	f7f9 faff 	bl	80005f8 <__aeabi_dmul>
 8006ffa:	4680      	mov	r8, r0
 8006ffc:	4689      	mov	r9, r1
 8006ffe:	e7bd      	b.n	8006f7c <_dtoa_r+0x594>
 8007000:	08008bc8 	.word	0x08008bc8
 8007004:	08008ba0 	.word	0x08008ba0
 8007008:	3ff00000 	.word	0x3ff00000
 800700c:	40240000 	.word	0x40240000
 8007010:	401c0000 	.word	0x401c0000
 8007014:	40140000 	.word	0x40140000
 8007018:	3fe00000 	.word	0x3fe00000
 800701c:	9d01      	ldr	r5, [sp, #4]
 800701e:	4656      	mov	r6, sl
 8007020:	465f      	mov	r7, fp
 8007022:	4642      	mov	r2, r8
 8007024:	464b      	mov	r3, r9
 8007026:	4630      	mov	r0, r6
 8007028:	4639      	mov	r1, r7
 800702a:	f7f9 fc0f 	bl	800084c <__aeabi_ddiv>
 800702e:	f7f9 fd93 	bl	8000b58 <__aeabi_d2iz>
 8007032:	4682      	mov	sl, r0
 8007034:	f7f9 fa76 	bl	8000524 <__aeabi_i2d>
 8007038:	4642      	mov	r2, r8
 800703a:	464b      	mov	r3, r9
 800703c:	f7f9 fadc 	bl	80005f8 <__aeabi_dmul>
 8007040:	4602      	mov	r2, r0
 8007042:	460b      	mov	r3, r1
 8007044:	4630      	mov	r0, r6
 8007046:	4639      	mov	r1, r7
 8007048:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800704c:	f7f9 f91c 	bl	8000288 <__aeabi_dsub>
 8007050:	f805 6b01 	strb.w	r6, [r5], #1
 8007054:	9e01      	ldr	r6, [sp, #4]
 8007056:	9f03      	ldr	r7, [sp, #12]
 8007058:	1bae      	subs	r6, r5, r6
 800705a:	42b7      	cmp	r7, r6
 800705c:	4602      	mov	r2, r0
 800705e:	460b      	mov	r3, r1
 8007060:	d135      	bne.n	80070ce <_dtoa_r+0x6e6>
 8007062:	f7f9 f913 	bl	800028c <__adddf3>
 8007066:	4642      	mov	r2, r8
 8007068:	464b      	mov	r3, r9
 800706a:	4606      	mov	r6, r0
 800706c:	460f      	mov	r7, r1
 800706e:	f7f9 fd53 	bl	8000b18 <__aeabi_dcmpgt>
 8007072:	b9d0      	cbnz	r0, 80070aa <_dtoa_r+0x6c2>
 8007074:	4642      	mov	r2, r8
 8007076:	464b      	mov	r3, r9
 8007078:	4630      	mov	r0, r6
 800707a:	4639      	mov	r1, r7
 800707c:	f7f9 fd24 	bl	8000ac8 <__aeabi_dcmpeq>
 8007080:	b110      	cbz	r0, 8007088 <_dtoa_r+0x6a0>
 8007082:	f01a 0f01 	tst.w	sl, #1
 8007086:	d110      	bne.n	80070aa <_dtoa_r+0x6c2>
 8007088:	4620      	mov	r0, r4
 800708a:	ee18 1a10 	vmov	r1, s16
 800708e:	f000 faf3 	bl	8007678 <_Bfree>
 8007092:	2300      	movs	r3, #0
 8007094:	9800      	ldr	r0, [sp, #0]
 8007096:	702b      	strb	r3, [r5, #0]
 8007098:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800709a:	3001      	adds	r0, #1
 800709c:	6018      	str	r0, [r3, #0]
 800709e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	f43f acf1 	beq.w	8006a88 <_dtoa_r+0xa0>
 80070a6:	601d      	str	r5, [r3, #0]
 80070a8:	e4ee      	b.n	8006a88 <_dtoa_r+0xa0>
 80070aa:	9f00      	ldr	r7, [sp, #0]
 80070ac:	462b      	mov	r3, r5
 80070ae:	461d      	mov	r5, r3
 80070b0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80070b4:	2a39      	cmp	r2, #57	; 0x39
 80070b6:	d106      	bne.n	80070c6 <_dtoa_r+0x6de>
 80070b8:	9a01      	ldr	r2, [sp, #4]
 80070ba:	429a      	cmp	r2, r3
 80070bc:	d1f7      	bne.n	80070ae <_dtoa_r+0x6c6>
 80070be:	9901      	ldr	r1, [sp, #4]
 80070c0:	2230      	movs	r2, #48	; 0x30
 80070c2:	3701      	adds	r7, #1
 80070c4:	700a      	strb	r2, [r1, #0]
 80070c6:	781a      	ldrb	r2, [r3, #0]
 80070c8:	3201      	adds	r2, #1
 80070ca:	701a      	strb	r2, [r3, #0]
 80070cc:	e790      	b.n	8006ff0 <_dtoa_r+0x608>
 80070ce:	4ba6      	ldr	r3, [pc, #664]	; (8007368 <_dtoa_r+0x980>)
 80070d0:	2200      	movs	r2, #0
 80070d2:	f7f9 fa91 	bl	80005f8 <__aeabi_dmul>
 80070d6:	2200      	movs	r2, #0
 80070d8:	2300      	movs	r3, #0
 80070da:	4606      	mov	r6, r0
 80070dc:	460f      	mov	r7, r1
 80070de:	f7f9 fcf3 	bl	8000ac8 <__aeabi_dcmpeq>
 80070e2:	2800      	cmp	r0, #0
 80070e4:	d09d      	beq.n	8007022 <_dtoa_r+0x63a>
 80070e6:	e7cf      	b.n	8007088 <_dtoa_r+0x6a0>
 80070e8:	9a08      	ldr	r2, [sp, #32]
 80070ea:	2a00      	cmp	r2, #0
 80070ec:	f000 80d7 	beq.w	800729e <_dtoa_r+0x8b6>
 80070f0:	9a06      	ldr	r2, [sp, #24]
 80070f2:	2a01      	cmp	r2, #1
 80070f4:	f300 80ba 	bgt.w	800726c <_dtoa_r+0x884>
 80070f8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80070fa:	2a00      	cmp	r2, #0
 80070fc:	f000 80b2 	beq.w	8007264 <_dtoa_r+0x87c>
 8007100:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007104:	9e07      	ldr	r6, [sp, #28]
 8007106:	9d04      	ldr	r5, [sp, #16]
 8007108:	9a04      	ldr	r2, [sp, #16]
 800710a:	441a      	add	r2, r3
 800710c:	9204      	str	r2, [sp, #16]
 800710e:	9a05      	ldr	r2, [sp, #20]
 8007110:	2101      	movs	r1, #1
 8007112:	441a      	add	r2, r3
 8007114:	4620      	mov	r0, r4
 8007116:	9205      	str	r2, [sp, #20]
 8007118:	f000 fb66 	bl	80077e8 <__i2b>
 800711c:	4607      	mov	r7, r0
 800711e:	2d00      	cmp	r5, #0
 8007120:	dd0c      	ble.n	800713c <_dtoa_r+0x754>
 8007122:	9b05      	ldr	r3, [sp, #20]
 8007124:	2b00      	cmp	r3, #0
 8007126:	dd09      	ble.n	800713c <_dtoa_r+0x754>
 8007128:	42ab      	cmp	r3, r5
 800712a:	9a04      	ldr	r2, [sp, #16]
 800712c:	bfa8      	it	ge
 800712e:	462b      	movge	r3, r5
 8007130:	1ad2      	subs	r2, r2, r3
 8007132:	9204      	str	r2, [sp, #16]
 8007134:	9a05      	ldr	r2, [sp, #20]
 8007136:	1aed      	subs	r5, r5, r3
 8007138:	1ad3      	subs	r3, r2, r3
 800713a:	9305      	str	r3, [sp, #20]
 800713c:	9b07      	ldr	r3, [sp, #28]
 800713e:	b31b      	cbz	r3, 8007188 <_dtoa_r+0x7a0>
 8007140:	9b08      	ldr	r3, [sp, #32]
 8007142:	2b00      	cmp	r3, #0
 8007144:	f000 80af 	beq.w	80072a6 <_dtoa_r+0x8be>
 8007148:	2e00      	cmp	r6, #0
 800714a:	dd13      	ble.n	8007174 <_dtoa_r+0x78c>
 800714c:	4639      	mov	r1, r7
 800714e:	4632      	mov	r2, r6
 8007150:	4620      	mov	r0, r4
 8007152:	f000 fc09 	bl	8007968 <__pow5mult>
 8007156:	ee18 2a10 	vmov	r2, s16
 800715a:	4601      	mov	r1, r0
 800715c:	4607      	mov	r7, r0
 800715e:	4620      	mov	r0, r4
 8007160:	f000 fb58 	bl	8007814 <__multiply>
 8007164:	ee18 1a10 	vmov	r1, s16
 8007168:	4680      	mov	r8, r0
 800716a:	4620      	mov	r0, r4
 800716c:	f000 fa84 	bl	8007678 <_Bfree>
 8007170:	ee08 8a10 	vmov	s16, r8
 8007174:	9b07      	ldr	r3, [sp, #28]
 8007176:	1b9a      	subs	r2, r3, r6
 8007178:	d006      	beq.n	8007188 <_dtoa_r+0x7a0>
 800717a:	ee18 1a10 	vmov	r1, s16
 800717e:	4620      	mov	r0, r4
 8007180:	f000 fbf2 	bl	8007968 <__pow5mult>
 8007184:	ee08 0a10 	vmov	s16, r0
 8007188:	2101      	movs	r1, #1
 800718a:	4620      	mov	r0, r4
 800718c:	f000 fb2c 	bl	80077e8 <__i2b>
 8007190:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007192:	2b00      	cmp	r3, #0
 8007194:	4606      	mov	r6, r0
 8007196:	f340 8088 	ble.w	80072aa <_dtoa_r+0x8c2>
 800719a:	461a      	mov	r2, r3
 800719c:	4601      	mov	r1, r0
 800719e:	4620      	mov	r0, r4
 80071a0:	f000 fbe2 	bl	8007968 <__pow5mult>
 80071a4:	9b06      	ldr	r3, [sp, #24]
 80071a6:	2b01      	cmp	r3, #1
 80071a8:	4606      	mov	r6, r0
 80071aa:	f340 8081 	ble.w	80072b0 <_dtoa_r+0x8c8>
 80071ae:	f04f 0800 	mov.w	r8, #0
 80071b2:	6933      	ldr	r3, [r6, #16]
 80071b4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80071b8:	6918      	ldr	r0, [r3, #16]
 80071ba:	f000 fac5 	bl	8007748 <__hi0bits>
 80071be:	f1c0 0020 	rsb	r0, r0, #32
 80071c2:	9b05      	ldr	r3, [sp, #20]
 80071c4:	4418      	add	r0, r3
 80071c6:	f010 001f 	ands.w	r0, r0, #31
 80071ca:	f000 8092 	beq.w	80072f2 <_dtoa_r+0x90a>
 80071ce:	f1c0 0320 	rsb	r3, r0, #32
 80071d2:	2b04      	cmp	r3, #4
 80071d4:	f340 808a 	ble.w	80072ec <_dtoa_r+0x904>
 80071d8:	f1c0 001c 	rsb	r0, r0, #28
 80071dc:	9b04      	ldr	r3, [sp, #16]
 80071de:	4403      	add	r3, r0
 80071e0:	9304      	str	r3, [sp, #16]
 80071e2:	9b05      	ldr	r3, [sp, #20]
 80071e4:	4403      	add	r3, r0
 80071e6:	4405      	add	r5, r0
 80071e8:	9305      	str	r3, [sp, #20]
 80071ea:	9b04      	ldr	r3, [sp, #16]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	dd07      	ble.n	8007200 <_dtoa_r+0x818>
 80071f0:	ee18 1a10 	vmov	r1, s16
 80071f4:	461a      	mov	r2, r3
 80071f6:	4620      	mov	r0, r4
 80071f8:	f000 fc10 	bl	8007a1c <__lshift>
 80071fc:	ee08 0a10 	vmov	s16, r0
 8007200:	9b05      	ldr	r3, [sp, #20]
 8007202:	2b00      	cmp	r3, #0
 8007204:	dd05      	ble.n	8007212 <_dtoa_r+0x82a>
 8007206:	4631      	mov	r1, r6
 8007208:	461a      	mov	r2, r3
 800720a:	4620      	mov	r0, r4
 800720c:	f000 fc06 	bl	8007a1c <__lshift>
 8007210:	4606      	mov	r6, r0
 8007212:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007214:	2b00      	cmp	r3, #0
 8007216:	d06e      	beq.n	80072f6 <_dtoa_r+0x90e>
 8007218:	ee18 0a10 	vmov	r0, s16
 800721c:	4631      	mov	r1, r6
 800721e:	f000 fc6d 	bl	8007afc <__mcmp>
 8007222:	2800      	cmp	r0, #0
 8007224:	da67      	bge.n	80072f6 <_dtoa_r+0x90e>
 8007226:	9b00      	ldr	r3, [sp, #0]
 8007228:	3b01      	subs	r3, #1
 800722a:	ee18 1a10 	vmov	r1, s16
 800722e:	9300      	str	r3, [sp, #0]
 8007230:	220a      	movs	r2, #10
 8007232:	2300      	movs	r3, #0
 8007234:	4620      	mov	r0, r4
 8007236:	f000 fa41 	bl	80076bc <__multadd>
 800723a:	9b08      	ldr	r3, [sp, #32]
 800723c:	ee08 0a10 	vmov	s16, r0
 8007240:	2b00      	cmp	r3, #0
 8007242:	f000 81b1 	beq.w	80075a8 <_dtoa_r+0xbc0>
 8007246:	2300      	movs	r3, #0
 8007248:	4639      	mov	r1, r7
 800724a:	220a      	movs	r2, #10
 800724c:	4620      	mov	r0, r4
 800724e:	f000 fa35 	bl	80076bc <__multadd>
 8007252:	9b02      	ldr	r3, [sp, #8]
 8007254:	2b00      	cmp	r3, #0
 8007256:	4607      	mov	r7, r0
 8007258:	f300 808e 	bgt.w	8007378 <_dtoa_r+0x990>
 800725c:	9b06      	ldr	r3, [sp, #24]
 800725e:	2b02      	cmp	r3, #2
 8007260:	dc51      	bgt.n	8007306 <_dtoa_r+0x91e>
 8007262:	e089      	b.n	8007378 <_dtoa_r+0x990>
 8007264:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007266:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800726a:	e74b      	b.n	8007104 <_dtoa_r+0x71c>
 800726c:	9b03      	ldr	r3, [sp, #12]
 800726e:	1e5e      	subs	r6, r3, #1
 8007270:	9b07      	ldr	r3, [sp, #28]
 8007272:	42b3      	cmp	r3, r6
 8007274:	bfbf      	itttt	lt
 8007276:	9b07      	ldrlt	r3, [sp, #28]
 8007278:	9607      	strlt	r6, [sp, #28]
 800727a:	1af2      	sublt	r2, r6, r3
 800727c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800727e:	bfb6      	itet	lt
 8007280:	189b      	addlt	r3, r3, r2
 8007282:	1b9e      	subge	r6, r3, r6
 8007284:	930a      	strlt	r3, [sp, #40]	; 0x28
 8007286:	9b03      	ldr	r3, [sp, #12]
 8007288:	bfb8      	it	lt
 800728a:	2600      	movlt	r6, #0
 800728c:	2b00      	cmp	r3, #0
 800728e:	bfb7      	itett	lt
 8007290:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8007294:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8007298:	1a9d      	sublt	r5, r3, r2
 800729a:	2300      	movlt	r3, #0
 800729c:	e734      	b.n	8007108 <_dtoa_r+0x720>
 800729e:	9e07      	ldr	r6, [sp, #28]
 80072a0:	9d04      	ldr	r5, [sp, #16]
 80072a2:	9f08      	ldr	r7, [sp, #32]
 80072a4:	e73b      	b.n	800711e <_dtoa_r+0x736>
 80072a6:	9a07      	ldr	r2, [sp, #28]
 80072a8:	e767      	b.n	800717a <_dtoa_r+0x792>
 80072aa:	9b06      	ldr	r3, [sp, #24]
 80072ac:	2b01      	cmp	r3, #1
 80072ae:	dc18      	bgt.n	80072e2 <_dtoa_r+0x8fa>
 80072b0:	f1ba 0f00 	cmp.w	sl, #0
 80072b4:	d115      	bne.n	80072e2 <_dtoa_r+0x8fa>
 80072b6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80072ba:	b993      	cbnz	r3, 80072e2 <_dtoa_r+0x8fa>
 80072bc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80072c0:	0d1b      	lsrs	r3, r3, #20
 80072c2:	051b      	lsls	r3, r3, #20
 80072c4:	b183      	cbz	r3, 80072e8 <_dtoa_r+0x900>
 80072c6:	9b04      	ldr	r3, [sp, #16]
 80072c8:	3301      	adds	r3, #1
 80072ca:	9304      	str	r3, [sp, #16]
 80072cc:	9b05      	ldr	r3, [sp, #20]
 80072ce:	3301      	adds	r3, #1
 80072d0:	9305      	str	r3, [sp, #20]
 80072d2:	f04f 0801 	mov.w	r8, #1
 80072d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80072d8:	2b00      	cmp	r3, #0
 80072da:	f47f af6a 	bne.w	80071b2 <_dtoa_r+0x7ca>
 80072de:	2001      	movs	r0, #1
 80072e0:	e76f      	b.n	80071c2 <_dtoa_r+0x7da>
 80072e2:	f04f 0800 	mov.w	r8, #0
 80072e6:	e7f6      	b.n	80072d6 <_dtoa_r+0x8ee>
 80072e8:	4698      	mov	r8, r3
 80072ea:	e7f4      	b.n	80072d6 <_dtoa_r+0x8ee>
 80072ec:	f43f af7d 	beq.w	80071ea <_dtoa_r+0x802>
 80072f0:	4618      	mov	r0, r3
 80072f2:	301c      	adds	r0, #28
 80072f4:	e772      	b.n	80071dc <_dtoa_r+0x7f4>
 80072f6:	9b03      	ldr	r3, [sp, #12]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	dc37      	bgt.n	800736c <_dtoa_r+0x984>
 80072fc:	9b06      	ldr	r3, [sp, #24]
 80072fe:	2b02      	cmp	r3, #2
 8007300:	dd34      	ble.n	800736c <_dtoa_r+0x984>
 8007302:	9b03      	ldr	r3, [sp, #12]
 8007304:	9302      	str	r3, [sp, #8]
 8007306:	9b02      	ldr	r3, [sp, #8]
 8007308:	b96b      	cbnz	r3, 8007326 <_dtoa_r+0x93e>
 800730a:	4631      	mov	r1, r6
 800730c:	2205      	movs	r2, #5
 800730e:	4620      	mov	r0, r4
 8007310:	f000 f9d4 	bl	80076bc <__multadd>
 8007314:	4601      	mov	r1, r0
 8007316:	4606      	mov	r6, r0
 8007318:	ee18 0a10 	vmov	r0, s16
 800731c:	f000 fbee 	bl	8007afc <__mcmp>
 8007320:	2800      	cmp	r0, #0
 8007322:	f73f adbb 	bgt.w	8006e9c <_dtoa_r+0x4b4>
 8007326:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007328:	9d01      	ldr	r5, [sp, #4]
 800732a:	43db      	mvns	r3, r3
 800732c:	9300      	str	r3, [sp, #0]
 800732e:	f04f 0800 	mov.w	r8, #0
 8007332:	4631      	mov	r1, r6
 8007334:	4620      	mov	r0, r4
 8007336:	f000 f99f 	bl	8007678 <_Bfree>
 800733a:	2f00      	cmp	r7, #0
 800733c:	f43f aea4 	beq.w	8007088 <_dtoa_r+0x6a0>
 8007340:	f1b8 0f00 	cmp.w	r8, #0
 8007344:	d005      	beq.n	8007352 <_dtoa_r+0x96a>
 8007346:	45b8      	cmp	r8, r7
 8007348:	d003      	beq.n	8007352 <_dtoa_r+0x96a>
 800734a:	4641      	mov	r1, r8
 800734c:	4620      	mov	r0, r4
 800734e:	f000 f993 	bl	8007678 <_Bfree>
 8007352:	4639      	mov	r1, r7
 8007354:	4620      	mov	r0, r4
 8007356:	f000 f98f 	bl	8007678 <_Bfree>
 800735a:	e695      	b.n	8007088 <_dtoa_r+0x6a0>
 800735c:	2600      	movs	r6, #0
 800735e:	4637      	mov	r7, r6
 8007360:	e7e1      	b.n	8007326 <_dtoa_r+0x93e>
 8007362:	9700      	str	r7, [sp, #0]
 8007364:	4637      	mov	r7, r6
 8007366:	e599      	b.n	8006e9c <_dtoa_r+0x4b4>
 8007368:	40240000 	.word	0x40240000
 800736c:	9b08      	ldr	r3, [sp, #32]
 800736e:	2b00      	cmp	r3, #0
 8007370:	f000 80ca 	beq.w	8007508 <_dtoa_r+0xb20>
 8007374:	9b03      	ldr	r3, [sp, #12]
 8007376:	9302      	str	r3, [sp, #8]
 8007378:	2d00      	cmp	r5, #0
 800737a:	dd05      	ble.n	8007388 <_dtoa_r+0x9a0>
 800737c:	4639      	mov	r1, r7
 800737e:	462a      	mov	r2, r5
 8007380:	4620      	mov	r0, r4
 8007382:	f000 fb4b 	bl	8007a1c <__lshift>
 8007386:	4607      	mov	r7, r0
 8007388:	f1b8 0f00 	cmp.w	r8, #0
 800738c:	d05b      	beq.n	8007446 <_dtoa_r+0xa5e>
 800738e:	6879      	ldr	r1, [r7, #4]
 8007390:	4620      	mov	r0, r4
 8007392:	f000 f931 	bl	80075f8 <_Balloc>
 8007396:	4605      	mov	r5, r0
 8007398:	b928      	cbnz	r0, 80073a6 <_dtoa_r+0x9be>
 800739a:	4b87      	ldr	r3, [pc, #540]	; (80075b8 <_dtoa_r+0xbd0>)
 800739c:	4602      	mov	r2, r0
 800739e:	f240 21ea 	movw	r1, #746	; 0x2ea
 80073a2:	f7ff bb3b 	b.w	8006a1c <_dtoa_r+0x34>
 80073a6:	693a      	ldr	r2, [r7, #16]
 80073a8:	3202      	adds	r2, #2
 80073aa:	0092      	lsls	r2, r2, #2
 80073ac:	f107 010c 	add.w	r1, r7, #12
 80073b0:	300c      	adds	r0, #12
 80073b2:	f000 f913 	bl	80075dc <memcpy>
 80073b6:	2201      	movs	r2, #1
 80073b8:	4629      	mov	r1, r5
 80073ba:	4620      	mov	r0, r4
 80073bc:	f000 fb2e 	bl	8007a1c <__lshift>
 80073c0:	9b01      	ldr	r3, [sp, #4]
 80073c2:	f103 0901 	add.w	r9, r3, #1
 80073c6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80073ca:	4413      	add	r3, r2
 80073cc:	9305      	str	r3, [sp, #20]
 80073ce:	f00a 0301 	and.w	r3, sl, #1
 80073d2:	46b8      	mov	r8, r7
 80073d4:	9304      	str	r3, [sp, #16]
 80073d6:	4607      	mov	r7, r0
 80073d8:	4631      	mov	r1, r6
 80073da:	ee18 0a10 	vmov	r0, s16
 80073de:	f7ff fa75 	bl	80068cc <quorem>
 80073e2:	4641      	mov	r1, r8
 80073e4:	9002      	str	r0, [sp, #8]
 80073e6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80073ea:	ee18 0a10 	vmov	r0, s16
 80073ee:	f000 fb85 	bl	8007afc <__mcmp>
 80073f2:	463a      	mov	r2, r7
 80073f4:	9003      	str	r0, [sp, #12]
 80073f6:	4631      	mov	r1, r6
 80073f8:	4620      	mov	r0, r4
 80073fa:	f000 fb9b 	bl	8007b34 <__mdiff>
 80073fe:	68c2      	ldr	r2, [r0, #12]
 8007400:	f109 3bff 	add.w	fp, r9, #4294967295
 8007404:	4605      	mov	r5, r0
 8007406:	bb02      	cbnz	r2, 800744a <_dtoa_r+0xa62>
 8007408:	4601      	mov	r1, r0
 800740a:	ee18 0a10 	vmov	r0, s16
 800740e:	f000 fb75 	bl	8007afc <__mcmp>
 8007412:	4602      	mov	r2, r0
 8007414:	4629      	mov	r1, r5
 8007416:	4620      	mov	r0, r4
 8007418:	9207      	str	r2, [sp, #28]
 800741a:	f000 f92d 	bl	8007678 <_Bfree>
 800741e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8007422:	ea43 0102 	orr.w	r1, r3, r2
 8007426:	9b04      	ldr	r3, [sp, #16]
 8007428:	430b      	orrs	r3, r1
 800742a:	464d      	mov	r5, r9
 800742c:	d10f      	bne.n	800744e <_dtoa_r+0xa66>
 800742e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007432:	d02a      	beq.n	800748a <_dtoa_r+0xaa2>
 8007434:	9b03      	ldr	r3, [sp, #12]
 8007436:	2b00      	cmp	r3, #0
 8007438:	dd02      	ble.n	8007440 <_dtoa_r+0xa58>
 800743a:	9b02      	ldr	r3, [sp, #8]
 800743c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8007440:	f88b a000 	strb.w	sl, [fp]
 8007444:	e775      	b.n	8007332 <_dtoa_r+0x94a>
 8007446:	4638      	mov	r0, r7
 8007448:	e7ba      	b.n	80073c0 <_dtoa_r+0x9d8>
 800744a:	2201      	movs	r2, #1
 800744c:	e7e2      	b.n	8007414 <_dtoa_r+0xa2c>
 800744e:	9b03      	ldr	r3, [sp, #12]
 8007450:	2b00      	cmp	r3, #0
 8007452:	db04      	blt.n	800745e <_dtoa_r+0xa76>
 8007454:	9906      	ldr	r1, [sp, #24]
 8007456:	430b      	orrs	r3, r1
 8007458:	9904      	ldr	r1, [sp, #16]
 800745a:	430b      	orrs	r3, r1
 800745c:	d122      	bne.n	80074a4 <_dtoa_r+0xabc>
 800745e:	2a00      	cmp	r2, #0
 8007460:	ddee      	ble.n	8007440 <_dtoa_r+0xa58>
 8007462:	ee18 1a10 	vmov	r1, s16
 8007466:	2201      	movs	r2, #1
 8007468:	4620      	mov	r0, r4
 800746a:	f000 fad7 	bl	8007a1c <__lshift>
 800746e:	4631      	mov	r1, r6
 8007470:	ee08 0a10 	vmov	s16, r0
 8007474:	f000 fb42 	bl	8007afc <__mcmp>
 8007478:	2800      	cmp	r0, #0
 800747a:	dc03      	bgt.n	8007484 <_dtoa_r+0xa9c>
 800747c:	d1e0      	bne.n	8007440 <_dtoa_r+0xa58>
 800747e:	f01a 0f01 	tst.w	sl, #1
 8007482:	d0dd      	beq.n	8007440 <_dtoa_r+0xa58>
 8007484:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007488:	d1d7      	bne.n	800743a <_dtoa_r+0xa52>
 800748a:	2339      	movs	r3, #57	; 0x39
 800748c:	f88b 3000 	strb.w	r3, [fp]
 8007490:	462b      	mov	r3, r5
 8007492:	461d      	mov	r5, r3
 8007494:	3b01      	subs	r3, #1
 8007496:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800749a:	2a39      	cmp	r2, #57	; 0x39
 800749c:	d071      	beq.n	8007582 <_dtoa_r+0xb9a>
 800749e:	3201      	adds	r2, #1
 80074a0:	701a      	strb	r2, [r3, #0]
 80074a2:	e746      	b.n	8007332 <_dtoa_r+0x94a>
 80074a4:	2a00      	cmp	r2, #0
 80074a6:	dd07      	ble.n	80074b8 <_dtoa_r+0xad0>
 80074a8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80074ac:	d0ed      	beq.n	800748a <_dtoa_r+0xaa2>
 80074ae:	f10a 0301 	add.w	r3, sl, #1
 80074b2:	f88b 3000 	strb.w	r3, [fp]
 80074b6:	e73c      	b.n	8007332 <_dtoa_r+0x94a>
 80074b8:	9b05      	ldr	r3, [sp, #20]
 80074ba:	f809 ac01 	strb.w	sl, [r9, #-1]
 80074be:	4599      	cmp	r9, r3
 80074c0:	d047      	beq.n	8007552 <_dtoa_r+0xb6a>
 80074c2:	ee18 1a10 	vmov	r1, s16
 80074c6:	2300      	movs	r3, #0
 80074c8:	220a      	movs	r2, #10
 80074ca:	4620      	mov	r0, r4
 80074cc:	f000 f8f6 	bl	80076bc <__multadd>
 80074d0:	45b8      	cmp	r8, r7
 80074d2:	ee08 0a10 	vmov	s16, r0
 80074d6:	f04f 0300 	mov.w	r3, #0
 80074da:	f04f 020a 	mov.w	r2, #10
 80074de:	4641      	mov	r1, r8
 80074e0:	4620      	mov	r0, r4
 80074e2:	d106      	bne.n	80074f2 <_dtoa_r+0xb0a>
 80074e4:	f000 f8ea 	bl	80076bc <__multadd>
 80074e8:	4680      	mov	r8, r0
 80074ea:	4607      	mov	r7, r0
 80074ec:	f109 0901 	add.w	r9, r9, #1
 80074f0:	e772      	b.n	80073d8 <_dtoa_r+0x9f0>
 80074f2:	f000 f8e3 	bl	80076bc <__multadd>
 80074f6:	4639      	mov	r1, r7
 80074f8:	4680      	mov	r8, r0
 80074fa:	2300      	movs	r3, #0
 80074fc:	220a      	movs	r2, #10
 80074fe:	4620      	mov	r0, r4
 8007500:	f000 f8dc 	bl	80076bc <__multadd>
 8007504:	4607      	mov	r7, r0
 8007506:	e7f1      	b.n	80074ec <_dtoa_r+0xb04>
 8007508:	9b03      	ldr	r3, [sp, #12]
 800750a:	9302      	str	r3, [sp, #8]
 800750c:	9d01      	ldr	r5, [sp, #4]
 800750e:	ee18 0a10 	vmov	r0, s16
 8007512:	4631      	mov	r1, r6
 8007514:	f7ff f9da 	bl	80068cc <quorem>
 8007518:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800751c:	9b01      	ldr	r3, [sp, #4]
 800751e:	f805 ab01 	strb.w	sl, [r5], #1
 8007522:	1aea      	subs	r2, r5, r3
 8007524:	9b02      	ldr	r3, [sp, #8]
 8007526:	4293      	cmp	r3, r2
 8007528:	dd09      	ble.n	800753e <_dtoa_r+0xb56>
 800752a:	ee18 1a10 	vmov	r1, s16
 800752e:	2300      	movs	r3, #0
 8007530:	220a      	movs	r2, #10
 8007532:	4620      	mov	r0, r4
 8007534:	f000 f8c2 	bl	80076bc <__multadd>
 8007538:	ee08 0a10 	vmov	s16, r0
 800753c:	e7e7      	b.n	800750e <_dtoa_r+0xb26>
 800753e:	9b02      	ldr	r3, [sp, #8]
 8007540:	2b00      	cmp	r3, #0
 8007542:	bfc8      	it	gt
 8007544:	461d      	movgt	r5, r3
 8007546:	9b01      	ldr	r3, [sp, #4]
 8007548:	bfd8      	it	le
 800754a:	2501      	movle	r5, #1
 800754c:	441d      	add	r5, r3
 800754e:	f04f 0800 	mov.w	r8, #0
 8007552:	ee18 1a10 	vmov	r1, s16
 8007556:	2201      	movs	r2, #1
 8007558:	4620      	mov	r0, r4
 800755a:	f000 fa5f 	bl	8007a1c <__lshift>
 800755e:	4631      	mov	r1, r6
 8007560:	ee08 0a10 	vmov	s16, r0
 8007564:	f000 faca 	bl	8007afc <__mcmp>
 8007568:	2800      	cmp	r0, #0
 800756a:	dc91      	bgt.n	8007490 <_dtoa_r+0xaa8>
 800756c:	d102      	bne.n	8007574 <_dtoa_r+0xb8c>
 800756e:	f01a 0f01 	tst.w	sl, #1
 8007572:	d18d      	bne.n	8007490 <_dtoa_r+0xaa8>
 8007574:	462b      	mov	r3, r5
 8007576:	461d      	mov	r5, r3
 8007578:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800757c:	2a30      	cmp	r2, #48	; 0x30
 800757e:	d0fa      	beq.n	8007576 <_dtoa_r+0xb8e>
 8007580:	e6d7      	b.n	8007332 <_dtoa_r+0x94a>
 8007582:	9a01      	ldr	r2, [sp, #4]
 8007584:	429a      	cmp	r2, r3
 8007586:	d184      	bne.n	8007492 <_dtoa_r+0xaaa>
 8007588:	9b00      	ldr	r3, [sp, #0]
 800758a:	3301      	adds	r3, #1
 800758c:	9300      	str	r3, [sp, #0]
 800758e:	2331      	movs	r3, #49	; 0x31
 8007590:	7013      	strb	r3, [r2, #0]
 8007592:	e6ce      	b.n	8007332 <_dtoa_r+0x94a>
 8007594:	4b09      	ldr	r3, [pc, #36]	; (80075bc <_dtoa_r+0xbd4>)
 8007596:	f7ff ba95 	b.w	8006ac4 <_dtoa_r+0xdc>
 800759a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800759c:	2b00      	cmp	r3, #0
 800759e:	f47f aa6e 	bne.w	8006a7e <_dtoa_r+0x96>
 80075a2:	4b07      	ldr	r3, [pc, #28]	; (80075c0 <_dtoa_r+0xbd8>)
 80075a4:	f7ff ba8e 	b.w	8006ac4 <_dtoa_r+0xdc>
 80075a8:	9b02      	ldr	r3, [sp, #8]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	dcae      	bgt.n	800750c <_dtoa_r+0xb24>
 80075ae:	9b06      	ldr	r3, [sp, #24]
 80075b0:	2b02      	cmp	r3, #2
 80075b2:	f73f aea8 	bgt.w	8007306 <_dtoa_r+0x91e>
 80075b6:	e7a9      	b.n	800750c <_dtoa_r+0xb24>
 80075b8:	08008b2f 	.word	0x08008b2f
 80075bc:	08008a8c 	.word	0x08008a8c
 80075c0:	08008ab0 	.word	0x08008ab0

080075c4 <_localeconv_r>:
 80075c4:	4800      	ldr	r0, [pc, #0]	; (80075c8 <_localeconv_r+0x4>)
 80075c6:	4770      	bx	lr
 80075c8:	200001d0 	.word	0x200001d0

080075cc <malloc>:
 80075cc:	4b02      	ldr	r3, [pc, #8]	; (80075d8 <malloc+0xc>)
 80075ce:	4601      	mov	r1, r0
 80075d0:	6818      	ldr	r0, [r3, #0]
 80075d2:	f000 bc17 	b.w	8007e04 <_malloc_r>
 80075d6:	bf00      	nop
 80075d8:	2000007c 	.word	0x2000007c

080075dc <memcpy>:
 80075dc:	440a      	add	r2, r1
 80075de:	4291      	cmp	r1, r2
 80075e0:	f100 33ff 	add.w	r3, r0, #4294967295
 80075e4:	d100      	bne.n	80075e8 <memcpy+0xc>
 80075e6:	4770      	bx	lr
 80075e8:	b510      	push	{r4, lr}
 80075ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 80075ee:	f803 4f01 	strb.w	r4, [r3, #1]!
 80075f2:	4291      	cmp	r1, r2
 80075f4:	d1f9      	bne.n	80075ea <memcpy+0xe>
 80075f6:	bd10      	pop	{r4, pc}

080075f8 <_Balloc>:
 80075f8:	b570      	push	{r4, r5, r6, lr}
 80075fa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80075fc:	4604      	mov	r4, r0
 80075fe:	460d      	mov	r5, r1
 8007600:	b976      	cbnz	r6, 8007620 <_Balloc+0x28>
 8007602:	2010      	movs	r0, #16
 8007604:	f7ff ffe2 	bl	80075cc <malloc>
 8007608:	4602      	mov	r2, r0
 800760a:	6260      	str	r0, [r4, #36]	; 0x24
 800760c:	b920      	cbnz	r0, 8007618 <_Balloc+0x20>
 800760e:	4b18      	ldr	r3, [pc, #96]	; (8007670 <_Balloc+0x78>)
 8007610:	4818      	ldr	r0, [pc, #96]	; (8007674 <_Balloc+0x7c>)
 8007612:	2166      	movs	r1, #102	; 0x66
 8007614:	f000 fc7a 	bl	8007f0c <__assert_func>
 8007618:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800761c:	6006      	str	r6, [r0, #0]
 800761e:	60c6      	str	r6, [r0, #12]
 8007620:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007622:	68f3      	ldr	r3, [r6, #12]
 8007624:	b183      	cbz	r3, 8007648 <_Balloc+0x50>
 8007626:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007628:	68db      	ldr	r3, [r3, #12]
 800762a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800762e:	b9b8      	cbnz	r0, 8007660 <_Balloc+0x68>
 8007630:	2101      	movs	r1, #1
 8007632:	fa01 f605 	lsl.w	r6, r1, r5
 8007636:	1d72      	adds	r2, r6, #5
 8007638:	0092      	lsls	r2, r2, #2
 800763a:	4620      	mov	r0, r4
 800763c:	f000 fb60 	bl	8007d00 <_calloc_r>
 8007640:	b160      	cbz	r0, 800765c <_Balloc+0x64>
 8007642:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007646:	e00e      	b.n	8007666 <_Balloc+0x6e>
 8007648:	2221      	movs	r2, #33	; 0x21
 800764a:	2104      	movs	r1, #4
 800764c:	4620      	mov	r0, r4
 800764e:	f000 fb57 	bl	8007d00 <_calloc_r>
 8007652:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007654:	60f0      	str	r0, [r6, #12]
 8007656:	68db      	ldr	r3, [r3, #12]
 8007658:	2b00      	cmp	r3, #0
 800765a:	d1e4      	bne.n	8007626 <_Balloc+0x2e>
 800765c:	2000      	movs	r0, #0
 800765e:	bd70      	pop	{r4, r5, r6, pc}
 8007660:	6802      	ldr	r2, [r0, #0]
 8007662:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007666:	2300      	movs	r3, #0
 8007668:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800766c:	e7f7      	b.n	800765e <_Balloc+0x66>
 800766e:	bf00      	nop
 8007670:	08008abd 	.word	0x08008abd
 8007674:	08008b40 	.word	0x08008b40

08007678 <_Bfree>:
 8007678:	b570      	push	{r4, r5, r6, lr}
 800767a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800767c:	4605      	mov	r5, r0
 800767e:	460c      	mov	r4, r1
 8007680:	b976      	cbnz	r6, 80076a0 <_Bfree+0x28>
 8007682:	2010      	movs	r0, #16
 8007684:	f7ff ffa2 	bl	80075cc <malloc>
 8007688:	4602      	mov	r2, r0
 800768a:	6268      	str	r0, [r5, #36]	; 0x24
 800768c:	b920      	cbnz	r0, 8007698 <_Bfree+0x20>
 800768e:	4b09      	ldr	r3, [pc, #36]	; (80076b4 <_Bfree+0x3c>)
 8007690:	4809      	ldr	r0, [pc, #36]	; (80076b8 <_Bfree+0x40>)
 8007692:	218a      	movs	r1, #138	; 0x8a
 8007694:	f000 fc3a 	bl	8007f0c <__assert_func>
 8007698:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800769c:	6006      	str	r6, [r0, #0]
 800769e:	60c6      	str	r6, [r0, #12]
 80076a0:	b13c      	cbz	r4, 80076b2 <_Bfree+0x3a>
 80076a2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80076a4:	6862      	ldr	r2, [r4, #4]
 80076a6:	68db      	ldr	r3, [r3, #12]
 80076a8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80076ac:	6021      	str	r1, [r4, #0]
 80076ae:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80076b2:	bd70      	pop	{r4, r5, r6, pc}
 80076b4:	08008abd 	.word	0x08008abd
 80076b8:	08008b40 	.word	0x08008b40

080076bc <__multadd>:
 80076bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80076c0:	690d      	ldr	r5, [r1, #16]
 80076c2:	4607      	mov	r7, r0
 80076c4:	460c      	mov	r4, r1
 80076c6:	461e      	mov	r6, r3
 80076c8:	f101 0c14 	add.w	ip, r1, #20
 80076cc:	2000      	movs	r0, #0
 80076ce:	f8dc 3000 	ldr.w	r3, [ip]
 80076d2:	b299      	uxth	r1, r3
 80076d4:	fb02 6101 	mla	r1, r2, r1, r6
 80076d8:	0c1e      	lsrs	r6, r3, #16
 80076da:	0c0b      	lsrs	r3, r1, #16
 80076dc:	fb02 3306 	mla	r3, r2, r6, r3
 80076e0:	b289      	uxth	r1, r1
 80076e2:	3001      	adds	r0, #1
 80076e4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80076e8:	4285      	cmp	r5, r0
 80076ea:	f84c 1b04 	str.w	r1, [ip], #4
 80076ee:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80076f2:	dcec      	bgt.n	80076ce <__multadd+0x12>
 80076f4:	b30e      	cbz	r6, 800773a <__multadd+0x7e>
 80076f6:	68a3      	ldr	r3, [r4, #8]
 80076f8:	42ab      	cmp	r3, r5
 80076fa:	dc19      	bgt.n	8007730 <__multadd+0x74>
 80076fc:	6861      	ldr	r1, [r4, #4]
 80076fe:	4638      	mov	r0, r7
 8007700:	3101      	adds	r1, #1
 8007702:	f7ff ff79 	bl	80075f8 <_Balloc>
 8007706:	4680      	mov	r8, r0
 8007708:	b928      	cbnz	r0, 8007716 <__multadd+0x5a>
 800770a:	4602      	mov	r2, r0
 800770c:	4b0c      	ldr	r3, [pc, #48]	; (8007740 <__multadd+0x84>)
 800770e:	480d      	ldr	r0, [pc, #52]	; (8007744 <__multadd+0x88>)
 8007710:	21b5      	movs	r1, #181	; 0xb5
 8007712:	f000 fbfb 	bl	8007f0c <__assert_func>
 8007716:	6922      	ldr	r2, [r4, #16]
 8007718:	3202      	adds	r2, #2
 800771a:	f104 010c 	add.w	r1, r4, #12
 800771e:	0092      	lsls	r2, r2, #2
 8007720:	300c      	adds	r0, #12
 8007722:	f7ff ff5b 	bl	80075dc <memcpy>
 8007726:	4621      	mov	r1, r4
 8007728:	4638      	mov	r0, r7
 800772a:	f7ff ffa5 	bl	8007678 <_Bfree>
 800772e:	4644      	mov	r4, r8
 8007730:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007734:	3501      	adds	r5, #1
 8007736:	615e      	str	r6, [r3, #20]
 8007738:	6125      	str	r5, [r4, #16]
 800773a:	4620      	mov	r0, r4
 800773c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007740:	08008b2f 	.word	0x08008b2f
 8007744:	08008b40 	.word	0x08008b40

08007748 <__hi0bits>:
 8007748:	0c03      	lsrs	r3, r0, #16
 800774a:	041b      	lsls	r3, r3, #16
 800774c:	b9d3      	cbnz	r3, 8007784 <__hi0bits+0x3c>
 800774e:	0400      	lsls	r0, r0, #16
 8007750:	2310      	movs	r3, #16
 8007752:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007756:	bf04      	itt	eq
 8007758:	0200      	lsleq	r0, r0, #8
 800775a:	3308      	addeq	r3, #8
 800775c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007760:	bf04      	itt	eq
 8007762:	0100      	lsleq	r0, r0, #4
 8007764:	3304      	addeq	r3, #4
 8007766:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800776a:	bf04      	itt	eq
 800776c:	0080      	lsleq	r0, r0, #2
 800776e:	3302      	addeq	r3, #2
 8007770:	2800      	cmp	r0, #0
 8007772:	db05      	blt.n	8007780 <__hi0bits+0x38>
 8007774:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007778:	f103 0301 	add.w	r3, r3, #1
 800777c:	bf08      	it	eq
 800777e:	2320      	moveq	r3, #32
 8007780:	4618      	mov	r0, r3
 8007782:	4770      	bx	lr
 8007784:	2300      	movs	r3, #0
 8007786:	e7e4      	b.n	8007752 <__hi0bits+0xa>

08007788 <__lo0bits>:
 8007788:	6803      	ldr	r3, [r0, #0]
 800778a:	f013 0207 	ands.w	r2, r3, #7
 800778e:	4601      	mov	r1, r0
 8007790:	d00b      	beq.n	80077aa <__lo0bits+0x22>
 8007792:	07da      	lsls	r2, r3, #31
 8007794:	d423      	bmi.n	80077de <__lo0bits+0x56>
 8007796:	0798      	lsls	r0, r3, #30
 8007798:	bf49      	itett	mi
 800779a:	085b      	lsrmi	r3, r3, #1
 800779c:	089b      	lsrpl	r3, r3, #2
 800779e:	2001      	movmi	r0, #1
 80077a0:	600b      	strmi	r3, [r1, #0]
 80077a2:	bf5c      	itt	pl
 80077a4:	600b      	strpl	r3, [r1, #0]
 80077a6:	2002      	movpl	r0, #2
 80077a8:	4770      	bx	lr
 80077aa:	b298      	uxth	r0, r3
 80077ac:	b9a8      	cbnz	r0, 80077da <__lo0bits+0x52>
 80077ae:	0c1b      	lsrs	r3, r3, #16
 80077b0:	2010      	movs	r0, #16
 80077b2:	b2da      	uxtb	r2, r3
 80077b4:	b90a      	cbnz	r2, 80077ba <__lo0bits+0x32>
 80077b6:	3008      	adds	r0, #8
 80077b8:	0a1b      	lsrs	r3, r3, #8
 80077ba:	071a      	lsls	r2, r3, #28
 80077bc:	bf04      	itt	eq
 80077be:	091b      	lsreq	r3, r3, #4
 80077c0:	3004      	addeq	r0, #4
 80077c2:	079a      	lsls	r2, r3, #30
 80077c4:	bf04      	itt	eq
 80077c6:	089b      	lsreq	r3, r3, #2
 80077c8:	3002      	addeq	r0, #2
 80077ca:	07da      	lsls	r2, r3, #31
 80077cc:	d403      	bmi.n	80077d6 <__lo0bits+0x4e>
 80077ce:	085b      	lsrs	r3, r3, #1
 80077d0:	f100 0001 	add.w	r0, r0, #1
 80077d4:	d005      	beq.n	80077e2 <__lo0bits+0x5a>
 80077d6:	600b      	str	r3, [r1, #0]
 80077d8:	4770      	bx	lr
 80077da:	4610      	mov	r0, r2
 80077dc:	e7e9      	b.n	80077b2 <__lo0bits+0x2a>
 80077de:	2000      	movs	r0, #0
 80077e0:	4770      	bx	lr
 80077e2:	2020      	movs	r0, #32
 80077e4:	4770      	bx	lr
	...

080077e8 <__i2b>:
 80077e8:	b510      	push	{r4, lr}
 80077ea:	460c      	mov	r4, r1
 80077ec:	2101      	movs	r1, #1
 80077ee:	f7ff ff03 	bl	80075f8 <_Balloc>
 80077f2:	4602      	mov	r2, r0
 80077f4:	b928      	cbnz	r0, 8007802 <__i2b+0x1a>
 80077f6:	4b05      	ldr	r3, [pc, #20]	; (800780c <__i2b+0x24>)
 80077f8:	4805      	ldr	r0, [pc, #20]	; (8007810 <__i2b+0x28>)
 80077fa:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80077fe:	f000 fb85 	bl	8007f0c <__assert_func>
 8007802:	2301      	movs	r3, #1
 8007804:	6144      	str	r4, [r0, #20]
 8007806:	6103      	str	r3, [r0, #16]
 8007808:	bd10      	pop	{r4, pc}
 800780a:	bf00      	nop
 800780c:	08008b2f 	.word	0x08008b2f
 8007810:	08008b40 	.word	0x08008b40

08007814 <__multiply>:
 8007814:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007818:	4691      	mov	r9, r2
 800781a:	690a      	ldr	r2, [r1, #16]
 800781c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007820:	429a      	cmp	r2, r3
 8007822:	bfb8      	it	lt
 8007824:	460b      	movlt	r3, r1
 8007826:	460c      	mov	r4, r1
 8007828:	bfbc      	itt	lt
 800782a:	464c      	movlt	r4, r9
 800782c:	4699      	movlt	r9, r3
 800782e:	6927      	ldr	r7, [r4, #16]
 8007830:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007834:	68a3      	ldr	r3, [r4, #8]
 8007836:	6861      	ldr	r1, [r4, #4]
 8007838:	eb07 060a 	add.w	r6, r7, sl
 800783c:	42b3      	cmp	r3, r6
 800783e:	b085      	sub	sp, #20
 8007840:	bfb8      	it	lt
 8007842:	3101      	addlt	r1, #1
 8007844:	f7ff fed8 	bl	80075f8 <_Balloc>
 8007848:	b930      	cbnz	r0, 8007858 <__multiply+0x44>
 800784a:	4602      	mov	r2, r0
 800784c:	4b44      	ldr	r3, [pc, #272]	; (8007960 <__multiply+0x14c>)
 800784e:	4845      	ldr	r0, [pc, #276]	; (8007964 <__multiply+0x150>)
 8007850:	f240 115d 	movw	r1, #349	; 0x15d
 8007854:	f000 fb5a 	bl	8007f0c <__assert_func>
 8007858:	f100 0514 	add.w	r5, r0, #20
 800785c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007860:	462b      	mov	r3, r5
 8007862:	2200      	movs	r2, #0
 8007864:	4543      	cmp	r3, r8
 8007866:	d321      	bcc.n	80078ac <__multiply+0x98>
 8007868:	f104 0314 	add.w	r3, r4, #20
 800786c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007870:	f109 0314 	add.w	r3, r9, #20
 8007874:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007878:	9202      	str	r2, [sp, #8]
 800787a:	1b3a      	subs	r2, r7, r4
 800787c:	3a15      	subs	r2, #21
 800787e:	f022 0203 	bic.w	r2, r2, #3
 8007882:	3204      	adds	r2, #4
 8007884:	f104 0115 	add.w	r1, r4, #21
 8007888:	428f      	cmp	r7, r1
 800788a:	bf38      	it	cc
 800788c:	2204      	movcc	r2, #4
 800788e:	9201      	str	r2, [sp, #4]
 8007890:	9a02      	ldr	r2, [sp, #8]
 8007892:	9303      	str	r3, [sp, #12]
 8007894:	429a      	cmp	r2, r3
 8007896:	d80c      	bhi.n	80078b2 <__multiply+0x9e>
 8007898:	2e00      	cmp	r6, #0
 800789a:	dd03      	ble.n	80078a4 <__multiply+0x90>
 800789c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d05a      	beq.n	800795a <__multiply+0x146>
 80078a4:	6106      	str	r6, [r0, #16]
 80078a6:	b005      	add	sp, #20
 80078a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078ac:	f843 2b04 	str.w	r2, [r3], #4
 80078b0:	e7d8      	b.n	8007864 <__multiply+0x50>
 80078b2:	f8b3 a000 	ldrh.w	sl, [r3]
 80078b6:	f1ba 0f00 	cmp.w	sl, #0
 80078ba:	d024      	beq.n	8007906 <__multiply+0xf2>
 80078bc:	f104 0e14 	add.w	lr, r4, #20
 80078c0:	46a9      	mov	r9, r5
 80078c2:	f04f 0c00 	mov.w	ip, #0
 80078c6:	f85e 2b04 	ldr.w	r2, [lr], #4
 80078ca:	f8d9 1000 	ldr.w	r1, [r9]
 80078ce:	fa1f fb82 	uxth.w	fp, r2
 80078d2:	b289      	uxth	r1, r1
 80078d4:	fb0a 110b 	mla	r1, sl, fp, r1
 80078d8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80078dc:	f8d9 2000 	ldr.w	r2, [r9]
 80078e0:	4461      	add	r1, ip
 80078e2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80078e6:	fb0a c20b 	mla	r2, sl, fp, ip
 80078ea:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80078ee:	b289      	uxth	r1, r1
 80078f0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80078f4:	4577      	cmp	r7, lr
 80078f6:	f849 1b04 	str.w	r1, [r9], #4
 80078fa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80078fe:	d8e2      	bhi.n	80078c6 <__multiply+0xb2>
 8007900:	9a01      	ldr	r2, [sp, #4]
 8007902:	f845 c002 	str.w	ip, [r5, r2]
 8007906:	9a03      	ldr	r2, [sp, #12]
 8007908:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800790c:	3304      	adds	r3, #4
 800790e:	f1b9 0f00 	cmp.w	r9, #0
 8007912:	d020      	beq.n	8007956 <__multiply+0x142>
 8007914:	6829      	ldr	r1, [r5, #0]
 8007916:	f104 0c14 	add.w	ip, r4, #20
 800791a:	46ae      	mov	lr, r5
 800791c:	f04f 0a00 	mov.w	sl, #0
 8007920:	f8bc b000 	ldrh.w	fp, [ip]
 8007924:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007928:	fb09 220b 	mla	r2, r9, fp, r2
 800792c:	4492      	add	sl, r2
 800792e:	b289      	uxth	r1, r1
 8007930:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8007934:	f84e 1b04 	str.w	r1, [lr], #4
 8007938:	f85c 2b04 	ldr.w	r2, [ip], #4
 800793c:	f8be 1000 	ldrh.w	r1, [lr]
 8007940:	0c12      	lsrs	r2, r2, #16
 8007942:	fb09 1102 	mla	r1, r9, r2, r1
 8007946:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800794a:	4567      	cmp	r7, ip
 800794c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007950:	d8e6      	bhi.n	8007920 <__multiply+0x10c>
 8007952:	9a01      	ldr	r2, [sp, #4]
 8007954:	50a9      	str	r1, [r5, r2]
 8007956:	3504      	adds	r5, #4
 8007958:	e79a      	b.n	8007890 <__multiply+0x7c>
 800795a:	3e01      	subs	r6, #1
 800795c:	e79c      	b.n	8007898 <__multiply+0x84>
 800795e:	bf00      	nop
 8007960:	08008b2f 	.word	0x08008b2f
 8007964:	08008b40 	.word	0x08008b40

08007968 <__pow5mult>:
 8007968:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800796c:	4615      	mov	r5, r2
 800796e:	f012 0203 	ands.w	r2, r2, #3
 8007972:	4606      	mov	r6, r0
 8007974:	460f      	mov	r7, r1
 8007976:	d007      	beq.n	8007988 <__pow5mult+0x20>
 8007978:	4c25      	ldr	r4, [pc, #148]	; (8007a10 <__pow5mult+0xa8>)
 800797a:	3a01      	subs	r2, #1
 800797c:	2300      	movs	r3, #0
 800797e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007982:	f7ff fe9b 	bl	80076bc <__multadd>
 8007986:	4607      	mov	r7, r0
 8007988:	10ad      	asrs	r5, r5, #2
 800798a:	d03d      	beq.n	8007a08 <__pow5mult+0xa0>
 800798c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800798e:	b97c      	cbnz	r4, 80079b0 <__pow5mult+0x48>
 8007990:	2010      	movs	r0, #16
 8007992:	f7ff fe1b 	bl	80075cc <malloc>
 8007996:	4602      	mov	r2, r0
 8007998:	6270      	str	r0, [r6, #36]	; 0x24
 800799a:	b928      	cbnz	r0, 80079a8 <__pow5mult+0x40>
 800799c:	4b1d      	ldr	r3, [pc, #116]	; (8007a14 <__pow5mult+0xac>)
 800799e:	481e      	ldr	r0, [pc, #120]	; (8007a18 <__pow5mult+0xb0>)
 80079a0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80079a4:	f000 fab2 	bl	8007f0c <__assert_func>
 80079a8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80079ac:	6004      	str	r4, [r0, #0]
 80079ae:	60c4      	str	r4, [r0, #12]
 80079b0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80079b4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80079b8:	b94c      	cbnz	r4, 80079ce <__pow5mult+0x66>
 80079ba:	f240 2171 	movw	r1, #625	; 0x271
 80079be:	4630      	mov	r0, r6
 80079c0:	f7ff ff12 	bl	80077e8 <__i2b>
 80079c4:	2300      	movs	r3, #0
 80079c6:	f8c8 0008 	str.w	r0, [r8, #8]
 80079ca:	4604      	mov	r4, r0
 80079cc:	6003      	str	r3, [r0, #0]
 80079ce:	f04f 0900 	mov.w	r9, #0
 80079d2:	07eb      	lsls	r3, r5, #31
 80079d4:	d50a      	bpl.n	80079ec <__pow5mult+0x84>
 80079d6:	4639      	mov	r1, r7
 80079d8:	4622      	mov	r2, r4
 80079da:	4630      	mov	r0, r6
 80079dc:	f7ff ff1a 	bl	8007814 <__multiply>
 80079e0:	4639      	mov	r1, r7
 80079e2:	4680      	mov	r8, r0
 80079e4:	4630      	mov	r0, r6
 80079e6:	f7ff fe47 	bl	8007678 <_Bfree>
 80079ea:	4647      	mov	r7, r8
 80079ec:	106d      	asrs	r5, r5, #1
 80079ee:	d00b      	beq.n	8007a08 <__pow5mult+0xa0>
 80079f0:	6820      	ldr	r0, [r4, #0]
 80079f2:	b938      	cbnz	r0, 8007a04 <__pow5mult+0x9c>
 80079f4:	4622      	mov	r2, r4
 80079f6:	4621      	mov	r1, r4
 80079f8:	4630      	mov	r0, r6
 80079fa:	f7ff ff0b 	bl	8007814 <__multiply>
 80079fe:	6020      	str	r0, [r4, #0]
 8007a00:	f8c0 9000 	str.w	r9, [r0]
 8007a04:	4604      	mov	r4, r0
 8007a06:	e7e4      	b.n	80079d2 <__pow5mult+0x6a>
 8007a08:	4638      	mov	r0, r7
 8007a0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007a0e:	bf00      	nop
 8007a10:	08008c90 	.word	0x08008c90
 8007a14:	08008abd 	.word	0x08008abd
 8007a18:	08008b40 	.word	0x08008b40

08007a1c <__lshift>:
 8007a1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a20:	460c      	mov	r4, r1
 8007a22:	6849      	ldr	r1, [r1, #4]
 8007a24:	6923      	ldr	r3, [r4, #16]
 8007a26:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007a2a:	68a3      	ldr	r3, [r4, #8]
 8007a2c:	4607      	mov	r7, r0
 8007a2e:	4691      	mov	r9, r2
 8007a30:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007a34:	f108 0601 	add.w	r6, r8, #1
 8007a38:	42b3      	cmp	r3, r6
 8007a3a:	db0b      	blt.n	8007a54 <__lshift+0x38>
 8007a3c:	4638      	mov	r0, r7
 8007a3e:	f7ff fddb 	bl	80075f8 <_Balloc>
 8007a42:	4605      	mov	r5, r0
 8007a44:	b948      	cbnz	r0, 8007a5a <__lshift+0x3e>
 8007a46:	4602      	mov	r2, r0
 8007a48:	4b2a      	ldr	r3, [pc, #168]	; (8007af4 <__lshift+0xd8>)
 8007a4a:	482b      	ldr	r0, [pc, #172]	; (8007af8 <__lshift+0xdc>)
 8007a4c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007a50:	f000 fa5c 	bl	8007f0c <__assert_func>
 8007a54:	3101      	adds	r1, #1
 8007a56:	005b      	lsls	r3, r3, #1
 8007a58:	e7ee      	b.n	8007a38 <__lshift+0x1c>
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	f100 0114 	add.w	r1, r0, #20
 8007a60:	f100 0210 	add.w	r2, r0, #16
 8007a64:	4618      	mov	r0, r3
 8007a66:	4553      	cmp	r3, sl
 8007a68:	db37      	blt.n	8007ada <__lshift+0xbe>
 8007a6a:	6920      	ldr	r0, [r4, #16]
 8007a6c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007a70:	f104 0314 	add.w	r3, r4, #20
 8007a74:	f019 091f 	ands.w	r9, r9, #31
 8007a78:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007a7c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007a80:	d02f      	beq.n	8007ae2 <__lshift+0xc6>
 8007a82:	f1c9 0e20 	rsb	lr, r9, #32
 8007a86:	468a      	mov	sl, r1
 8007a88:	f04f 0c00 	mov.w	ip, #0
 8007a8c:	681a      	ldr	r2, [r3, #0]
 8007a8e:	fa02 f209 	lsl.w	r2, r2, r9
 8007a92:	ea42 020c 	orr.w	r2, r2, ip
 8007a96:	f84a 2b04 	str.w	r2, [sl], #4
 8007a9a:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a9e:	4298      	cmp	r0, r3
 8007aa0:	fa22 fc0e 	lsr.w	ip, r2, lr
 8007aa4:	d8f2      	bhi.n	8007a8c <__lshift+0x70>
 8007aa6:	1b03      	subs	r3, r0, r4
 8007aa8:	3b15      	subs	r3, #21
 8007aaa:	f023 0303 	bic.w	r3, r3, #3
 8007aae:	3304      	adds	r3, #4
 8007ab0:	f104 0215 	add.w	r2, r4, #21
 8007ab4:	4290      	cmp	r0, r2
 8007ab6:	bf38      	it	cc
 8007ab8:	2304      	movcc	r3, #4
 8007aba:	f841 c003 	str.w	ip, [r1, r3]
 8007abe:	f1bc 0f00 	cmp.w	ip, #0
 8007ac2:	d001      	beq.n	8007ac8 <__lshift+0xac>
 8007ac4:	f108 0602 	add.w	r6, r8, #2
 8007ac8:	3e01      	subs	r6, #1
 8007aca:	4638      	mov	r0, r7
 8007acc:	612e      	str	r6, [r5, #16]
 8007ace:	4621      	mov	r1, r4
 8007ad0:	f7ff fdd2 	bl	8007678 <_Bfree>
 8007ad4:	4628      	mov	r0, r5
 8007ad6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ada:	f842 0f04 	str.w	r0, [r2, #4]!
 8007ade:	3301      	adds	r3, #1
 8007ae0:	e7c1      	b.n	8007a66 <__lshift+0x4a>
 8007ae2:	3904      	subs	r1, #4
 8007ae4:	f853 2b04 	ldr.w	r2, [r3], #4
 8007ae8:	f841 2f04 	str.w	r2, [r1, #4]!
 8007aec:	4298      	cmp	r0, r3
 8007aee:	d8f9      	bhi.n	8007ae4 <__lshift+0xc8>
 8007af0:	e7ea      	b.n	8007ac8 <__lshift+0xac>
 8007af2:	bf00      	nop
 8007af4:	08008b2f 	.word	0x08008b2f
 8007af8:	08008b40 	.word	0x08008b40

08007afc <__mcmp>:
 8007afc:	b530      	push	{r4, r5, lr}
 8007afe:	6902      	ldr	r2, [r0, #16]
 8007b00:	690c      	ldr	r4, [r1, #16]
 8007b02:	1b12      	subs	r2, r2, r4
 8007b04:	d10e      	bne.n	8007b24 <__mcmp+0x28>
 8007b06:	f100 0314 	add.w	r3, r0, #20
 8007b0a:	3114      	adds	r1, #20
 8007b0c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007b10:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007b14:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007b18:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007b1c:	42a5      	cmp	r5, r4
 8007b1e:	d003      	beq.n	8007b28 <__mcmp+0x2c>
 8007b20:	d305      	bcc.n	8007b2e <__mcmp+0x32>
 8007b22:	2201      	movs	r2, #1
 8007b24:	4610      	mov	r0, r2
 8007b26:	bd30      	pop	{r4, r5, pc}
 8007b28:	4283      	cmp	r3, r0
 8007b2a:	d3f3      	bcc.n	8007b14 <__mcmp+0x18>
 8007b2c:	e7fa      	b.n	8007b24 <__mcmp+0x28>
 8007b2e:	f04f 32ff 	mov.w	r2, #4294967295
 8007b32:	e7f7      	b.n	8007b24 <__mcmp+0x28>

08007b34 <__mdiff>:
 8007b34:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b38:	460c      	mov	r4, r1
 8007b3a:	4606      	mov	r6, r0
 8007b3c:	4611      	mov	r1, r2
 8007b3e:	4620      	mov	r0, r4
 8007b40:	4690      	mov	r8, r2
 8007b42:	f7ff ffdb 	bl	8007afc <__mcmp>
 8007b46:	1e05      	subs	r5, r0, #0
 8007b48:	d110      	bne.n	8007b6c <__mdiff+0x38>
 8007b4a:	4629      	mov	r1, r5
 8007b4c:	4630      	mov	r0, r6
 8007b4e:	f7ff fd53 	bl	80075f8 <_Balloc>
 8007b52:	b930      	cbnz	r0, 8007b62 <__mdiff+0x2e>
 8007b54:	4b3a      	ldr	r3, [pc, #232]	; (8007c40 <__mdiff+0x10c>)
 8007b56:	4602      	mov	r2, r0
 8007b58:	f240 2132 	movw	r1, #562	; 0x232
 8007b5c:	4839      	ldr	r0, [pc, #228]	; (8007c44 <__mdiff+0x110>)
 8007b5e:	f000 f9d5 	bl	8007f0c <__assert_func>
 8007b62:	2301      	movs	r3, #1
 8007b64:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007b68:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b6c:	bfa4      	itt	ge
 8007b6e:	4643      	movge	r3, r8
 8007b70:	46a0      	movge	r8, r4
 8007b72:	4630      	mov	r0, r6
 8007b74:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007b78:	bfa6      	itte	ge
 8007b7a:	461c      	movge	r4, r3
 8007b7c:	2500      	movge	r5, #0
 8007b7e:	2501      	movlt	r5, #1
 8007b80:	f7ff fd3a 	bl	80075f8 <_Balloc>
 8007b84:	b920      	cbnz	r0, 8007b90 <__mdiff+0x5c>
 8007b86:	4b2e      	ldr	r3, [pc, #184]	; (8007c40 <__mdiff+0x10c>)
 8007b88:	4602      	mov	r2, r0
 8007b8a:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007b8e:	e7e5      	b.n	8007b5c <__mdiff+0x28>
 8007b90:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007b94:	6926      	ldr	r6, [r4, #16]
 8007b96:	60c5      	str	r5, [r0, #12]
 8007b98:	f104 0914 	add.w	r9, r4, #20
 8007b9c:	f108 0514 	add.w	r5, r8, #20
 8007ba0:	f100 0e14 	add.w	lr, r0, #20
 8007ba4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007ba8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007bac:	f108 0210 	add.w	r2, r8, #16
 8007bb0:	46f2      	mov	sl, lr
 8007bb2:	2100      	movs	r1, #0
 8007bb4:	f859 3b04 	ldr.w	r3, [r9], #4
 8007bb8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007bbc:	fa1f f883 	uxth.w	r8, r3
 8007bc0:	fa11 f18b 	uxtah	r1, r1, fp
 8007bc4:	0c1b      	lsrs	r3, r3, #16
 8007bc6:	eba1 0808 	sub.w	r8, r1, r8
 8007bca:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007bce:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007bd2:	fa1f f888 	uxth.w	r8, r8
 8007bd6:	1419      	asrs	r1, r3, #16
 8007bd8:	454e      	cmp	r6, r9
 8007bda:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007bde:	f84a 3b04 	str.w	r3, [sl], #4
 8007be2:	d8e7      	bhi.n	8007bb4 <__mdiff+0x80>
 8007be4:	1b33      	subs	r3, r6, r4
 8007be6:	3b15      	subs	r3, #21
 8007be8:	f023 0303 	bic.w	r3, r3, #3
 8007bec:	3304      	adds	r3, #4
 8007bee:	3415      	adds	r4, #21
 8007bf0:	42a6      	cmp	r6, r4
 8007bf2:	bf38      	it	cc
 8007bf4:	2304      	movcc	r3, #4
 8007bf6:	441d      	add	r5, r3
 8007bf8:	4473      	add	r3, lr
 8007bfa:	469e      	mov	lr, r3
 8007bfc:	462e      	mov	r6, r5
 8007bfe:	4566      	cmp	r6, ip
 8007c00:	d30e      	bcc.n	8007c20 <__mdiff+0xec>
 8007c02:	f10c 0203 	add.w	r2, ip, #3
 8007c06:	1b52      	subs	r2, r2, r5
 8007c08:	f022 0203 	bic.w	r2, r2, #3
 8007c0c:	3d03      	subs	r5, #3
 8007c0e:	45ac      	cmp	ip, r5
 8007c10:	bf38      	it	cc
 8007c12:	2200      	movcc	r2, #0
 8007c14:	441a      	add	r2, r3
 8007c16:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8007c1a:	b17b      	cbz	r3, 8007c3c <__mdiff+0x108>
 8007c1c:	6107      	str	r7, [r0, #16]
 8007c1e:	e7a3      	b.n	8007b68 <__mdiff+0x34>
 8007c20:	f856 8b04 	ldr.w	r8, [r6], #4
 8007c24:	fa11 f288 	uxtah	r2, r1, r8
 8007c28:	1414      	asrs	r4, r2, #16
 8007c2a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007c2e:	b292      	uxth	r2, r2
 8007c30:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007c34:	f84e 2b04 	str.w	r2, [lr], #4
 8007c38:	1421      	asrs	r1, r4, #16
 8007c3a:	e7e0      	b.n	8007bfe <__mdiff+0xca>
 8007c3c:	3f01      	subs	r7, #1
 8007c3e:	e7ea      	b.n	8007c16 <__mdiff+0xe2>
 8007c40:	08008b2f 	.word	0x08008b2f
 8007c44:	08008b40 	.word	0x08008b40

08007c48 <__d2b>:
 8007c48:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007c4c:	4689      	mov	r9, r1
 8007c4e:	2101      	movs	r1, #1
 8007c50:	ec57 6b10 	vmov	r6, r7, d0
 8007c54:	4690      	mov	r8, r2
 8007c56:	f7ff fccf 	bl	80075f8 <_Balloc>
 8007c5a:	4604      	mov	r4, r0
 8007c5c:	b930      	cbnz	r0, 8007c6c <__d2b+0x24>
 8007c5e:	4602      	mov	r2, r0
 8007c60:	4b25      	ldr	r3, [pc, #148]	; (8007cf8 <__d2b+0xb0>)
 8007c62:	4826      	ldr	r0, [pc, #152]	; (8007cfc <__d2b+0xb4>)
 8007c64:	f240 310a 	movw	r1, #778	; 0x30a
 8007c68:	f000 f950 	bl	8007f0c <__assert_func>
 8007c6c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007c70:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007c74:	bb35      	cbnz	r5, 8007cc4 <__d2b+0x7c>
 8007c76:	2e00      	cmp	r6, #0
 8007c78:	9301      	str	r3, [sp, #4]
 8007c7a:	d028      	beq.n	8007cce <__d2b+0x86>
 8007c7c:	4668      	mov	r0, sp
 8007c7e:	9600      	str	r6, [sp, #0]
 8007c80:	f7ff fd82 	bl	8007788 <__lo0bits>
 8007c84:	9900      	ldr	r1, [sp, #0]
 8007c86:	b300      	cbz	r0, 8007cca <__d2b+0x82>
 8007c88:	9a01      	ldr	r2, [sp, #4]
 8007c8a:	f1c0 0320 	rsb	r3, r0, #32
 8007c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8007c92:	430b      	orrs	r3, r1
 8007c94:	40c2      	lsrs	r2, r0
 8007c96:	6163      	str	r3, [r4, #20]
 8007c98:	9201      	str	r2, [sp, #4]
 8007c9a:	9b01      	ldr	r3, [sp, #4]
 8007c9c:	61a3      	str	r3, [r4, #24]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	bf14      	ite	ne
 8007ca2:	2202      	movne	r2, #2
 8007ca4:	2201      	moveq	r2, #1
 8007ca6:	6122      	str	r2, [r4, #16]
 8007ca8:	b1d5      	cbz	r5, 8007ce0 <__d2b+0x98>
 8007caa:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007cae:	4405      	add	r5, r0
 8007cb0:	f8c9 5000 	str.w	r5, [r9]
 8007cb4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007cb8:	f8c8 0000 	str.w	r0, [r8]
 8007cbc:	4620      	mov	r0, r4
 8007cbe:	b003      	add	sp, #12
 8007cc0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007cc4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007cc8:	e7d5      	b.n	8007c76 <__d2b+0x2e>
 8007cca:	6161      	str	r1, [r4, #20]
 8007ccc:	e7e5      	b.n	8007c9a <__d2b+0x52>
 8007cce:	a801      	add	r0, sp, #4
 8007cd0:	f7ff fd5a 	bl	8007788 <__lo0bits>
 8007cd4:	9b01      	ldr	r3, [sp, #4]
 8007cd6:	6163      	str	r3, [r4, #20]
 8007cd8:	2201      	movs	r2, #1
 8007cda:	6122      	str	r2, [r4, #16]
 8007cdc:	3020      	adds	r0, #32
 8007cde:	e7e3      	b.n	8007ca8 <__d2b+0x60>
 8007ce0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007ce4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007ce8:	f8c9 0000 	str.w	r0, [r9]
 8007cec:	6918      	ldr	r0, [r3, #16]
 8007cee:	f7ff fd2b 	bl	8007748 <__hi0bits>
 8007cf2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007cf6:	e7df      	b.n	8007cb8 <__d2b+0x70>
 8007cf8:	08008b2f 	.word	0x08008b2f
 8007cfc:	08008b40 	.word	0x08008b40

08007d00 <_calloc_r>:
 8007d00:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007d02:	fba1 2402 	umull	r2, r4, r1, r2
 8007d06:	b94c      	cbnz	r4, 8007d1c <_calloc_r+0x1c>
 8007d08:	4611      	mov	r1, r2
 8007d0a:	9201      	str	r2, [sp, #4]
 8007d0c:	f000 f87a 	bl	8007e04 <_malloc_r>
 8007d10:	9a01      	ldr	r2, [sp, #4]
 8007d12:	4605      	mov	r5, r0
 8007d14:	b930      	cbnz	r0, 8007d24 <_calloc_r+0x24>
 8007d16:	4628      	mov	r0, r5
 8007d18:	b003      	add	sp, #12
 8007d1a:	bd30      	pop	{r4, r5, pc}
 8007d1c:	220c      	movs	r2, #12
 8007d1e:	6002      	str	r2, [r0, #0]
 8007d20:	2500      	movs	r5, #0
 8007d22:	e7f8      	b.n	8007d16 <_calloc_r+0x16>
 8007d24:	4621      	mov	r1, r4
 8007d26:	f7fe f95f 	bl	8005fe8 <memset>
 8007d2a:	e7f4      	b.n	8007d16 <_calloc_r+0x16>

08007d2c <_free_r>:
 8007d2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007d2e:	2900      	cmp	r1, #0
 8007d30:	d044      	beq.n	8007dbc <_free_r+0x90>
 8007d32:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007d36:	9001      	str	r0, [sp, #4]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	f1a1 0404 	sub.w	r4, r1, #4
 8007d3e:	bfb8      	it	lt
 8007d40:	18e4      	addlt	r4, r4, r3
 8007d42:	f000 f925 	bl	8007f90 <__malloc_lock>
 8007d46:	4a1e      	ldr	r2, [pc, #120]	; (8007dc0 <_free_r+0x94>)
 8007d48:	9801      	ldr	r0, [sp, #4]
 8007d4a:	6813      	ldr	r3, [r2, #0]
 8007d4c:	b933      	cbnz	r3, 8007d5c <_free_r+0x30>
 8007d4e:	6063      	str	r3, [r4, #4]
 8007d50:	6014      	str	r4, [r2, #0]
 8007d52:	b003      	add	sp, #12
 8007d54:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007d58:	f000 b920 	b.w	8007f9c <__malloc_unlock>
 8007d5c:	42a3      	cmp	r3, r4
 8007d5e:	d908      	bls.n	8007d72 <_free_r+0x46>
 8007d60:	6825      	ldr	r5, [r4, #0]
 8007d62:	1961      	adds	r1, r4, r5
 8007d64:	428b      	cmp	r3, r1
 8007d66:	bf01      	itttt	eq
 8007d68:	6819      	ldreq	r1, [r3, #0]
 8007d6a:	685b      	ldreq	r3, [r3, #4]
 8007d6c:	1949      	addeq	r1, r1, r5
 8007d6e:	6021      	streq	r1, [r4, #0]
 8007d70:	e7ed      	b.n	8007d4e <_free_r+0x22>
 8007d72:	461a      	mov	r2, r3
 8007d74:	685b      	ldr	r3, [r3, #4]
 8007d76:	b10b      	cbz	r3, 8007d7c <_free_r+0x50>
 8007d78:	42a3      	cmp	r3, r4
 8007d7a:	d9fa      	bls.n	8007d72 <_free_r+0x46>
 8007d7c:	6811      	ldr	r1, [r2, #0]
 8007d7e:	1855      	adds	r5, r2, r1
 8007d80:	42a5      	cmp	r5, r4
 8007d82:	d10b      	bne.n	8007d9c <_free_r+0x70>
 8007d84:	6824      	ldr	r4, [r4, #0]
 8007d86:	4421      	add	r1, r4
 8007d88:	1854      	adds	r4, r2, r1
 8007d8a:	42a3      	cmp	r3, r4
 8007d8c:	6011      	str	r1, [r2, #0]
 8007d8e:	d1e0      	bne.n	8007d52 <_free_r+0x26>
 8007d90:	681c      	ldr	r4, [r3, #0]
 8007d92:	685b      	ldr	r3, [r3, #4]
 8007d94:	6053      	str	r3, [r2, #4]
 8007d96:	4421      	add	r1, r4
 8007d98:	6011      	str	r1, [r2, #0]
 8007d9a:	e7da      	b.n	8007d52 <_free_r+0x26>
 8007d9c:	d902      	bls.n	8007da4 <_free_r+0x78>
 8007d9e:	230c      	movs	r3, #12
 8007da0:	6003      	str	r3, [r0, #0]
 8007da2:	e7d6      	b.n	8007d52 <_free_r+0x26>
 8007da4:	6825      	ldr	r5, [r4, #0]
 8007da6:	1961      	adds	r1, r4, r5
 8007da8:	428b      	cmp	r3, r1
 8007daa:	bf04      	itt	eq
 8007dac:	6819      	ldreq	r1, [r3, #0]
 8007dae:	685b      	ldreq	r3, [r3, #4]
 8007db0:	6063      	str	r3, [r4, #4]
 8007db2:	bf04      	itt	eq
 8007db4:	1949      	addeq	r1, r1, r5
 8007db6:	6021      	streq	r1, [r4, #0]
 8007db8:	6054      	str	r4, [r2, #4]
 8007dba:	e7ca      	b.n	8007d52 <_free_r+0x26>
 8007dbc:	b003      	add	sp, #12
 8007dbe:	bd30      	pop	{r4, r5, pc}
 8007dc0:	200006e8 	.word	0x200006e8

08007dc4 <sbrk_aligned>:
 8007dc4:	b570      	push	{r4, r5, r6, lr}
 8007dc6:	4e0e      	ldr	r6, [pc, #56]	; (8007e00 <sbrk_aligned+0x3c>)
 8007dc8:	460c      	mov	r4, r1
 8007dca:	6831      	ldr	r1, [r6, #0]
 8007dcc:	4605      	mov	r5, r0
 8007dce:	b911      	cbnz	r1, 8007dd6 <sbrk_aligned+0x12>
 8007dd0:	f000 f88c 	bl	8007eec <_sbrk_r>
 8007dd4:	6030      	str	r0, [r6, #0]
 8007dd6:	4621      	mov	r1, r4
 8007dd8:	4628      	mov	r0, r5
 8007dda:	f000 f887 	bl	8007eec <_sbrk_r>
 8007dde:	1c43      	adds	r3, r0, #1
 8007de0:	d00a      	beq.n	8007df8 <sbrk_aligned+0x34>
 8007de2:	1cc4      	adds	r4, r0, #3
 8007de4:	f024 0403 	bic.w	r4, r4, #3
 8007de8:	42a0      	cmp	r0, r4
 8007dea:	d007      	beq.n	8007dfc <sbrk_aligned+0x38>
 8007dec:	1a21      	subs	r1, r4, r0
 8007dee:	4628      	mov	r0, r5
 8007df0:	f000 f87c 	bl	8007eec <_sbrk_r>
 8007df4:	3001      	adds	r0, #1
 8007df6:	d101      	bne.n	8007dfc <sbrk_aligned+0x38>
 8007df8:	f04f 34ff 	mov.w	r4, #4294967295
 8007dfc:	4620      	mov	r0, r4
 8007dfe:	bd70      	pop	{r4, r5, r6, pc}
 8007e00:	200006ec 	.word	0x200006ec

08007e04 <_malloc_r>:
 8007e04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e08:	1ccd      	adds	r5, r1, #3
 8007e0a:	f025 0503 	bic.w	r5, r5, #3
 8007e0e:	3508      	adds	r5, #8
 8007e10:	2d0c      	cmp	r5, #12
 8007e12:	bf38      	it	cc
 8007e14:	250c      	movcc	r5, #12
 8007e16:	2d00      	cmp	r5, #0
 8007e18:	4607      	mov	r7, r0
 8007e1a:	db01      	blt.n	8007e20 <_malloc_r+0x1c>
 8007e1c:	42a9      	cmp	r1, r5
 8007e1e:	d905      	bls.n	8007e2c <_malloc_r+0x28>
 8007e20:	230c      	movs	r3, #12
 8007e22:	603b      	str	r3, [r7, #0]
 8007e24:	2600      	movs	r6, #0
 8007e26:	4630      	mov	r0, r6
 8007e28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e2c:	4e2e      	ldr	r6, [pc, #184]	; (8007ee8 <_malloc_r+0xe4>)
 8007e2e:	f000 f8af 	bl	8007f90 <__malloc_lock>
 8007e32:	6833      	ldr	r3, [r6, #0]
 8007e34:	461c      	mov	r4, r3
 8007e36:	bb34      	cbnz	r4, 8007e86 <_malloc_r+0x82>
 8007e38:	4629      	mov	r1, r5
 8007e3a:	4638      	mov	r0, r7
 8007e3c:	f7ff ffc2 	bl	8007dc4 <sbrk_aligned>
 8007e40:	1c43      	adds	r3, r0, #1
 8007e42:	4604      	mov	r4, r0
 8007e44:	d14d      	bne.n	8007ee2 <_malloc_r+0xde>
 8007e46:	6834      	ldr	r4, [r6, #0]
 8007e48:	4626      	mov	r6, r4
 8007e4a:	2e00      	cmp	r6, #0
 8007e4c:	d140      	bne.n	8007ed0 <_malloc_r+0xcc>
 8007e4e:	6823      	ldr	r3, [r4, #0]
 8007e50:	4631      	mov	r1, r6
 8007e52:	4638      	mov	r0, r7
 8007e54:	eb04 0803 	add.w	r8, r4, r3
 8007e58:	f000 f848 	bl	8007eec <_sbrk_r>
 8007e5c:	4580      	cmp	r8, r0
 8007e5e:	d13a      	bne.n	8007ed6 <_malloc_r+0xd2>
 8007e60:	6821      	ldr	r1, [r4, #0]
 8007e62:	3503      	adds	r5, #3
 8007e64:	1a6d      	subs	r5, r5, r1
 8007e66:	f025 0503 	bic.w	r5, r5, #3
 8007e6a:	3508      	adds	r5, #8
 8007e6c:	2d0c      	cmp	r5, #12
 8007e6e:	bf38      	it	cc
 8007e70:	250c      	movcc	r5, #12
 8007e72:	4629      	mov	r1, r5
 8007e74:	4638      	mov	r0, r7
 8007e76:	f7ff ffa5 	bl	8007dc4 <sbrk_aligned>
 8007e7a:	3001      	adds	r0, #1
 8007e7c:	d02b      	beq.n	8007ed6 <_malloc_r+0xd2>
 8007e7e:	6823      	ldr	r3, [r4, #0]
 8007e80:	442b      	add	r3, r5
 8007e82:	6023      	str	r3, [r4, #0]
 8007e84:	e00e      	b.n	8007ea4 <_malloc_r+0xa0>
 8007e86:	6822      	ldr	r2, [r4, #0]
 8007e88:	1b52      	subs	r2, r2, r5
 8007e8a:	d41e      	bmi.n	8007eca <_malloc_r+0xc6>
 8007e8c:	2a0b      	cmp	r2, #11
 8007e8e:	d916      	bls.n	8007ebe <_malloc_r+0xba>
 8007e90:	1961      	adds	r1, r4, r5
 8007e92:	42a3      	cmp	r3, r4
 8007e94:	6025      	str	r5, [r4, #0]
 8007e96:	bf18      	it	ne
 8007e98:	6059      	strne	r1, [r3, #4]
 8007e9a:	6863      	ldr	r3, [r4, #4]
 8007e9c:	bf08      	it	eq
 8007e9e:	6031      	streq	r1, [r6, #0]
 8007ea0:	5162      	str	r2, [r4, r5]
 8007ea2:	604b      	str	r3, [r1, #4]
 8007ea4:	4638      	mov	r0, r7
 8007ea6:	f104 060b 	add.w	r6, r4, #11
 8007eaa:	f000 f877 	bl	8007f9c <__malloc_unlock>
 8007eae:	f026 0607 	bic.w	r6, r6, #7
 8007eb2:	1d23      	adds	r3, r4, #4
 8007eb4:	1af2      	subs	r2, r6, r3
 8007eb6:	d0b6      	beq.n	8007e26 <_malloc_r+0x22>
 8007eb8:	1b9b      	subs	r3, r3, r6
 8007eba:	50a3      	str	r3, [r4, r2]
 8007ebc:	e7b3      	b.n	8007e26 <_malloc_r+0x22>
 8007ebe:	6862      	ldr	r2, [r4, #4]
 8007ec0:	42a3      	cmp	r3, r4
 8007ec2:	bf0c      	ite	eq
 8007ec4:	6032      	streq	r2, [r6, #0]
 8007ec6:	605a      	strne	r2, [r3, #4]
 8007ec8:	e7ec      	b.n	8007ea4 <_malloc_r+0xa0>
 8007eca:	4623      	mov	r3, r4
 8007ecc:	6864      	ldr	r4, [r4, #4]
 8007ece:	e7b2      	b.n	8007e36 <_malloc_r+0x32>
 8007ed0:	4634      	mov	r4, r6
 8007ed2:	6876      	ldr	r6, [r6, #4]
 8007ed4:	e7b9      	b.n	8007e4a <_malloc_r+0x46>
 8007ed6:	230c      	movs	r3, #12
 8007ed8:	603b      	str	r3, [r7, #0]
 8007eda:	4638      	mov	r0, r7
 8007edc:	f000 f85e 	bl	8007f9c <__malloc_unlock>
 8007ee0:	e7a1      	b.n	8007e26 <_malloc_r+0x22>
 8007ee2:	6025      	str	r5, [r4, #0]
 8007ee4:	e7de      	b.n	8007ea4 <_malloc_r+0xa0>
 8007ee6:	bf00      	nop
 8007ee8:	200006e8 	.word	0x200006e8

08007eec <_sbrk_r>:
 8007eec:	b538      	push	{r3, r4, r5, lr}
 8007eee:	4d06      	ldr	r5, [pc, #24]	; (8007f08 <_sbrk_r+0x1c>)
 8007ef0:	2300      	movs	r3, #0
 8007ef2:	4604      	mov	r4, r0
 8007ef4:	4608      	mov	r0, r1
 8007ef6:	602b      	str	r3, [r5, #0]
 8007ef8:	f7f9 fa6c 	bl	80013d4 <_sbrk>
 8007efc:	1c43      	adds	r3, r0, #1
 8007efe:	d102      	bne.n	8007f06 <_sbrk_r+0x1a>
 8007f00:	682b      	ldr	r3, [r5, #0]
 8007f02:	b103      	cbz	r3, 8007f06 <_sbrk_r+0x1a>
 8007f04:	6023      	str	r3, [r4, #0]
 8007f06:	bd38      	pop	{r3, r4, r5, pc}
 8007f08:	200006f0 	.word	0x200006f0

08007f0c <__assert_func>:
 8007f0c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007f0e:	4614      	mov	r4, r2
 8007f10:	461a      	mov	r2, r3
 8007f12:	4b09      	ldr	r3, [pc, #36]	; (8007f38 <__assert_func+0x2c>)
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	4605      	mov	r5, r0
 8007f18:	68d8      	ldr	r0, [r3, #12]
 8007f1a:	b14c      	cbz	r4, 8007f30 <__assert_func+0x24>
 8007f1c:	4b07      	ldr	r3, [pc, #28]	; (8007f3c <__assert_func+0x30>)
 8007f1e:	9100      	str	r1, [sp, #0]
 8007f20:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007f24:	4906      	ldr	r1, [pc, #24]	; (8007f40 <__assert_func+0x34>)
 8007f26:	462b      	mov	r3, r5
 8007f28:	f000 f80e 	bl	8007f48 <fiprintf>
 8007f2c:	f000 fa64 	bl	80083f8 <abort>
 8007f30:	4b04      	ldr	r3, [pc, #16]	; (8007f44 <__assert_func+0x38>)
 8007f32:	461c      	mov	r4, r3
 8007f34:	e7f3      	b.n	8007f1e <__assert_func+0x12>
 8007f36:	bf00      	nop
 8007f38:	2000007c 	.word	0x2000007c
 8007f3c:	08008c9c 	.word	0x08008c9c
 8007f40:	08008ca9 	.word	0x08008ca9
 8007f44:	08008cd7 	.word	0x08008cd7

08007f48 <fiprintf>:
 8007f48:	b40e      	push	{r1, r2, r3}
 8007f4a:	b503      	push	{r0, r1, lr}
 8007f4c:	4601      	mov	r1, r0
 8007f4e:	ab03      	add	r3, sp, #12
 8007f50:	4805      	ldr	r0, [pc, #20]	; (8007f68 <fiprintf+0x20>)
 8007f52:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f56:	6800      	ldr	r0, [r0, #0]
 8007f58:	9301      	str	r3, [sp, #4]
 8007f5a:	f000 f84f 	bl	8007ffc <_vfiprintf_r>
 8007f5e:	b002      	add	sp, #8
 8007f60:	f85d eb04 	ldr.w	lr, [sp], #4
 8007f64:	b003      	add	sp, #12
 8007f66:	4770      	bx	lr
 8007f68:	2000007c 	.word	0x2000007c

08007f6c <__ascii_mbtowc>:
 8007f6c:	b082      	sub	sp, #8
 8007f6e:	b901      	cbnz	r1, 8007f72 <__ascii_mbtowc+0x6>
 8007f70:	a901      	add	r1, sp, #4
 8007f72:	b142      	cbz	r2, 8007f86 <__ascii_mbtowc+0x1a>
 8007f74:	b14b      	cbz	r3, 8007f8a <__ascii_mbtowc+0x1e>
 8007f76:	7813      	ldrb	r3, [r2, #0]
 8007f78:	600b      	str	r3, [r1, #0]
 8007f7a:	7812      	ldrb	r2, [r2, #0]
 8007f7c:	1e10      	subs	r0, r2, #0
 8007f7e:	bf18      	it	ne
 8007f80:	2001      	movne	r0, #1
 8007f82:	b002      	add	sp, #8
 8007f84:	4770      	bx	lr
 8007f86:	4610      	mov	r0, r2
 8007f88:	e7fb      	b.n	8007f82 <__ascii_mbtowc+0x16>
 8007f8a:	f06f 0001 	mvn.w	r0, #1
 8007f8e:	e7f8      	b.n	8007f82 <__ascii_mbtowc+0x16>

08007f90 <__malloc_lock>:
 8007f90:	4801      	ldr	r0, [pc, #4]	; (8007f98 <__malloc_lock+0x8>)
 8007f92:	f000 bbf1 	b.w	8008778 <__retarget_lock_acquire_recursive>
 8007f96:	bf00      	nop
 8007f98:	200006f4 	.word	0x200006f4

08007f9c <__malloc_unlock>:
 8007f9c:	4801      	ldr	r0, [pc, #4]	; (8007fa4 <__malloc_unlock+0x8>)
 8007f9e:	f000 bbec 	b.w	800877a <__retarget_lock_release_recursive>
 8007fa2:	bf00      	nop
 8007fa4:	200006f4 	.word	0x200006f4

08007fa8 <__sfputc_r>:
 8007fa8:	6893      	ldr	r3, [r2, #8]
 8007faa:	3b01      	subs	r3, #1
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	b410      	push	{r4}
 8007fb0:	6093      	str	r3, [r2, #8]
 8007fb2:	da08      	bge.n	8007fc6 <__sfputc_r+0x1e>
 8007fb4:	6994      	ldr	r4, [r2, #24]
 8007fb6:	42a3      	cmp	r3, r4
 8007fb8:	db01      	blt.n	8007fbe <__sfputc_r+0x16>
 8007fba:	290a      	cmp	r1, #10
 8007fbc:	d103      	bne.n	8007fc6 <__sfputc_r+0x1e>
 8007fbe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007fc2:	f000 b94b 	b.w	800825c <__swbuf_r>
 8007fc6:	6813      	ldr	r3, [r2, #0]
 8007fc8:	1c58      	adds	r0, r3, #1
 8007fca:	6010      	str	r0, [r2, #0]
 8007fcc:	7019      	strb	r1, [r3, #0]
 8007fce:	4608      	mov	r0, r1
 8007fd0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007fd4:	4770      	bx	lr

08007fd6 <__sfputs_r>:
 8007fd6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fd8:	4606      	mov	r6, r0
 8007fda:	460f      	mov	r7, r1
 8007fdc:	4614      	mov	r4, r2
 8007fde:	18d5      	adds	r5, r2, r3
 8007fe0:	42ac      	cmp	r4, r5
 8007fe2:	d101      	bne.n	8007fe8 <__sfputs_r+0x12>
 8007fe4:	2000      	movs	r0, #0
 8007fe6:	e007      	b.n	8007ff8 <__sfputs_r+0x22>
 8007fe8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007fec:	463a      	mov	r2, r7
 8007fee:	4630      	mov	r0, r6
 8007ff0:	f7ff ffda 	bl	8007fa8 <__sfputc_r>
 8007ff4:	1c43      	adds	r3, r0, #1
 8007ff6:	d1f3      	bne.n	8007fe0 <__sfputs_r+0xa>
 8007ff8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007ffc <_vfiprintf_r>:
 8007ffc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008000:	460d      	mov	r5, r1
 8008002:	b09d      	sub	sp, #116	; 0x74
 8008004:	4614      	mov	r4, r2
 8008006:	4698      	mov	r8, r3
 8008008:	4606      	mov	r6, r0
 800800a:	b118      	cbz	r0, 8008014 <_vfiprintf_r+0x18>
 800800c:	6983      	ldr	r3, [r0, #24]
 800800e:	b90b      	cbnz	r3, 8008014 <_vfiprintf_r+0x18>
 8008010:	f000 fb14 	bl	800863c <__sinit>
 8008014:	4b89      	ldr	r3, [pc, #548]	; (800823c <_vfiprintf_r+0x240>)
 8008016:	429d      	cmp	r5, r3
 8008018:	d11b      	bne.n	8008052 <_vfiprintf_r+0x56>
 800801a:	6875      	ldr	r5, [r6, #4]
 800801c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800801e:	07d9      	lsls	r1, r3, #31
 8008020:	d405      	bmi.n	800802e <_vfiprintf_r+0x32>
 8008022:	89ab      	ldrh	r3, [r5, #12]
 8008024:	059a      	lsls	r2, r3, #22
 8008026:	d402      	bmi.n	800802e <_vfiprintf_r+0x32>
 8008028:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800802a:	f000 fba5 	bl	8008778 <__retarget_lock_acquire_recursive>
 800802e:	89ab      	ldrh	r3, [r5, #12]
 8008030:	071b      	lsls	r3, r3, #28
 8008032:	d501      	bpl.n	8008038 <_vfiprintf_r+0x3c>
 8008034:	692b      	ldr	r3, [r5, #16]
 8008036:	b9eb      	cbnz	r3, 8008074 <_vfiprintf_r+0x78>
 8008038:	4629      	mov	r1, r5
 800803a:	4630      	mov	r0, r6
 800803c:	f000 f96e 	bl	800831c <__swsetup_r>
 8008040:	b1c0      	cbz	r0, 8008074 <_vfiprintf_r+0x78>
 8008042:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008044:	07dc      	lsls	r4, r3, #31
 8008046:	d50e      	bpl.n	8008066 <_vfiprintf_r+0x6a>
 8008048:	f04f 30ff 	mov.w	r0, #4294967295
 800804c:	b01d      	add	sp, #116	; 0x74
 800804e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008052:	4b7b      	ldr	r3, [pc, #492]	; (8008240 <_vfiprintf_r+0x244>)
 8008054:	429d      	cmp	r5, r3
 8008056:	d101      	bne.n	800805c <_vfiprintf_r+0x60>
 8008058:	68b5      	ldr	r5, [r6, #8]
 800805a:	e7df      	b.n	800801c <_vfiprintf_r+0x20>
 800805c:	4b79      	ldr	r3, [pc, #484]	; (8008244 <_vfiprintf_r+0x248>)
 800805e:	429d      	cmp	r5, r3
 8008060:	bf08      	it	eq
 8008062:	68f5      	ldreq	r5, [r6, #12]
 8008064:	e7da      	b.n	800801c <_vfiprintf_r+0x20>
 8008066:	89ab      	ldrh	r3, [r5, #12]
 8008068:	0598      	lsls	r0, r3, #22
 800806a:	d4ed      	bmi.n	8008048 <_vfiprintf_r+0x4c>
 800806c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800806e:	f000 fb84 	bl	800877a <__retarget_lock_release_recursive>
 8008072:	e7e9      	b.n	8008048 <_vfiprintf_r+0x4c>
 8008074:	2300      	movs	r3, #0
 8008076:	9309      	str	r3, [sp, #36]	; 0x24
 8008078:	2320      	movs	r3, #32
 800807a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800807e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008082:	2330      	movs	r3, #48	; 0x30
 8008084:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008248 <_vfiprintf_r+0x24c>
 8008088:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800808c:	f04f 0901 	mov.w	r9, #1
 8008090:	4623      	mov	r3, r4
 8008092:	469a      	mov	sl, r3
 8008094:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008098:	b10a      	cbz	r2, 800809e <_vfiprintf_r+0xa2>
 800809a:	2a25      	cmp	r2, #37	; 0x25
 800809c:	d1f9      	bne.n	8008092 <_vfiprintf_r+0x96>
 800809e:	ebba 0b04 	subs.w	fp, sl, r4
 80080a2:	d00b      	beq.n	80080bc <_vfiprintf_r+0xc0>
 80080a4:	465b      	mov	r3, fp
 80080a6:	4622      	mov	r2, r4
 80080a8:	4629      	mov	r1, r5
 80080aa:	4630      	mov	r0, r6
 80080ac:	f7ff ff93 	bl	8007fd6 <__sfputs_r>
 80080b0:	3001      	adds	r0, #1
 80080b2:	f000 80aa 	beq.w	800820a <_vfiprintf_r+0x20e>
 80080b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80080b8:	445a      	add	r2, fp
 80080ba:	9209      	str	r2, [sp, #36]	; 0x24
 80080bc:	f89a 3000 	ldrb.w	r3, [sl]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	f000 80a2 	beq.w	800820a <_vfiprintf_r+0x20e>
 80080c6:	2300      	movs	r3, #0
 80080c8:	f04f 32ff 	mov.w	r2, #4294967295
 80080cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80080d0:	f10a 0a01 	add.w	sl, sl, #1
 80080d4:	9304      	str	r3, [sp, #16]
 80080d6:	9307      	str	r3, [sp, #28]
 80080d8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80080dc:	931a      	str	r3, [sp, #104]	; 0x68
 80080de:	4654      	mov	r4, sl
 80080e0:	2205      	movs	r2, #5
 80080e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80080e6:	4858      	ldr	r0, [pc, #352]	; (8008248 <_vfiprintf_r+0x24c>)
 80080e8:	f7f8 f87a 	bl	80001e0 <memchr>
 80080ec:	9a04      	ldr	r2, [sp, #16]
 80080ee:	b9d8      	cbnz	r0, 8008128 <_vfiprintf_r+0x12c>
 80080f0:	06d1      	lsls	r1, r2, #27
 80080f2:	bf44      	itt	mi
 80080f4:	2320      	movmi	r3, #32
 80080f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80080fa:	0713      	lsls	r3, r2, #28
 80080fc:	bf44      	itt	mi
 80080fe:	232b      	movmi	r3, #43	; 0x2b
 8008100:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008104:	f89a 3000 	ldrb.w	r3, [sl]
 8008108:	2b2a      	cmp	r3, #42	; 0x2a
 800810a:	d015      	beq.n	8008138 <_vfiprintf_r+0x13c>
 800810c:	9a07      	ldr	r2, [sp, #28]
 800810e:	4654      	mov	r4, sl
 8008110:	2000      	movs	r0, #0
 8008112:	f04f 0c0a 	mov.w	ip, #10
 8008116:	4621      	mov	r1, r4
 8008118:	f811 3b01 	ldrb.w	r3, [r1], #1
 800811c:	3b30      	subs	r3, #48	; 0x30
 800811e:	2b09      	cmp	r3, #9
 8008120:	d94e      	bls.n	80081c0 <_vfiprintf_r+0x1c4>
 8008122:	b1b0      	cbz	r0, 8008152 <_vfiprintf_r+0x156>
 8008124:	9207      	str	r2, [sp, #28]
 8008126:	e014      	b.n	8008152 <_vfiprintf_r+0x156>
 8008128:	eba0 0308 	sub.w	r3, r0, r8
 800812c:	fa09 f303 	lsl.w	r3, r9, r3
 8008130:	4313      	orrs	r3, r2
 8008132:	9304      	str	r3, [sp, #16]
 8008134:	46a2      	mov	sl, r4
 8008136:	e7d2      	b.n	80080de <_vfiprintf_r+0xe2>
 8008138:	9b03      	ldr	r3, [sp, #12]
 800813a:	1d19      	adds	r1, r3, #4
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	9103      	str	r1, [sp, #12]
 8008140:	2b00      	cmp	r3, #0
 8008142:	bfbb      	ittet	lt
 8008144:	425b      	neglt	r3, r3
 8008146:	f042 0202 	orrlt.w	r2, r2, #2
 800814a:	9307      	strge	r3, [sp, #28]
 800814c:	9307      	strlt	r3, [sp, #28]
 800814e:	bfb8      	it	lt
 8008150:	9204      	strlt	r2, [sp, #16]
 8008152:	7823      	ldrb	r3, [r4, #0]
 8008154:	2b2e      	cmp	r3, #46	; 0x2e
 8008156:	d10c      	bne.n	8008172 <_vfiprintf_r+0x176>
 8008158:	7863      	ldrb	r3, [r4, #1]
 800815a:	2b2a      	cmp	r3, #42	; 0x2a
 800815c:	d135      	bne.n	80081ca <_vfiprintf_r+0x1ce>
 800815e:	9b03      	ldr	r3, [sp, #12]
 8008160:	1d1a      	adds	r2, r3, #4
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	9203      	str	r2, [sp, #12]
 8008166:	2b00      	cmp	r3, #0
 8008168:	bfb8      	it	lt
 800816a:	f04f 33ff 	movlt.w	r3, #4294967295
 800816e:	3402      	adds	r4, #2
 8008170:	9305      	str	r3, [sp, #20]
 8008172:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008258 <_vfiprintf_r+0x25c>
 8008176:	7821      	ldrb	r1, [r4, #0]
 8008178:	2203      	movs	r2, #3
 800817a:	4650      	mov	r0, sl
 800817c:	f7f8 f830 	bl	80001e0 <memchr>
 8008180:	b140      	cbz	r0, 8008194 <_vfiprintf_r+0x198>
 8008182:	2340      	movs	r3, #64	; 0x40
 8008184:	eba0 000a 	sub.w	r0, r0, sl
 8008188:	fa03 f000 	lsl.w	r0, r3, r0
 800818c:	9b04      	ldr	r3, [sp, #16]
 800818e:	4303      	orrs	r3, r0
 8008190:	3401      	adds	r4, #1
 8008192:	9304      	str	r3, [sp, #16]
 8008194:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008198:	482c      	ldr	r0, [pc, #176]	; (800824c <_vfiprintf_r+0x250>)
 800819a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800819e:	2206      	movs	r2, #6
 80081a0:	f7f8 f81e 	bl	80001e0 <memchr>
 80081a4:	2800      	cmp	r0, #0
 80081a6:	d03f      	beq.n	8008228 <_vfiprintf_r+0x22c>
 80081a8:	4b29      	ldr	r3, [pc, #164]	; (8008250 <_vfiprintf_r+0x254>)
 80081aa:	bb1b      	cbnz	r3, 80081f4 <_vfiprintf_r+0x1f8>
 80081ac:	9b03      	ldr	r3, [sp, #12]
 80081ae:	3307      	adds	r3, #7
 80081b0:	f023 0307 	bic.w	r3, r3, #7
 80081b4:	3308      	adds	r3, #8
 80081b6:	9303      	str	r3, [sp, #12]
 80081b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081ba:	443b      	add	r3, r7
 80081bc:	9309      	str	r3, [sp, #36]	; 0x24
 80081be:	e767      	b.n	8008090 <_vfiprintf_r+0x94>
 80081c0:	fb0c 3202 	mla	r2, ip, r2, r3
 80081c4:	460c      	mov	r4, r1
 80081c6:	2001      	movs	r0, #1
 80081c8:	e7a5      	b.n	8008116 <_vfiprintf_r+0x11a>
 80081ca:	2300      	movs	r3, #0
 80081cc:	3401      	adds	r4, #1
 80081ce:	9305      	str	r3, [sp, #20]
 80081d0:	4619      	mov	r1, r3
 80081d2:	f04f 0c0a 	mov.w	ip, #10
 80081d6:	4620      	mov	r0, r4
 80081d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80081dc:	3a30      	subs	r2, #48	; 0x30
 80081de:	2a09      	cmp	r2, #9
 80081e0:	d903      	bls.n	80081ea <_vfiprintf_r+0x1ee>
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d0c5      	beq.n	8008172 <_vfiprintf_r+0x176>
 80081e6:	9105      	str	r1, [sp, #20]
 80081e8:	e7c3      	b.n	8008172 <_vfiprintf_r+0x176>
 80081ea:	fb0c 2101 	mla	r1, ip, r1, r2
 80081ee:	4604      	mov	r4, r0
 80081f0:	2301      	movs	r3, #1
 80081f2:	e7f0      	b.n	80081d6 <_vfiprintf_r+0x1da>
 80081f4:	ab03      	add	r3, sp, #12
 80081f6:	9300      	str	r3, [sp, #0]
 80081f8:	462a      	mov	r2, r5
 80081fa:	4b16      	ldr	r3, [pc, #88]	; (8008254 <_vfiprintf_r+0x258>)
 80081fc:	a904      	add	r1, sp, #16
 80081fe:	4630      	mov	r0, r6
 8008200:	f7fd ff9a 	bl	8006138 <_printf_float>
 8008204:	4607      	mov	r7, r0
 8008206:	1c78      	adds	r0, r7, #1
 8008208:	d1d6      	bne.n	80081b8 <_vfiprintf_r+0x1bc>
 800820a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800820c:	07d9      	lsls	r1, r3, #31
 800820e:	d405      	bmi.n	800821c <_vfiprintf_r+0x220>
 8008210:	89ab      	ldrh	r3, [r5, #12]
 8008212:	059a      	lsls	r2, r3, #22
 8008214:	d402      	bmi.n	800821c <_vfiprintf_r+0x220>
 8008216:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008218:	f000 faaf 	bl	800877a <__retarget_lock_release_recursive>
 800821c:	89ab      	ldrh	r3, [r5, #12]
 800821e:	065b      	lsls	r3, r3, #25
 8008220:	f53f af12 	bmi.w	8008048 <_vfiprintf_r+0x4c>
 8008224:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008226:	e711      	b.n	800804c <_vfiprintf_r+0x50>
 8008228:	ab03      	add	r3, sp, #12
 800822a:	9300      	str	r3, [sp, #0]
 800822c:	462a      	mov	r2, r5
 800822e:	4b09      	ldr	r3, [pc, #36]	; (8008254 <_vfiprintf_r+0x258>)
 8008230:	a904      	add	r1, sp, #16
 8008232:	4630      	mov	r0, r6
 8008234:	f7fe fa24 	bl	8006680 <_printf_i>
 8008238:	e7e4      	b.n	8008204 <_vfiprintf_r+0x208>
 800823a:	bf00      	nop
 800823c:	08008e14 	.word	0x08008e14
 8008240:	08008e34 	.word	0x08008e34
 8008244:	08008df4 	.word	0x08008df4
 8008248:	08008ce2 	.word	0x08008ce2
 800824c:	08008cec 	.word	0x08008cec
 8008250:	08006139 	.word	0x08006139
 8008254:	08007fd7 	.word	0x08007fd7
 8008258:	08008ce8 	.word	0x08008ce8

0800825c <__swbuf_r>:
 800825c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800825e:	460e      	mov	r6, r1
 8008260:	4614      	mov	r4, r2
 8008262:	4605      	mov	r5, r0
 8008264:	b118      	cbz	r0, 800826e <__swbuf_r+0x12>
 8008266:	6983      	ldr	r3, [r0, #24]
 8008268:	b90b      	cbnz	r3, 800826e <__swbuf_r+0x12>
 800826a:	f000 f9e7 	bl	800863c <__sinit>
 800826e:	4b21      	ldr	r3, [pc, #132]	; (80082f4 <__swbuf_r+0x98>)
 8008270:	429c      	cmp	r4, r3
 8008272:	d12b      	bne.n	80082cc <__swbuf_r+0x70>
 8008274:	686c      	ldr	r4, [r5, #4]
 8008276:	69a3      	ldr	r3, [r4, #24]
 8008278:	60a3      	str	r3, [r4, #8]
 800827a:	89a3      	ldrh	r3, [r4, #12]
 800827c:	071a      	lsls	r2, r3, #28
 800827e:	d52f      	bpl.n	80082e0 <__swbuf_r+0x84>
 8008280:	6923      	ldr	r3, [r4, #16]
 8008282:	b36b      	cbz	r3, 80082e0 <__swbuf_r+0x84>
 8008284:	6923      	ldr	r3, [r4, #16]
 8008286:	6820      	ldr	r0, [r4, #0]
 8008288:	1ac0      	subs	r0, r0, r3
 800828a:	6963      	ldr	r3, [r4, #20]
 800828c:	b2f6      	uxtb	r6, r6
 800828e:	4283      	cmp	r3, r0
 8008290:	4637      	mov	r7, r6
 8008292:	dc04      	bgt.n	800829e <__swbuf_r+0x42>
 8008294:	4621      	mov	r1, r4
 8008296:	4628      	mov	r0, r5
 8008298:	f000 f93c 	bl	8008514 <_fflush_r>
 800829c:	bb30      	cbnz	r0, 80082ec <__swbuf_r+0x90>
 800829e:	68a3      	ldr	r3, [r4, #8]
 80082a0:	3b01      	subs	r3, #1
 80082a2:	60a3      	str	r3, [r4, #8]
 80082a4:	6823      	ldr	r3, [r4, #0]
 80082a6:	1c5a      	adds	r2, r3, #1
 80082a8:	6022      	str	r2, [r4, #0]
 80082aa:	701e      	strb	r6, [r3, #0]
 80082ac:	6963      	ldr	r3, [r4, #20]
 80082ae:	3001      	adds	r0, #1
 80082b0:	4283      	cmp	r3, r0
 80082b2:	d004      	beq.n	80082be <__swbuf_r+0x62>
 80082b4:	89a3      	ldrh	r3, [r4, #12]
 80082b6:	07db      	lsls	r3, r3, #31
 80082b8:	d506      	bpl.n	80082c8 <__swbuf_r+0x6c>
 80082ba:	2e0a      	cmp	r6, #10
 80082bc:	d104      	bne.n	80082c8 <__swbuf_r+0x6c>
 80082be:	4621      	mov	r1, r4
 80082c0:	4628      	mov	r0, r5
 80082c2:	f000 f927 	bl	8008514 <_fflush_r>
 80082c6:	b988      	cbnz	r0, 80082ec <__swbuf_r+0x90>
 80082c8:	4638      	mov	r0, r7
 80082ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80082cc:	4b0a      	ldr	r3, [pc, #40]	; (80082f8 <__swbuf_r+0x9c>)
 80082ce:	429c      	cmp	r4, r3
 80082d0:	d101      	bne.n	80082d6 <__swbuf_r+0x7a>
 80082d2:	68ac      	ldr	r4, [r5, #8]
 80082d4:	e7cf      	b.n	8008276 <__swbuf_r+0x1a>
 80082d6:	4b09      	ldr	r3, [pc, #36]	; (80082fc <__swbuf_r+0xa0>)
 80082d8:	429c      	cmp	r4, r3
 80082da:	bf08      	it	eq
 80082dc:	68ec      	ldreq	r4, [r5, #12]
 80082de:	e7ca      	b.n	8008276 <__swbuf_r+0x1a>
 80082e0:	4621      	mov	r1, r4
 80082e2:	4628      	mov	r0, r5
 80082e4:	f000 f81a 	bl	800831c <__swsetup_r>
 80082e8:	2800      	cmp	r0, #0
 80082ea:	d0cb      	beq.n	8008284 <__swbuf_r+0x28>
 80082ec:	f04f 37ff 	mov.w	r7, #4294967295
 80082f0:	e7ea      	b.n	80082c8 <__swbuf_r+0x6c>
 80082f2:	bf00      	nop
 80082f4:	08008e14 	.word	0x08008e14
 80082f8:	08008e34 	.word	0x08008e34
 80082fc:	08008df4 	.word	0x08008df4

08008300 <__ascii_wctomb>:
 8008300:	b149      	cbz	r1, 8008316 <__ascii_wctomb+0x16>
 8008302:	2aff      	cmp	r2, #255	; 0xff
 8008304:	bf85      	ittet	hi
 8008306:	238a      	movhi	r3, #138	; 0x8a
 8008308:	6003      	strhi	r3, [r0, #0]
 800830a:	700a      	strbls	r2, [r1, #0]
 800830c:	f04f 30ff 	movhi.w	r0, #4294967295
 8008310:	bf98      	it	ls
 8008312:	2001      	movls	r0, #1
 8008314:	4770      	bx	lr
 8008316:	4608      	mov	r0, r1
 8008318:	4770      	bx	lr
	...

0800831c <__swsetup_r>:
 800831c:	4b32      	ldr	r3, [pc, #200]	; (80083e8 <__swsetup_r+0xcc>)
 800831e:	b570      	push	{r4, r5, r6, lr}
 8008320:	681d      	ldr	r5, [r3, #0]
 8008322:	4606      	mov	r6, r0
 8008324:	460c      	mov	r4, r1
 8008326:	b125      	cbz	r5, 8008332 <__swsetup_r+0x16>
 8008328:	69ab      	ldr	r3, [r5, #24]
 800832a:	b913      	cbnz	r3, 8008332 <__swsetup_r+0x16>
 800832c:	4628      	mov	r0, r5
 800832e:	f000 f985 	bl	800863c <__sinit>
 8008332:	4b2e      	ldr	r3, [pc, #184]	; (80083ec <__swsetup_r+0xd0>)
 8008334:	429c      	cmp	r4, r3
 8008336:	d10f      	bne.n	8008358 <__swsetup_r+0x3c>
 8008338:	686c      	ldr	r4, [r5, #4]
 800833a:	89a3      	ldrh	r3, [r4, #12]
 800833c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008340:	0719      	lsls	r1, r3, #28
 8008342:	d42c      	bmi.n	800839e <__swsetup_r+0x82>
 8008344:	06dd      	lsls	r5, r3, #27
 8008346:	d411      	bmi.n	800836c <__swsetup_r+0x50>
 8008348:	2309      	movs	r3, #9
 800834a:	6033      	str	r3, [r6, #0]
 800834c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008350:	81a3      	strh	r3, [r4, #12]
 8008352:	f04f 30ff 	mov.w	r0, #4294967295
 8008356:	e03e      	b.n	80083d6 <__swsetup_r+0xba>
 8008358:	4b25      	ldr	r3, [pc, #148]	; (80083f0 <__swsetup_r+0xd4>)
 800835a:	429c      	cmp	r4, r3
 800835c:	d101      	bne.n	8008362 <__swsetup_r+0x46>
 800835e:	68ac      	ldr	r4, [r5, #8]
 8008360:	e7eb      	b.n	800833a <__swsetup_r+0x1e>
 8008362:	4b24      	ldr	r3, [pc, #144]	; (80083f4 <__swsetup_r+0xd8>)
 8008364:	429c      	cmp	r4, r3
 8008366:	bf08      	it	eq
 8008368:	68ec      	ldreq	r4, [r5, #12]
 800836a:	e7e6      	b.n	800833a <__swsetup_r+0x1e>
 800836c:	0758      	lsls	r0, r3, #29
 800836e:	d512      	bpl.n	8008396 <__swsetup_r+0x7a>
 8008370:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008372:	b141      	cbz	r1, 8008386 <__swsetup_r+0x6a>
 8008374:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008378:	4299      	cmp	r1, r3
 800837a:	d002      	beq.n	8008382 <__swsetup_r+0x66>
 800837c:	4630      	mov	r0, r6
 800837e:	f7ff fcd5 	bl	8007d2c <_free_r>
 8008382:	2300      	movs	r3, #0
 8008384:	6363      	str	r3, [r4, #52]	; 0x34
 8008386:	89a3      	ldrh	r3, [r4, #12]
 8008388:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800838c:	81a3      	strh	r3, [r4, #12]
 800838e:	2300      	movs	r3, #0
 8008390:	6063      	str	r3, [r4, #4]
 8008392:	6923      	ldr	r3, [r4, #16]
 8008394:	6023      	str	r3, [r4, #0]
 8008396:	89a3      	ldrh	r3, [r4, #12]
 8008398:	f043 0308 	orr.w	r3, r3, #8
 800839c:	81a3      	strh	r3, [r4, #12]
 800839e:	6923      	ldr	r3, [r4, #16]
 80083a0:	b94b      	cbnz	r3, 80083b6 <__swsetup_r+0x9a>
 80083a2:	89a3      	ldrh	r3, [r4, #12]
 80083a4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80083a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80083ac:	d003      	beq.n	80083b6 <__swsetup_r+0x9a>
 80083ae:	4621      	mov	r1, r4
 80083b0:	4630      	mov	r0, r6
 80083b2:	f000 fa09 	bl	80087c8 <__smakebuf_r>
 80083b6:	89a0      	ldrh	r0, [r4, #12]
 80083b8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80083bc:	f010 0301 	ands.w	r3, r0, #1
 80083c0:	d00a      	beq.n	80083d8 <__swsetup_r+0xbc>
 80083c2:	2300      	movs	r3, #0
 80083c4:	60a3      	str	r3, [r4, #8]
 80083c6:	6963      	ldr	r3, [r4, #20]
 80083c8:	425b      	negs	r3, r3
 80083ca:	61a3      	str	r3, [r4, #24]
 80083cc:	6923      	ldr	r3, [r4, #16]
 80083ce:	b943      	cbnz	r3, 80083e2 <__swsetup_r+0xc6>
 80083d0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80083d4:	d1ba      	bne.n	800834c <__swsetup_r+0x30>
 80083d6:	bd70      	pop	{r4, r5, r6, pc}
 80083d8:	0781      	lsls	r1, r0, #30
 80083da:	bf58      	it	pl
 80083dc:	6963      	ldrpl	r3, [r4, #20]
 80083de:	60a3      	str	r3, [r4, #8]
 80083e0:	e7f4      	b.n	80083cc <__swsetup_r+0xb0>
 80083e2:	2000      	movs	r0, #0
 80083e4:	e7f7      	b.n	80083d6 <__swsetup_r+0xba>
 80083e6:	bf00      	nop
 80083e8:	2000007c 	.word	0x2000007c
 80083ec:	08008e14 	.word	0x08008e14
 80083f0:	08008e34 	.word	0x08008e34
 80083f4:	08008df4 	.word	0x08008df4

080083f8 <abort>:
 80083f8:	b508      	push	{r3, lr}
 80083fa:	2006      	movs	r0, #6
 80083fc:	f000 fa4c 	bl	8008898 <raise>
 8008400:	2001      	movs	r0, #1
 8008402:	f7f8 ff6f 	bl	80012e4 <_exit>
	...

08008408 <__sflush_r>:
 8008408:	898a      	ldrh	r2, [r1, #12]
 800840a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800840e:	4605      	mov	r5, r0
 8008410:	0710      	lsls	r0, r2, #28
 8008412:	460c      	mov	r4, r1
 8008414:	d458      	bmi.n	80084c8 <__sflush_r+0xc0>
 8008416:	684b      	ldr	r3, [r1, #4]
 8008418:	2b00      	cmp	r3, #0
 800841a:	dc05      	bgt.n	8008428 <__sflush_r+0x20>
 800841c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800841e:	2b00      	cmp	r3, #0
 8008420:	dc02      	bgt.n	8008428 <__sflush_r+0x20>
 8008422:	2000      	movs	r0, #0
 8008424:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008428:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800842a:	2e00      	cmp	r6, #0
 800842c:	d0f9      	beq.n	8008422 <__sflush_r+0x1a>
 800842e:	2300      	movs	r3, #0
 8008430:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008434:	682f      	ldr	r7, [r5, #0]
 8008436:	602b      	str	r3, [r5, #0]
 8008438:	d032      	beq.n	80084a0 <__sflush_r+0x98>
 800843a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800843c:	89a3      	ldrh	r3, [r4, #12]
 800843e:	075a      	lsls	r2, r3, #29
 8008440:	d505      	bpl.n	800844e <__sflush_r+0x46>
 8008442:	6863      	ldr	r3, [r4, #4]
 8008444:	1ac0      	subs	r0, r0, r3
 8008446:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008448:	b10b      	cbz	r3, 800844e <__sflush_r+0x46>
 800844a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800844c:	1ac0      	subs	r0, r0, r3
 800844e:	2300      	movs	r3, #0
 8008450:	4602      	mov	r2, r0
 8008452:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008454:	6a21      	ldr	r1, [r4, #32]
 8008456:	4628      	mov	r0, r5
 8008458:	47b0      	blx	r6
 800845a:	1c43      	adds	r3, r0, #1
 800845c:	89a3      	ldrh	r3, [r4, #12]
 800845e:	d106      	bne.n	800846e <__sflush_r+0x66>
 8008460:	6829      	ldr	r1, [r5, #0]
 8008462:	291d      	cmp	r1, #29
 8008464:	d82c      	bhi.n	80084c0 <__sflush_r+0xb8>
 8008466:	4a2a      	ldr	r2, [pc, #168]	; (8008510 <__sflush_r+0x108>)
 8008468:	40ca      	lsrs	r2, r1
 800846a:	07d6      	lsls	r6, r2, #31
 800846c:	d528      	bpl.n	80084c0 <__sflush_r+0xb8>
 800846e:	2200      	movs	r2, #0
 8008470:	6062      	str	r2, [r4, #4]
 8008472:	04d9      	lsls	r1, r3, #19
 8008474:	6922      	ldr	r2, [r4, #16]
 8008476:	6022      	str	r2, [r4, #0]
 8008478:	d504      	bpl.n	8008484 <__sflush_r+0x7c>
 800847a:	1c42      	adds	r2, r0, #1
 800847c:	d101      	bne.n	8008482 <__sflush_r+0x7a>
 800847e:	682b      	ldr	r3, [r5, #0]
 8008480:	b903      	cbnz	r3, 8008484 <__sflush_r+0x7c>
 8008482:	6560      	str	r0, [r4, #84]	; 0x54
 8008484:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008486:	602f      	str	r7, [r5, #0]
 8008488:	2900      	cmp	r1, #0
 800848a:	d0ca      	beq.n	8008422 <__sflush_r+0x1a>
 800848c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008490:	4299      	cmp	r1, r3
 8008492:	d002      	beq.n	800849a <__sflush_r+0x92>
 8008494:	4628      	mov	r0, r5
 8008496:	f7ff fc49 	bl	8007d2c <_free_r>
 800849a:	2000      	movs	r0, #0
 800849c:	6360      	str	r0, [r4, #52]	; 0x34
 800849e:	e7c1      	b.n	8008424 <__sflush_r+0x1c>
 80084a0:	6a21      	ldr	r1, [r4, #32]
 80084a2:	2301      	movs	r3, #1
 80084a4:	4628      	mov	r0, r5
 80084a6:	47b0      	blx	r6
 80084a8:	1c41      	adds	r1, r0, #1
 80084aa:	d1c7      	bne.n	800843c <__sflush_r+0x34>
 80084ac:	682b      	ldr	r3, [r5, #0]
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d0c4      	beq.n	800843c <__sflush_r+0x34>
 80084b2:	2b1d      	cmp	r3, #29
 80084b4:	d001      	beq.n	80084ba <__sflush_r+0xb2>
 80084b6:	2b16      	cmp	r3, #22
 80084b8:	d101      	bne.n	80084be <__sflush_r+0xb6>
 80084ba:	602f      	str	r7, [r5, #0]
 80084bc:	e7b1      	b.n	8008422 <__sflush_r+0x1a>
 80084be:	89a3      	ldrh	r3, [r4, #12]
 80084c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80084c4:	81a3      	strh	r3, [r4, #12]
 80084c6:	e7ad      	b.n	8008424 <__sflush_r+0x1c>
 80084c8:	690f      	ldr	r7, [r1, #16]
 80084ca:	2f00      	cmp	r7, #0
 80084cc:	d0a9      	beq.n	8008422 <__sflush_r+0x1a>
 80084ce:	0793      	lsls	r3, r2, #30
 80084d0:	680e      	ldr	r6, [r1, #0]
 80084d2:	bf08      	it	eq
 80084d4:	694b      	ldreq	r3, [r1, #20]
 80084d6:	600f      	str	r7, [r1, #0]
 80084d8:	bf18      	it	ne
 80084da:	2300      	movne	r3, #0
 80084dc:	eba6 0807 	sub.w	r8, r6, r7
 80084e0:	608b      	str	r3, [r1, #8]
 80084e2:	f1b8 0f00 	cmp.w	r8, #0
 80084e6:	dd9c      	ble.n	8008422 <__sflush_r+0x1a>
 80084e8:	6a21      	ldr	r1, [r4, #32]
 80084ea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80084ec:	4643      	mov	r3, r8
 80084ee:	463a      	mov	r2, r7
 80084f0:	4628      	mov	r0, r5
 80084f2:	47b0      	blx	r6
 80084f4:	2800      	cmp	r0, #0
 80084f6:	dc06      	bgt.n	8008506 <__sflush_r+0xfe>
 80084f8:	89a3      	ldrh	r3, [r4, #12]
 80084fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80084fe:	81a3      	strh	r3, [r4, #12]
 8008500:	f04f 30ff 	mov.w	r0, #4294967295
 8008504:	e78e      	b.n	8008424 <__sflush_r+0x1c>
 8008506:	4407      	add	r7, r0
 8008508:	eba8 0800 	sub.w	r8, r8, r0
 800850c:	e7e9      	b.n	80084e2 <__sflush_r+0xda>
 800850e:	bf00      	nop
 8008510:	20400001 	.word	0x20400001

08008514 <_fflush_r>:
 8008514:	b538      	push	{r3, r4, r5, lr}
 8008516:	690b      	ldr	r3, [r1, #16]
 8008518:	4605      	mov	r5, r0
 800851a:	460c      	mov	r4, r1
 800851c:	b913      	cbnz	r3, 8008524 <_fflush_r+0x10>
 800851e:	2500      	movs	r5, #0
 8008520:	4628      	mov	r0, r5
 8008522:	bd38      	pop	{r3, r4, r5, pc}
 8008524:	b118      	cbz	r0, 800852e <_fflush_r+0x1a>
 8008526:	6983      	ldr	r3, [r0, #24]
 8008528:	b90b      	cbnz	r3, 800852e <_fflush_r+0x1a>
 800852a:	f000 f887 	bl	800863c <__sinit>
 800852e:	4b14      	ldr	r3, [pc, #80]	; (8008580 <_fflush_r+0x6c>)
 8008530:	429c      	cmp	r4, r3
 8008532:	d11b      	bne.n	800856c <_fflush_r+0x58>
 8008534:	686c      	ldr	r4, [r5, #4]
 8008536:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800853a:	2b00      	cmp	r3, #0
 800853c:	d0ef      	beq.n	800851e <_fflush_r+0xa>
 800853e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008540:	07d0      	lsls	r0, r2, #31
 8008542:	d404      	bmi.n	800854e <_fflush_r+0x3a>
 8008544:	0599      	lsls	r1, r3, #22
 8008546:	d402      	bmi.n	800854e <_fflush_r+0x3a>
 8008548:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800854a:	f000 f915 	bl	8008778 <__retarget_lock_acquire_recursive>
 800854e:	4628      	mov	r0, r5
 8008550:	4621      	mov	r1, r4
 8008552:	f7ff ff59 	bl	8008408 <__sflush_r>
 8008556:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008558:	07da      	lsls	r2, r3, #31
 800855a:	4605      	mov	r5, r0
 800855c:	d4e0      	bmi.n	8008520 <_fflush_r+0xc>
 800855e:	89a3      	ldrh	r3, [r4, #12]
 8008560:	059b      	lsls	r3, r3, #22
 8008562:	d4dd      	bmi.n	8008520 <_fflush_r+0xc>
 8008564:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008566:	f000 f908 	bl	800877a <__retarget_lock_release_recursive>
 800856a:	e7d9      	b.n	8008520 <_fflush_r+0xc>
 800856c:	4b05      	ldr	r3, [pc, #20]	; (8008584 <_fflush_r+0x70>)
 800856e:	429c      	cmp	r4, r3
 8008570:	d101      	bne.n	8008576 <_fflush_r+0x62>
 8008572:	68ac      	ldr	r4, [r5, #8]
 8008574:	e7df      	b.n	8008536 <_fflush_r+0x22>
 8008576:	4b04      	ldr	r3, [pc, #16]	; (8008588 <_fflush_r+0x74>)
 8008578:	429c      	cmp	r4, r3
 800857a:	bf08      	it	eq
 800857c:	68ec      	ldreq	r4, [r5, #12]
 800857e:	e7da      	b.n	8008536 <_fflush_r+0x22>
 8008580:	08008e14 	.word	0x08008e14
 8008584:	08008e34 	.word	0x08008e34
 8008588:	08008df4 	.word	0x08008df4

0800858c <std>:
 800858c:	2300      	movs	r3, #0
 800858e:	b510      	push	{r4, lr}
 8008590:	4604      	mov	r4, r0
 8008592:	e9c0 3300 	strd	r3, r3, [r0]
 8008596:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800859a:	6083      	str	r3, [r0, #8]
 800859c:	8181      	strh	r1, [r0, #12]
 800859e:	6643      	str	r3, [r0, #100]	; 0x64
 80085a0:	81c2      	strh	r2, [r0, #14]
 80085a2:	6183      	str	r3, [r0, #24]
 80085a4:	4619      	mov	r1, r3
 80085a6:	2208      	movs	r2, #8
 80085a8:	305c      	adds	r0, #92	; 0x5c
 80085aa:	f7fd fd1d 	bl	8005fe8 <memset>
 80085ae:	4b05      	ldr	r3, [pc, #20]	; (80085c4 <std+0x38>)
 80085b0:	6263      	str	r3, [r4, #36]	; 0x24
 80085b2:	4b05      	ldr	r3, [pc, #20]	; (80085c8 <std+0x3c>)
 80085b4:	62a3      	str	r3, [r4, #40]	; 0x28
 80085b6:	4b05      	ldr	r3, [pc, #20]	; (80085cc <std+0x40>)
 80085b8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80085ba:	4b05      	ldr	r3, [pc, #20]	; (80085d0 <std+0x44>)
 80085bc:	6224      	str	r4, [r4, #32]
 80085be:	6323      	str	r3, [r4, #48]	; 0x30
 80085c0:	bd10      	pop	{r4, pc}
 80085c2:	bf00      	nop
 80085c4:	080088d1 	.word	0x080088d1
 80085c8:	080088f3 	.word	0x080088f3
 80085cc:	0800892b 	.word	0x0800892b
 80085d0:	0800894f 	.word	0x0800894f

080085d4 <_cleanup_r>:
 80085d4:	4901      	ldr	r1, [pc, #4]	; (80085dc <_cleanup_r+0x8>)
 80085d6:	f000 b8af 	b.w	8008738 <_fwalk_reent>
 80085da:	bf00      	nop
 80085dc:	08008515 	.word	0x08008515

080085e0 <__sfmoreglue>:
 80085e0:	b570      	push	{r4, r5, r6, lr}
 80085e2:	2268      	movs	r2, #104	; 0x68
 80085e4:	1e4d      	subs	r5, r1, #1
 80085e6:	4355      	muls	r5, r2
 80085e8:	460e      	mov	r6, r1
 80085ea:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80085ee:	f7ff fc09 	bl	8007e04 <_malloc_r>
 80085f2:	4604      	mov	r4, r0
 80085f4:	b140      	cbz	r0, 8008608 <__sfmoreglue+0x28>
 80085f6:	2100      	movs	r1, #0
 80085f8:	e9c0 1600 	strd	r1, r6, [r0]
 80085fc:	300c      	adds	r0, #12
 80085fe:	60a0      	str	r0, [r4, #8]
 8008600:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008604:	f7fd fcf0 	bl	8005fe8 <memset>
 8008608:	4620      	mov	r0, r4
 800860a:	bd70      	pop	{r4, r5, r6, pc}

0800860c <__sfp_lock_acquire>:
 800860c:	4801      	ldr	r0, [pc, #4]	; (8008614 <__sfp_lock_acquire+0x8>)
 800860e:	f000 b8b3 	b.w	8008778 <__retarget_lock_acquire_recursive>
 8008612:	bf00      	nop
 8008614:	200006f5 	.word	0x200006f5

08008618 <__sfp_lock_release>:
 8008618:	4801      	ldr	r0, [pc, #4]	; (8008620 <__sfp_lock_release+0x8>)
 800861a:	f000 b8ae 	b.w	800877a <__retarget_lock_release_recursive>
 800861e:	bf00      	nop
 8008620:	200006f5 	.word	0x200006f5

08008624 <__sinit_lock_acquire>:
 8008624:	4801      	ldr	r0, [pc, #4]	; (800862c <__sinit_lock_acquire+0x8>)
 8008626:	f000 b8a7 	b.w	8008778 <__retarget_lock_acquire_recursive>
 800862a:	bf00      	nop
 800862c:	200006f6 	.word	0x200006f6

08008630 <__sinit_lock_release>:
 8008630:	4801      	ldr	r0, [pc, #4]	; (8008638 <__sinit_lock_release+0x8>)
 8008632:	f000 b8a2 	b.w	800877a <__retarget_lock_release_recursive>
 8008636:	bf00      	nop
 8008638:	200006f6 	.word	0x200006f6

0800863c <__sinit>:
 800863c:	b510      	push	{r4, lr}
 800863e:	4604      	mov	r4, r0
 8008640:	f7ff fff0 	bl	8008624 <__sinit_lock_acquire>
 8008644:	69a3      	ldr	r3, [r4, #24]
 8008646:	b11b      	cbz	r3, 8008650 <__sinit+0x14>
 8008648:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800864c:	f7ff bff0 	b.w	8008630 <__sinit_lock_release>
 8008650:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008654:	6523      	str	r3, [r4, #80]	; 0x50
 8008656:	4b13      	ldr	r3, [pc, #76]	; (80086a4 <__sinit+0x68>)
 8008658:	4a13      	ldr	r2, [pc, #76]	; (80086a8 <__sinit+0x6c>)
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	62a2      	str	r2, [r4, #40]	; 0x28
 800865e:	42a3      	cmp	r3, r4
 8008660:	bf04      	itt	eq
 8008662:	2301      	moveq	r3, #1
 8008664:	61a3      	streq	r3, [r4, #24]
 8008666:	4620      	mov	r0, r4
 8008668:	f000 f820 	bl	80086ac <__sfp>
 800866c:	6060      	str	r0, [r4, #4]
 800866e:	4620      	mov	r0, r4
 8008670:	f000 f81c 	bl	80086ac <__sfp>
 8008674:	60a0      	str	r0, [r4, #8]
 8008676:	4620      	mov	r0, r4
 8008678:	f000 f818 	bl	80086ac <__sfp>
 800867c:	2200      	movs	r2, #0
 800867e:	60e0      	str	r0, [r4, #12]
 8008680:	2104      	movs	r1, #4
 8008682:	6860      	ldr	r0, [r4, #4]
 8008684:	f7ff ff82 	bl	800858c <std>
 8008688:	68a0      	ldr	r0, [r4, #8]
 800868a:	2201      	movs	r2, #1
 800868c:	2109      	movs	r1, #9
 800868e:	f7ff ff7d 	bl	800858c <std>
 8008692:	68e0      	ldr	r0, [r4, #12]
 8008694:	2202      	movs	r2, #2
 8008696:	2112      	movs	r1, #18
 8008698:	f7ff ff78 	bl	800858c <std>
 800869c:	2301      	movs	r3, #1
 800869e:	61a3      	str	r3, [r4, #24]
 80086a0:	e7d2      	b.n	8008648 <__sinit+0xc>
 80086a2:	bf00      	nop
 80086a4:	08008a78 	.word	0x08008a78
 80086a8:	080085d5 	.word	0x080085d5

080086ac <__sfp>:
 80086ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086ae:	4607      	mov	r7, r0
 80086b0:	f7ff ffac 	bl	800860c <__sfp_lock_acquire>
 80086b4:	4b1e      	ldr	r3, [pc, #120]	; (8008730 <__sfp+0x84>)
 80086b6:	681e      	ldr	r6, [r3, #0]
 80086b8:	69b3      	ldr	r3, [r6, #24]
 80086ba:	b913      	cbnz	r3, 80086c2 <__sfp+0x16>
 80086bc:	4630      	mov	r0, r6
 80086be:	f7ff ffbd 	bl	800863c <__sinit>
 80086c2:	3648      	adds	r6, #72	; 0x48
 80086c4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80086c8:	3b01      	subs	r3, #1
 80086ca:	d503      	bpl.n	80086d4 <__sfp+0x28>
 80086cc:	6833      	ldr	r3, [r6, #0]
 80086ce:	b30b      	cbz	r3, 8008714 <__sfp+0x68>
 80086d0:	6836      	ldr	r6, [r6, #0]
 80086d2:	e7f7      	b.n	80086c4 <__sfp+0x18>
 80086d4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80086d8:	b9d5      	cbnz	r5, 8008710 <__sfp+0x64>
 80086da:	4b16      	ldr	r3, [pc, #88]	; (8008734 <__sfp+0x88>)
 80086dc:	60e3      	str	r3, [r4, #12]
 80086de:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80086e2:	6665      	str	r5, [r4, #100]	; 0x64
 80086e4:	f000 f847 	bl	8008776 <__retarget_lock_init_recursive>
 80086e8:	f7ff ff96 	bl	8008618 <__sfp_lock_release>
 80086ec:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80086f0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80086f4:	6025      	str	r5, [r4, #0]
 80086f6:	61a5      	str	r5, [r4, #24]
 80086f8:	2208      	movs	r2, #8
 80086fa:	4629      	mov	r1, r5
 80086fc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008700:	f7fd fc72 	bl	8005fe8 <memset>
 8008704:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008708:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800870c:	4620      	mov	r0, r4
 800870e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008710:	3468      	adds	r4, #104	; 0x68
 8008712:	e7d9      	b.n	80086c8 <__sfp+0x1c>
 8008714:	2104      	movs	r1, #4
 8008716:	4638      	mov	r0, r7
 8008718:	f7ff ff62 	bl	80085e0 <__sfmoreglue>
 800871c:	4604      	mov	r4, r0
 800871e:	6030      	str	r0, [r6, #0]
 8008720:	2800      	cmp	r0, #0
 8008722:	d1d5      	bne.n	80086d0 <__sfp+0x24>
 8008724:	f7ff ff78 	bl	8008618 <__sfp_lock_release>
 8008728:	230c      	movs	r3, #12
 800872a:	603b      	str	r3, [r7, #0]
 800872c:	e7ee      	b.n	800870c <__sfp+0x60>
 800872e:	bf00      	nop
 8008730:	08008a78 	.word	0x08008a78
 8008734:	ffff0001 	.word	0xffff0001

08008738 <_fwalk_reent>:
 8008738:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800873c:	4606      	mov	r6, r0
 800873e:	4688      	mov	r8, r1
 8008740:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008744:	2700      	movs	r7, #0
 8008746:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800874a:	f1b9 0901 	subs.w	r9, r9, #1
 800874e:	d505      	bpl.n	800875c <_fwalk_reent+0x24>
 8008750:	6824      	ldr	r4, [r4, #0]
 8008752:	2c00      	cmp	r4, #0
 8008754:	d1f7      	bne.n	8008746 <_fwalk_reent+0xe>
 8008756:	4638      	mov	r0, r7
 8008758:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800875c:	89ab      	ldrh	r3, [r5, #12]
 800875e:	2b01      	cmp	r3, #1
 8008760:	d907      	bls.n	8008772 <_fwalk_reent+0x3a>
 8008762:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008766:	3301      	adds	r3, #1
 8008768:	d003      	beq.n	8008772 <_fwalk_reent+0x3a>
 800876a:	4629      	mov	r1, r5
 800876c:	4630      	mov	r0, r6
 800876e:	47c0      	blx	r8
 8008770:	4307      	orrs	r7, r0
 8008772:	3568      	adds	r5, #104	; 0x68
 8008774:	e7e9      	b.n	800874a <_fwalk_reent+0x12>

08008776 <__retarget_lock_init_recursive>:
 8008776:	4770      	bx	lr

08008778 <__retarget_lock_acquire_recursive>:
 8008778:	4770      	bx	lr

0800877a <__retarget_lock_release_recursive>:
 800877a:	4770      	bx	lr

0800877c <__swhatbuf_r>:
 800877c:	b570      	push	{r4, r5, r6, lr}
 800877e:	460e      	mov	r6, r1
 8008780:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008784:	2900      	cmp	r1, #0
 8008786:	b096      	sub	sp, #88	; 0x58
 8008788:	4614      	mov	r4, r2
 800878a:	461d      	mov	r5, r3
 800878c:	da08      	bge.n	80087a0 <__swhatbuf_r+0x24>
 800878e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008792:	2200      	movs	r2, #0
 8008794:	602a      	str	r2, [r5, #0]
 8008796:	061a      	lsls	r2, r3, #24
 8008798:	d410      	bmi.n	80087bc <__swhatbuf_r+0x40>
 800879a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800879e:	e00e      	b.n	80087be <__swhatbuf_r+0x42>
 80087a0:	466a      	mov	r2, sp
 80087a2:	f000 f8fb 	bl	800899c <_fstat_r>
 80087a6:	2800      	cmp	r0, #0
 80087a8:	dbf1      	blt.n	800878e <__swhatbuf_r+0x12>
 80087aa:	9a01      	ldr	r2, [sp, #4]
 80087ac:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80087b0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80087b4:	425a      	negs	r2, r3
 80087b6:	415a      	adcs	r2, r3
 80087b8:	602a      	str	r2, [r5, #0]
 80087ba:	e7ee      	b.n	800879a <__swhatbuf_r+0x1e>
 80087bc:	2340      	movs	r3, #64	; 0x40
 80087be:	2000      	movs	r0, #0
 80087c0:	6023      	str	r3, [r4, #0]
 80087c2:	b016      	add	sp, #88	; 0x58
 80087c4:	bd70      	pop	{r4, r5, r6, pc}
	...

080087c8 <__smakebuf_r>:
 80087c8:	898b      	ldrh	r3, [r1, #12]
 80087ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80087cc:	079d      	lsls	r5, r3, #30
 80087ce:	4606      	mov	r6, r0
 80087d0:	460c      	mov	r4, r1
 80087d2:	d507      	bpl.n	80087e4 <__smakebuf_r+0x1c>
 80087d4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80087d8:	6023      	str	r3, [r4, #0]
 80087da:	6123      	str	r3, [r4, #16]
 80087dc:	2301      	movs	r3, #1
 80087de:	6163      	str	r3, [r4, #20]
 80087e0:	b002      	add	sp, #8
 80087e2:	bd70      	pop	{r4, r5, r6, pc}
 80087e4:	ab01      	add	r3, sp, #4
 80087e6:	466a      	mov	r2, sp
 80087e8:	f7ff ffc8 	bl	800877c <__swhatbuf_r>
 80087ec:	9900      	ldr	r1, [sp, #0]
 80087ee:	4605      	mov	r5, r0
 80087f0:	4630      	mov	r0, r6
 80087f2:	f7ff fb07 	bl	8007e04 <_malloc_r>
 80087f6:	b948      	cbnz	r0, 800880c <__smakebuf_r+0x44>
 80087f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80087fc:	059a      	lsls	r2, r3, #22
 80087fe:	d4ef      	bmi.n	80087e0 <__smakebuf_r+0x18>
 8008800:	f023 0303 	bic.w	r3, r3, #3
 8008804:	f043 0302 	orr.w	r3, r3, #2
 8008808:	81a3      	strh	r3, [r4, #12]
 800880a:	e7e3      	b.n	80087d4 <__smakebuf_r+0xc>
 800880c:	4b0d      	ldr	r3, [pc, #52]	; (8008844 <__smakebuf_r+0x7c>)
 800880e:	62b3      	str	r3, [r6, #40]	; 0x28
 8008810:	89a3      	ldrh	r3, [r4, #12]
 8008812:	6020      	str	r0, [r4, #0]
 8008814:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008818:	81a3      	strh	r3, [r4, #12]
 800881a:	9b00      	ldr	r3, [sp, #0]
 800881c:	6163      	str	r3, [r4, #20]
 800881e:	9b01      	ldr	r3, [sp, #4]
 8008820:	6120      	str	r0, [r4, #16]
 8008822:	b15b      	cbz	r3, 800883c <__smakebuf_r+0x74>
 8008824:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008828:	4630      	mov	r0, r6
 800882a:	f000 f8c9 	bl	80089c0 <_isatty_r>
 800882e:	b128      	cbz	r0, 800883c <__smakebuf_r+0x74>
 8008830:	89a3      	ldrh	r3, [r4, #12]
 8008832:	f023 0303 	bic.w	r3, r3, #3
 8008836:	f043 0301 	orr.w	r3, r3, #1
 800883a:	81a3      	strh	r3, [r4, #12]
 800883c:	89a0      	ldrh	r0, [r4, #12]
 800883e:	4305      	orrs	r5, r0
 8008840:	81a5      	strh	r5, [r4, #12]
 8008842:	e7cd      	b.n	80087e0 <__smakebuf_r+0x18>
 8008844:	080085d5 	.word	0x080085d5

08008848 <_raise_r>:
 8008848:	291f      	cmp	r1, #31
 800884a:	b538      	push	{r3, r4, r5, lr}
 800884c:	4604      	mov	r4, r0
 800884e:	460d      	mov	r5, r1
 8008850:	d904      	bls.n	800885c <_raise_r+0x14>
 8008852:	2316      	movs	r3, #22
 8008854:	6003      	str	r3, [r0, #0]
 8008856:	f04f 30ff 	mov.w	r0, #4294967295
 800885a:	bd38      	pop	{r3, r4, r5, pc}
 800885c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800885e:	b112      	cbz	r2, 8008866 <_raise_r+0x1e>
 8008860:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008864:	b94b      	cbnz	r3, 800887a <_raise_r+0x32>
 8008866:	4620      	mov	r0, r4
 8008868:	f000 f830 	bl	80088cc <_getpid_r>
 800886c:	462a      	mov	r2, r5
 800886e:	4601      	mov	r1, r0
 8008870:	4620      	mov	r0, r4
 8008872:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008876:	f000 b817 	b.w	80088a8 <_kill_r>
 800887a:	2b01      	cmp	r3, #1
 800887c:	d00a      	beq.n	8008894 <_raise_r+0x4c>
 800887e:	1c59      	adds	r1, r3, #1
 8008880:	d103      	bne.n	800888a <_raise_r+0x42>
 8008882:	2316      	movs	r3, #22
 8008884:	6003      	str	r3, [r0, #0]
 8008886:	2001      	movs	r0, #1
 8008888:	e7e7      	b.n	800885a <_raise_r+0x12>
 800888a:	2400      	movs	r4, #0
 800888c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008890:	4628      	mov	r0, r5
 8008892:	4798      	blx	r3
 8008894:	2000      	movs	r0, #0
 8008896:	e7e0      	b.n	800885a <_raise_r+0x12>

08008898 <raise>:
 8008898:	4b02      	ldr	r3, [pc, #8]	; (80088a4 <raise+0xc>)
 800889a:	4601      	mov	r1, r0
 800889c:	6818      	ldr	r0, [r3, #0]
 800889e:	f7ff bfd3 	b.w	8008848 <_raise_r>
 80088a2:	bf00      	nop
 80088a4:	2000007c 	.word	0x2000007c

080088a8 <_kill_r>:
 80088a8:	b538      	push	{r3, r4, r5, lr}
 80088aa:	4d07      	ldr	r5, [pc, #28]	; (80088c8 <_kill_r+0x20>)
 80088ac:	2300      	movs	r3, #0
 80088ae:	4604      	mov	r4, r0
 80088b0:	4608      	mov	r0, r1
 80088b2:	4611      	mov	r1, r2
 80088b4:	602b      	str	r3, [r5, #0]
 80088b6:	f7f8 fd05 	bl	80012c4 <_kill>
 80088ba:	1c43      	adds	r3, r0, #1
 80088bc:	d102      	bne.n	80088c4 <_kill_r+0x1c>
 80088be:	682b      	ldr	r3, [r5, #0]
 80088c0:	b103      	cbz	r3, 80088c4 <_kill_r+0x1c>
 80088c2:	6023      	str	r3, [r4, #0]
 80088c4:	bd38      	pop	{r3, r4, r5, pc}
 80088c6:	bf00      	nop
 80088c8:	200006f0 	.word	0x200006f0

080088cc <_getpid_r>:
 80088cc:	f7f8 bcf2 	b.w	80012b4 <_getpid>

080088d0 <__sread>:
 80088d0:	b510      	push	{r4, lr}
 80088d2:	460c      	mov	r4, r1
 80088d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088d8:	f000 f894 	bl	8008a04 <_read_r>
 80088dc:	2800      	cmp	r0, #0
 80088de:	bfab      	itete	ge
 80088e0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80088e2:	89a3      	ldrhlt	r3, [r4, #12]
 80088e4:	181b      	addge	r3, r3, r0
 80088e6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80088ea:	bfac      	ite	ge
 80088ec:	6563      	strge	r3, [r4, #84]	; 0x54
 80088ee:	81a3      	strhlt	r3, [r4, #12]
 80088f0:	bd10      	pop	{r4, pc}

080088f2 <__swrite>:
 80088f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088f6:	461f      	mov	r7, r3
 80088f8:	898b      	ldrh	r3, [r1, #12]
 80088fa:	05db      	lsls	r3, r3, #23
 80088fc:	4605      	mov	r5, r0
 80088fe:	460c      	mov	r4, r1
 8008900:	4616      	mov	r6, r2
 8008902:	d505      	bpl.n	8008910 <__swrite+0x1e>
 8008904:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008908:	2302      	movs	r3, #2
 800890a:	2200      	movs	r2, #0
 800890c:	f000 f868 	bl	80089e0 <_lseek_r>
 8008910:	89a3      	ldrh	r3, [r4, #12]
 8008912:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008916:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800891a:	81a3      	strh	r3, [r4, #12]
 800891c:	4632      	mov	r2, r6
 800891e:	463b      	mov	r3, r7
 8008920:	4628      	mov	r0, r5
 8008922:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008926:	f000 b817 	b.w	8008958 <_write_r>

0800892a <__sseek>:
 800892a:	b510      	push	{r4, lr}
 800892c:	460c      	mov	r4, r1
 800892e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008932:	f000 f855 	bl	80089e0 <_lseek_r>
 8008936:	1c43      	adds	r3, r0, #1
 8008938:	89a3      	ldrh	r3, [r4, #12]
 800893a:	bf15      	itete	ne
 800893c:	6560      	strne	r0, [r4, #84]	; 0x54
 800893e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008942:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008946:	81a3      	strheq	r3, [r4, #12]
 8008948:	bf18      	it	ne
 800894a:	81a3      	strhne	r3, [r4, #12]
 800894c:	bd10      	pop	{r4, pc}

0800894e <__sclose>:
 800894e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008952:	f000 b813 	b.w	800897c <_close_r>
	...

08008958 <_write_r>:
 8008958:	b538      	push	{r3, r4, r5, lr}
 800895a:	4d07      	ldr	r5, [pc, #28]	; (8008978 <_write_r+0x20>)
 800895c:	4604      	mov	r4, r0
 800895e:	4608      	mov	r0, r1
 8008960:	4611      	mov	r1, r2
 8008962:	2200      	movs	r2, #0
 8008964:	602a      	str	r2, [r5, #0]
 8008966:	461a      	mov	r2, r3
 8008968:	f7f8 fce3 	bl	8001332 <_write>
 800896c:	1c43      	adds	r3, r0, #1
 800896e:	d102      	bne.n	8008976 <_write_r+0x1e>
 8008970:	682b      	ldr	r3, [r5, #0]
 8008972:	b103      	cbz	r3, 8008976 <_write_r+0x1e>
 8008974:	6023      	str	r3, [r4, #0]
 8008976:	bd38      	pop	{r3, r4, r5, pc}
 8008978:	200006f0 	.word	0x200006f0

0800897c <_close_r>:
 800897c:	b538      	push	{r3, r4, r5, lr}
 800897e:	4d06      	ldr	r5, [pc, #24]	; (8008998 <_close_r+0x1c>)
 8008980:	2300      	movs	r3, #0
 8008982:	4604      	mov	r4, r0
 8008984:	4608      	mov	r0, r1
 8008986:	602b      	str	r3, [r5, #0]
 8008988:	f7f8 fcef 	bl	800136a <_close>
 800898c:	1c43      	adds	r3, r0, #1
 800898e:	d102      	bne.n	8008996 <_close_r+0x1a>
 8008990:	682b      	ldr	r3, [r5, #0]
 8008992:	b103      	cbz	r3, 8008996 <_close_r+0x1a>
 8008994:	6023      	str	r3, [r4, #0]
 8008996:	bd38      	pop	{r3, r4, r5, pc}
 8008998:	200006f0 	.word	0x200006f0

0800899c <_fstat_r>:
 800899c:	b538      	push	{r3, r4, r5, lr}
 800899e:	4d07      	ldr	r5, [pc, #28]	; (80089bc <_fstat_r+0x20>)
 80089a0:	2300      	movs	r3, #0
 80089a2:	4604      	mov	r4, r0
 80089a4:	4608      	mov	r0, r1
 80089a6:	4611      	mov	r1, r2
 80089a8:	602b      	str	r3, [r5, #0]
 80089aa:	f7f8 fcea 	bl	8001382 <_fstat>
 80089ae:	1c43      	adds	r3, r0, #1
 80089b0:	d102      	bne.n	80089b8 <_fstat_r+0x1c>
 80089b2:	682b      	ldr	r3, [r5, #0]
 80089b4:	b103      	cbz	r3, 80089b8 <_fstat_r+0x1c>
 80089b6:	6023      	str	r3, [r4, #0]
 80089b8:	bd38      	pop	{r3, r4, r5, pc}
 80089ba:	bf00      	nop
 80089bc:	200006f0 	.word	0x200006f0

080089c0 <_isatty_r>:
 80089c0:	b538      	push	{r3, r4, r5, lr}
 80089c2:	4d06      	ldr	r5, [pc, #24]	; (80089dc <_isatty_r+0x1c>)
 80089c4:	2300      	movs	r3, #0
 80089c6:	4604      	mov	r4, r0
 80089c8:	4608      	mov	r0, r1
 80089ca:	602b      	str	r3, [r5, #0]
 80089cc:	f7f8 fce9 	bl	80013a2 <_isatty>
 80089d0:	1c43      	adds	r3, r0, #1
 80089d2:	d102      	bne.n	80089da <_isatty_r+0x1a>
 80089d4:	682b      	ldr	r3, [r5, #0]
 80089d6:	b103      	cbz	r3, 80089da <_isatty_r+0x1a>
 80089d8:	6023      	str	r3, [r4, #0]
 80089da:	bd38      	pop	{r3, r4, r5, pc}
 80089dc:	200006f0 	.word	0x200006f0

080089e0 <_lseek_r>:
 80089e0:	b538      	push	{r3, r4, r5, lr}
 80089e2:	4d07      	ldr	r5, [pc, #28]	; (8008a00 <_lseek_r+0x20>)
 80089e4:	4604      	mov	r4, r0
 80089e6:	4608      	mov	r0, r1
 80089e8:	4611      	mov	r1, r2
 80089ea:	2200      	movs	r2, #0
 80089ec:	602a      	str	r2, [r5, #0]
 80089ee:	461a      	mov	r2, r3
 80089f0:	f7f8 fce2 	bl	80013b8 <_lseek>
 80089f4:	1c43      	adds	r3, r0, #1
 80089f6:	d102      	bne.n	80089fe <_lseek_r+0x1e>
 80089f8:	682b      	ldr	r3, [r5, #0]
 80089fa:	b103      	cbz	r3, 80089fe <_lseek_r+0x1e>
 80089fc:	6023      	str	r3, [r4, #0]
 80089fe:	bd38      	pop	{r3, r4, r5, pc}
 8008a00:	200006f0 	.word	0x200006f0

08008a04 <_read_r>:
 8008a04:	b538      	push	{r3, r4, r5, lr}
 8008a06:	4d07      	ldr	r5, [pc, #28]	; (8008a24 <_read_r+0x20>)
 8008a08:	4604      	mov	r4, r0
 8008a0a:	4608      	mov	r0, r1
 8008a0c:	4611      	mov	r1, r2
 8008a0e:	2200      	movs	r2, #0
 8008a10:	602a      	str	r2, [r5, #0]
 8008a12:	461a      	mov	r2, r3
 8008a14:	f7f8 fc70 	bl	80012f8 <_read>
 8008a18:	1c43      	adds	r3, r0, #1
 8008a1a:	d102      	bne.n	8008a22 <_read_r+0x1e>
 8008a1c:	682b      	ldr	r3, [r5, #0]
 8008a1e:	b103      	cbz	r3, 8008a22 <_read_r+0x1e>
 8008a20:	6023      	str	r3, [r4, #0]
 8008a22:	bd38      	pop	{r3, r4, r5, pc}
 8008a24:	200006f0 	.word	0x200006f0

08008a28 <_init>:
 8008a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a2a:	bf00      	nop
 8008a2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a2e:	bc08      	pop	{r3}
 8008a30:	469e      	mov	lr, r3
 8008a32:	4770      	bx	lr

08008a34 <_fini>:
 8008a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a36:	bf00      	nop
 8008a38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a3a:	bc08      	pop	{r3}
 8008a3c:	469e      	mov	lr, r3
 8008a3e:	4770      	bx	lr
